
projekt2.1-baza.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004470  08004470  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004470  08004470  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004470  08004470  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004470  08004470  00014470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004474  08004474  00014474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002738  20000074  080044ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027ac  080044ec  000227ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000935c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfd  00000000  00000000  000293f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002b860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175ac  00000000  00000000  0002c020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093c4  00000000  00000000  000435cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e94  00000000  00000000  0004c990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002630  00000000  00000000  000d3878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080041c0 	.word	0x080041c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080041c0 	.word	0x080041c0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <send>:
int sumaNadOdb;
uint8_t znak;

// ====================== USART SEND ======================

void send(char *format, ...) {
 8000170:	b40f      	push	{r0, r1, r2, r3}
 8000172:	b580      	push	{r7, lr}
 8000174:	b0b6      	sub	sp, #216	; 0xd8
 8000176:	af00      	add	r7, sp, #0

	char tmp_s[200];
	va_list arglist;
	va_start(arglist, format);
 8000178:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800017c:	607b      	str	r3, [r7, #4]
	vsprintf(tmp_s, format, arglist);
 800017e:	f107 0308 	add.w	r3, r7, #8
 8000182:	687a      	ldr	r2, [r7, #4]
 8000184:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8000188:	4618      	mov	r0, r3
 800018a:	f003 fc03 	bl	8003994 <vsiprintf>
	va_end(arglist);

	uint8_t idx = EmptyTx;
 800018e:	4b35      	ldr	r3, [pc, #212]	; (8000264 <send+0xf4>)
 8000190:	881b      	ldrh	r3, [r3, #0]
 8000192:	b29b      	uxth	r3, r3
 8000194:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	for (int i = 0; i < strlen(tmp_s); i++) {
 8000198:	2300      	movs	r3, #0
 800019a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800019e:	e013      	b.n	80001c8 <send+0x58>
		BUFF_TX[idx] = tmp_s[i];
 80001a0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80001a4:	f107 0108 	add.w	r1, r7, #8
 80001a8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80001ac:	440a      	add	r2, r1
 80001ae:	7811      	ldrb	r1, [r2, #0]
 80001b0:	4a2d      	ldr	r2, [pc, #180]	; (8000268 <send+0xf8>)
 80001b2:	54d1      	strb	r1, [r2, r3]
		idx++;
 80001b4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80001b8:	3301      	adds	r3, #1
 80001ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	for (int i = 0; i < strlen(tmp_s); i++) {
 80001be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80001c2:	3301      	adds	r3, #1
 80001c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80001c8:	f107 0308 	add.w	r3, r7, #8
 80001cc:	4618      	mov	r0, r3
 80001ce:	f7ff ffc7 	bl	8000160 <strlen>
 80001d2:	4602      	mov	r2, r0
 80001d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80001d8:	429a      	cmp	r2, r3
 80001da:	d8e1      	bhi.n	80001a0 <send+0x30>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001dc:	b672      	cpsid	i
}
 80001de:	bf00      	nop
		if (idx >= TX_BUFF_SIZE)
			idx = 0;
	}
	__disable_irq();
	if (BusyTx == EmptyTx
 80001e0:	4b22      	ldr	r3, [pc, #136]	; (800026c <send+0xfc>)
 80001e2:	881b      	ldrh	r3, [r3, #0]
 80001e4:	b29a      	uxth	r2, r3
 80001e6:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <send+0xf4>)
 80001e8:	881b      	ldrh	r3, [r3, #0]
 80001ea:	b29b      	uxth	r3, r3
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d12a      	bne.n	8000246 <send+0xd6>
			&& __HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE) == SET) {
 80001f0:	4b1f      	ldr	r3, [pc, #124]	; (8000270 <send+0x100>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80001fa:	2b80      	cmp	r3, #128	; 0x80
 80001fc:	d123      	bne.n	8000246 <send+0xd6>
		EmptyTx = idx;
 80001fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000202:	b29a      	uxth	r2, r3
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <send+0xf4>)
 8000206:	801a      	strh	r2, [r3, #0]
		temp = BUFF_TX[BusyTx];
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <send+0xfc>)
 800020a:	881b      	ldrh	r3, [r3, #0]
 800020c:	b29b      	uxth	r3, r3
 800020e:	461a      	mov	r2, r3
 8000210:	4b15      	ldr	r3, [pc, #84]	; (8000268 <send+0xf8>)
 8000212:	5c9b      	ldrb	r3, [r3, r2]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4b17      	ldr	r3, [pc, #92]	; (8000274 <send+0x104>)
 8000218:	701a      	strb	r2, [r3, #0]
		BusyTx++;
 800021a:	4b14      	ldr	r3, [pc, #80]	; (800026c <send+0xfc>)
 800021c:	881b      	ldrh	r3, [r3, #0]
 800021e:	b29b      	uxth	r3, r3
 8000220:	3301      	adds	r3, #1
 8000222:	b29a      	uxth	r2, r3
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <send+0xfc>)
 8000226:	801a      	strh	r2, [r3, #0]
		if (BusyTx >= TX_BUFF_SIZE)
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <send+0xfc>)
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	b29b      	uxth	r3, r3
 800022e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000232:	d302      	bcc.n	800023a <send+0xca>
			BusyTx = 0;
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <send+0xfc>)
 8000236:	2200      	movs	r2, #0
 8000238:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &temp, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	490d      	ldr	r1, [pc, #52]	; (8000274 <send+0x104>)
 800023e:	480c      	ldr	r0, [pc, #48]	; (8000270 <send+0x100>)
 8000240:	f002 fe41 	bl	8002ec6 <HAL_UART_Transmit_IT>
 8000244:	e004      	b.n	8000250 <send+0xe0>
	} else {
		EmptyTx = idx;
 8000246:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800024a:	b29a      	uxth	r2, r3
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <send+0xf4>)
 800024e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000250:	b662      	cpsie	i
}
 8000252:	bf00      	nop
	}
	__enable_irq();
}
 8000254:	bf00      	nop
 8000256:	37d8      	adds	r7, #216	; 0xd8
 8000258:	46bd      	mov	sp, r7
 800025a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000094 	.word	0x20000094
 8000268:	20000598 	.word	0x20000598
 800026c:	20000096 	.word	0x20000096
 8000270:	20000554 	.word	0x20000554
 8000274:	200004c4 	.word	0x200004c4

08000278 <HAL_UART_TxCpltCallback>:

// ====================== OBSLUGA KOMEND ======================

// ====================== USART CALLBACK NADAWANIE ======================

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a16      	ldr	r2, [pc, #88]	; (80002dc <HAL_UART_TxCpltCallback+0x64>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d125      	bne.n	80002d4 <HAL_UART_TxCpltCallback+0x5c>
		if (BusyTx != EmptyTx) {
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <HAL_UART_TxCpltCallback+0x68>)
 800028a:	881b      	ldrh	r3, [r3, #0]
 800028c:	b29a      	uxth	r2, r3
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <HAL_UART_TxCpltCallback+0x6c>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	b29b      	uxth	r3, r3
 8000294:	429a      	cmp	r2, r3
 8000296:	d01d      	beq.n	80002d4 <HAL_UART_TxCpltCallback+0x5c>
			temp = BUFF_TX[BusyTx];
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <HAL_UART_TxCpltCallback+0x68>)
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	b29b      	uxth	r3, r3
 800029e:	461a      	mov	r2, r3
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <HAL_UART_TxCpltCallback+0x70>)
 80002a2:	5c9b      	ldrb	r3, [r3, r2]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b11      	ldr	r3, [pc, #68]	; (80002ec <HAL_UART_TxCpltCallback+0x74>)
 80002a8:	701a      	strb	r2, [r3, #0]
			BusyTx++;
 80002aa:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <HAL_UART_TxCpltCallback+0x68>)
 80002ac:	881b      	ldrh	r3, [r3, #0]
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	3301      	adds	r3, #1
 80002b2:	b29a      	uxth	r2, r3
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <HAL_UART_TxCpltCallback+0x68>)
 80002b6:	801a      	strh	r2, [r3, #0]
			if (BusyTx >= TX_BUFF_SIZE)
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <HAL_UART_TxCpltCallback+0x68>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	b29b      	uxth	r3, r3
 80002be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002c2:	d302      	bcc.n	80002ca <HAL_UART_TxCpltCallback+0x52>
				BusyTx = 0;
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <HAL_UART_TxCpltCallback+0x68>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &temp, 1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	4907      	ldr	r1, [pc, #28]	; (80002ec <HAL_UART_TxCpltCallback+0x74>)
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <HAL_UART_TxCpltCallback+0x64>)
 80002d0:	f002 fdf9 	bl	8002ec6 <HAL_UART_Transmit_IT>
		}
	}
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000554 	.word	0x20000554
 80002e0:	20000096 	.word	0x20000096
 80002e4:	20000094 	.word	0x20000094
 80002e8:	20000598 	.word	0x20000598
 80002ec:	200004c4 	.word	0x200004c4

080002f0 <HAL_UART_RxCpltCallback>:

// ====================== USART CALLBACK ODBIÓR ======================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a11      	ldr	r2, [pc, #68]	; (8000340 <HAL_UART_RxCpltCallback+0x50>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d10f      	bne.n	8000320 <HAL_UART_RxCpltCallback+0x30>
		EmptyRx++;
 8000300:	4b10      	ldr	r3, [pc, #64]	; (8000344 <HAL_UART_RxCpltCallback+0x54>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	b29b      	uxth	r3, r3
 8000306:	3301      	adds	r3, #1
 8000308:	b29a      	uxth	r2, r3
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <HAL_UART_RxCpltCallback+0x54>)
 800030c:	801a      	strh	r2, [r3, #0]
		if (EmptyRx >= RX_BUFF_SIZE)
 800030e:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <HAL_UART_RxCpltCallback+0x54>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	b29b      	uxth	r3, r3
 8000314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000318:	d302      	bcc.n	8000320 <HAL_UART_RxCpltCallback+0x30>
			EmptyRx = 0;
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <HAL_UART_RxCpltCallback+0x54>)
 800031c:	2200      	movs	r2, #0
 800031e:	801a      	strh	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &BUFF_RX[EmptyRx], 1);
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <HAL_UART_RxCpltCallback+0x54>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	b29b      	uxth	r3, r3
 8000326:	461a      	mov	r2, r3
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <HAL_UART_RxCpltCallback+0x58>)
 800032a:	4413      	add	r3, r2
 800032c:	2201      	movs	r2, #1
 800032e:	4619      	mov	r1, r3
 8000330:	4803      	ldr	r0, [pc, #12]	; (8000340 <HAL_UART_RxCpltCallback+0x50>)
 8000332:	f002 fe0c 	bl	8002f4e <HAL_UART_Receive_IT>
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000554 	.word	0x20000554
 8000344:	20000090 	.word	0x20000090
 8000348:	200000b4 	.word	0x200000b4

0800034c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc1) {
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	dataReady = 1;
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
	dataIndex = 0;
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800035c:	2200      	movs	r2, #0
 800035e:	801a      	strh	r2, [r3, #0]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	2000009a 	.word	0x2000009a
 8000370:	20000098 	.word	0x20000098

08000374 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	dataReady = 1;
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <HAL_ADC_ConvCpltCallback+0x20>)
 800037e:	2201      	movs	r2, #1
 8000380:	701a      	strb	r2, [r3, #0]
	dataIndex = 1023;
 8000382:	4b05      	ldr	r3, [pc, #20]	; (8000398 <HAL_ADC_ConvCpltCallback+0x24>)
 8000384:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000388:	801a      	strh	r2, [r3, #0]
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	2000009a 	.word	0x2000009a
 8000398:	20000098 	.word	0x20000098

0800039c <analyseData>:

void analyseData() {
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
		if (dataIndex == 0) {
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <analyseData+0x74>)
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d114      	bne.n	80003d4 <analyseData+0x38>
			for (i = 0; i < 1023; i++) {
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <analyseData+0x78>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	e009      	b.n	80003c6 <analyseData+0x2a>
				analyseStart(i);
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <analyseData+0x78>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f82e 	bl	8000418 <analyseStart>
			for (i = 0; i < 1023; i++) {
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <analyseData+0x78>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	4a14      	ldr	r2, [pc, #80]	; (8000414 <analyseData+0x78>)
 80003c4:	6013      	str	r3, [r2, #0]
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <analyseData+0x78>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80003ce:	4293      	cmp	r3, r2
 80003d0:	ddef      	ble.n	80003b2 <analyseData+0x16>
		} else if (dataIndex == 1023) {
			for (i = 1023; i < 2048; i++) {
				analyseStart(i);
			}
		}
	}
 80003d2:	e01a      	b.n	800040a <analyseData+0x6e>
		} else if (dataIndex == 1023) {
 80003d4:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <analyseData+0x74>)
 80003d6:	881b      	ldrh	r3, [r3, #0]
 80003d8:	b29b      	uxth	r3, r3
 80003da:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80003de:	4293      	cmp	r3, r2
 80003e0:	d113      	bne.n	800040a <analyseData+0x6e>
			for (i = 1023; i < 2048; i++) {
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <analyseData+0x78>)
 80003e4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	e009      	b.n	8000400 <analyseData+0x64>
				analyseStart(i);
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <analyseData+0x78>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f811 	bl	8000418 <analyseStart>
			for (i = 1023; i < 2048; i++) {
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <analyseData+0x78>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	3301      	adds	r3, #1
 80003fc:	4a05      	ldr	r2, [pc, #20]	; (8000414 <analyseData+0x78>)
 80003fe:	6013      	str	r3, [r2, #0]
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <analyseData+0x78>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000408:	dbf0      	blt.n	80003ec <analyseData+0x50>
	}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000098 	.word	0x20000098
 8000414:	200004f8 	.word	0x200004f8

08000418 <analyseStart>:

	void analyseStart(int i) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
		if (BUFF_DATA[i] >= granica && granica_Passed != 1) { //jak pojawi się sygnał ponad granicę to zaczynam szukac
 8000420:	4a24      	ldr	r2, [pc, #144]	; (80004b4 <analyseStart+0x9c>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000428:	4a23      	ldr	r2, [pc, #140]	; (80004b8 <analyseStart+0xa0>)
 800042a:	8812      	ldrh	r2, [r2, #0]
 800042c:	b292      	uxth	r2, r2
 800042e:	4293      	cmp	r3, r2
 8000430:	d307      	bcc.n	8000442 <analyseStart+0x2a>
 8000432:	4b22      	ldr	r3, [pc, #136]	; (80004bc <analyseStart+0xa4>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b01      	cmp	r3, #1
 800043a:	d002      	beq.n	8000442 <analyseStart+0x2a>
			granica_Passed = 1;
 800043c:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <analyseStart+0xa4>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
		}
		if (granica_Passed) {
 8000442:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <analyseStart+0xa4>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b00      	cmp	r3, #0
 800044a:	d02f      	beq.n	80004ac <analyseStart+0x94>
			pause = 0;
 800044c:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <analyseStart+0xa8>)
 800044e:	2200      	movs	r2, #0
 8000450:	801a      	strh	r2, [r3, #0]
			if (BUFF_DATA[i] <= granica) //czy klask się skończył (ile danych ponizej progu)
 8000452:	4a18      	ldr	r2, [pc, #96]	; (80004b4 <analyseStart+0x9c>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800045a:	4a17      	ldr	r2, [pc, #92]	; (80004b8 <analyseStart+0xa0>)
 800045c:	8812      	ldrh	r2, [r2, #0]
 800045e:	b292      	uxth	r2, r2
 8000460:	4293      	cmp	r3, r2
 8000462:	d807      	bhi.n	8000474 <analyseStart+0x5c>
				count++;
 8000464:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <analyseStart+0xac>)
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	b29b      	uxth	r3, r3
 800046a:	3301      	adds	r3, #1
 800046c:	b29a      	uxth	r2, r3
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <analyseStart+0xac>)
 8000470:	801a      	strh	r2, [r3, #0]
 8000472:	e002      	b.n	800047a <analyseStart+0x62>
			else // jezeli juz nie sa ponizej progu
				count = 0; //zeruje licznik, bo jeszcze sie nie skonczyl klask
 8000474:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <analyseStart+0xac>)
 8000476:	2200      	movs	r2, #0
 8000478:	801a      	strh	r2, [r3, #0]
			if (count > 1000) {
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <analyseStart+0xac>)
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	b29b      	uxth	r3, r3
 8000480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000484:	d912      	bls.n	80004ac <analyseStart+0x94>
				granica_Passed = 0;
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <analyseStart+0xa4>)
 8000488:	2200      	movs	r2, #0
 800048a:	701a      	strb	r2, [r3, #0]

				if (trybPracy == 1) {
 800048c:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <analyseStart+0xb0>)
 800048e:	781b      	ldrb	r3, [r3, #0]
					//send("[%s%s%dPSTRYK1]\r\n",device_address,source_address,Nad542);
				}
				if (trybPracy == 2) {
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <analyseStart+0xb0>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	b2db      	uxtb	r3, r3
 8000496:	2b02      	cmp	r3, #2
 8000498:	d108      	bne.n	80004ac <analyseStart+0x94>
					send("[%s%s%dPSTRYK2]\r\n",device_address,source_address,sumaNadOdb+543);
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <analyseStart+0xb4>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80004a2:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <analyseStart+0xb8>)
 80004a4:	490b      	ldr	r1, [pc, #44]	; (80004d4 <analyseStart+0xbc>)
 80004a6:	480c      	ldr	r0, [pc, #48]	; (80004d8 <analyseStart+0xc0>)
 80004a8:	f7ff fe62 	bl	8000170 <send>
				}
			}

		}
	}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000798 	.word	0x20000798
 80004b8:	20000000 	.word	0x20000000
 80004bc:	2000009b 	.word	0x2000009b
 80004c0:	2000009e 	.word	0x2000009e
 80004c4:	2000009c 	.word	0x2000009c
 80004c8:	20000002 	.word	0x20000002
 80004cc:	200004b4 	.word	0x200004b4
 80004d0:	200004b8 	.word	0x200004b8
 80004d4:	08004320 	.word	0x08004320
 80004d8:	080041d8 	.word	0x080041d8

080004dc <analizaKomendy>:

	void analizaKomendy(char *cmd) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

		if (!strcmp(cmd, "Tryb1")) {
 80004e4:	4942      	ldr	r1, [pc, #264]	; (80005f0 <analizaKomendy+0x114>)
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f7ff fe30 	bl	800014c <strcmp>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d103      	bne.n	80004fa <analizaKomendy+0x1e>
			trybPracy = 1;
 80004f2:	4b40      	ldr	r3, [pc, #256]	; (80005f4 <analizaKomendy+0x118>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
				}
		else {
			errorKomenda();

		}
	}
 80004f8:	e075      	b.n	80005e6 <analizaKomendy+0x10a>
		} else if (!strcmp(cmd, "Tryb2")) {
 80004fa:	493f      	ldr	r1, [pc, #252]	; (80005f8 <analizaKomendy+0x11c>)
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff fe25 	bl	800014c <strcmp>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d103      	bne.n	8000510 <analizaKomendy+0x34>
			trybPracy = 2;
 8000508:	4b3a      	ldr	r3, [pc, #232]	; (80005f4 <analizaKomendy+0x118>)
 800050a:	2202      	movs	r2, #2
 800050c:	701a      	strb	r2, [r3, #0]
	}
 800050e:	e06a      	b.n	80005e6 <analizaKomendy+0x10a>
		} else if (!strcmp(cmd, "PokazTryb")) {
 8000510:	493a      	ldr	r1, [pc, #232]	; (80005fc <analizaKomendy+0x120>)
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f7ff fe1a 	bl	800014c <strcmp>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d10a      	bne.n	8000534 <analizaKomendy+0x58>
			if (trybPracy == 1)
 800051e:	4b35      	ldr	r3, [pc, #212]	; (80005f4 <analizaKomendy+0x118>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b01      	cmp	r3, #1
 8000526:	d102      	bne.n	800052e <analizaKomendy+0x52>
			wyslijTrybPracyJeden();
 8000528:	f000 f944 	bl	80007b4 <wyslijTrybPracyJeden>
	}
 800052c:	e05b      	b.n	80005e6 <analizaKomendy+0x10a>
			wyslijTrybPracyDwa();
 800052e:	f000 f961 	bl	80007f4 <wyslijTrybPracyDwa>
	}
 8000532:	e058      	b.n	80005e6 <analizaKomendy+0x10a>
		else if(!strcmp(cmd, "GRANICA")){
 8000534:	4932      	ldr	r1, [pc, #200]	; (8000600 <analizaKomendy+0x124>)
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f7ff fe08 	bl	800014c <strcmp>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d138      	bne.n	80005b4 <analizaKomendy+0xd8>
			int granicaKopia = granica;
 8000542:	4b30      	ldr	r3, [pc, #192]	; (8000604 <analizaKomendy+0x128>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	b29b      	uxth	r3, r3
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
			int sumaGranicaTablica = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	623b      	str	r3, [r7, #32]
			for (int j = 3; j>=0; j--){
 800054e:	2303      	movs	r3, #3
 8000550:	61fb      	str	r3, [r7, #28]
 8000552:	e028      	b.n	80005a6 <analizaKomendy+0xca>
				granicaTablica[j] = granicaKopia % 10;
 8000554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000556:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <analizaKomendy+0x12c>)
 8000558:	fb83 2301 	smull	r2, r3, r3, r1
 800055c:	109a      	asrs	r2, r3, #2
 800055e:	17cb      	asrs	r3, r1, #31
 8000560:	1ad2      	subs	r2, r2, r3
 8000562:	4613      	mov	r3, r2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	4413      	add	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	1aca      	subs	r2, r1, r3
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000574:	440b      	add	r3, r1
 8000576:	f843 2c1c 	str.w	r2, [r3, #-28]
				sumaGranicaTablica += granicaTablica[j] + 48;
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000582:	4413      	add	r3, r2
 8000584:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000588:	3330      	adds	r3, #48	; 0x30
 800058a:	6a3a      	ldr	r2, [r7, #32]
 800058c:	4413      	add	r3, r2
 800058e:	623b      	str	r3, [r7, #32]
						granicaKopia/=10;
 8000590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000592:	4a1d      	ldr	r2, [pc, #116]	; (8000608 <analizaKomendy+0x12c>)
 8000594:	fb82 1203 	smull	r1, r2, r2, r3
 8000598:	1092      	asrs	r2, r2, #2
 800059a:	17db      	asrs	r3, r3, #31
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	627b      	str	r3, [r7, #36]	; 0x24
			for (int j = 3; j>=0; j--){
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	61fb      	str	r3, [r7, #28]
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	dad3      	bge.n	8000554 <analizaKomendy+0x78>
			wyslijGranica(sumaGranicaTablica);
 80005ac:	6a38      	ldr	r0, [r7, #32]
 80005ae:	f000 f941 	bl	8000834 <wyslijGranica>
	}
 80005b2:	e018      	b.n	80005e6 <analizaKomendy+0x10a>
		else if(!strncmp(cmd, "SETGRANICA", 9)) {
 80005b4:	2209      	movs	r2, #9
 80005b6:	4915      	ldr	r1, [pc, #84]	; (800060c <analizaKomendy+0x130>)
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f003 f933 	bl	8003824 <strncmp>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d10e      	bne.n	80005e2 <analizaKomendy+0x106>
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <analizaKomendy+0x134>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	461a      	mov	r2, r3
					memcpy(odebranaGranica, &buforRamki[20], 4);
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <analizaKomendy+0x138>)
 80005cc:	601a      	str	r2, [r3, #0]
					granica = atoi(odebranaGranica);
 80005ce:	4811      	ldr	r0, [pc, #68]	; (8000614 <analizaKomendy+0x138>)
 80005d0:	f003 f8c4 	bl	800375c <atoi>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <analizaKomendy+0x128>)
 80005da:	801a      	strh	r2, [r3, #0]
					wyslijSetGranica();
 80005dc:	f000 f958 	bl	8000890 <wyslijSetGranica>
	}
 80005e0:	e001      	b.n	80005e6 <analizaKomendy+0x10a>
			errorKomenda();
 80005e2:	f000 f887 	bl	80006f4 <errorKomenda>
	}
 80005e6:	bf00      	nop
 80005e8:	3728      	adds	r7, #40	; 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	080041ec 	.word	0x080041ec
 80005f4:	20000002 	.word	0x20000002
 80005f8:	080041f4 	.word	0x080041f4
 80005fc:	080041fc 	.word	0x080041fc
 8000600:	08004208 	.word	0x08004208
 8000604:	20000000 	.word	0x20000000
 8000608:	66666667 	.word	0x66666667
 800060c:	08004210 	.word	0x08004210
 8000610:	200002b4 	.word	0x200002b4
 8000614:	2000054c 	.word	0x2000054c

08000618 <dekoduj>:

	void dekoduj() {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
		if (znak == '1') {
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <dekoduj+0x8c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b31      	cmp	r3, #49	; 0x31
 8000622:	d10f      	bne.n	8000644 <dekoduj+0x2c>
			buforRamki[dlugoscRamki] = '[';
 8000624:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <dekoduj+0x90>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <dekoduj+0x94>)
 800062c:	215b      	movs	r1, #91	; 0x5b
 800062e:	5499      	strb	r1, [r3, r2]
			dlugoscRamki++;
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <dekoduj+0x90>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <dekoduj+0x90>)
 800063a:	801a      	strh	r2, [r3, #0]
			stan = 1;
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <dekoduj+0x98>)
 800063e:	2201      	movs	r2, #1
 8000640:	801a      	strh	r2, [r3, #0]
		} else {
			stan = 0;
			errorKodowanie();
		}

	}
 8000642:	e02c      	b.n	800069e <dekoduj+0x86>
		} else if (znak == '2') {
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <dekoduj+0x8c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b32      	cmp	r3, #50	; 0x32
 800064a:	d10f      	bne.n	800066c <dekoduj+0x54>
			buforRamki[dlugoscRamki] = ']';
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <dekoduj+0x90>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <dekoduj+0x94>)
 8000654:	215d      	movs	r1, #93	; 0x5d
 8000656:	5499      	strb	r1, [r3, r2]
			dlugoscRamki++;
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <dekoduj+0x90>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b29a      	uxth	r2, r3
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <dekoduj+0x90>)
 8000662:	801a      	strh	r2, [r3, #0]
			stan = 1;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <dekoduj+0x98>)
 8000666:	2201      	movs	r2, #1
 8000668:	801a      	strh	r2, [r3, #0]
	}
 800066a:	e018      	b.n	800069e <dekoduj+0x86>
		} else if (znak == '3') {
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <dekoduj+0x8c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b33      	cmp	r3, #51	; 0x33
 8000672:	d10f      	bne.n	8000694 <dekoduj+0x7c>
			buforRamki[dlugoscRamki] = '$';
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <dekoduj+0x90>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <dekoduj+0x94>)
 800067c:	2124      	movs	r1, #36	; 0x24
 800067e:	5499      	strb	r1, [r3, r2]
			dlugoscRamki++;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <dekoduj+0x90>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <dekoduj+0x90>)
 800068a:	801a      	strh	r2, [r3, #0]
			stan = 1;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <dekoduj+0x98>)
 800068e:	2201      	movs	r2, #1
 8000690:	801a      	strh	r2, [r3, #0]
	}
 8000692:	e004      	b.n	800069e <dekoduj+0x86>
			stan = 0;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <dekoduj+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	801a      	strh	r2, [r3, #0]
			errorKodowanie();
 800069a:	f000 f84b 	bl	8000734 <errorKodowanie>
	}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000540 	.word	0x20000540
 80006a8:	200000a4 	.word	0x200000a4
 80006ac:	200002b4 	.word	0x200002b4
 80006b0:	200000a0 	.word	0x200000a0

080006b4 <errorSumaKontrolna>:

	void errorSumaKontrolna() {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80006ba:	af02      	add	r7, sp, #8
		char wiadomosc[RX_BUFF_SIZE];
		sprintf(wiadomosc, "[%s%s%dNieprawidlowaSumaKontrolna]\r\n",device_address,source_address,sumaNadOdb+2724);
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <errorSumaKontrolna+0x30>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f603 23a4 	addw	r3, r3, #2724	; 0xaa4
 80006c4:	4638      	mov	r0, r7
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <errorSumaKontrolna+0x34>)
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <errorSumaKontrolna+0x38>)
 80006cc:	4908      	ldr	r1, [pc, #32]	; (80006f0 <errorSumaKontrolna+0x3c>)
 80006ce:	f003 f889 	bl	80037e4 <siprintf>
		send(wiadomosc);
 80006d2:	463b      	mov	r3, r7
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fd4b 	bl	8000170 <send>
	}
 80006da:	bf00      	nop
 80006dc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200004b4 	.word	0x200004b4
 80006e8:	200004b8 	.word	0x200004b8
 80006ec:	08004320 	.word	0x08004320
 80006f0:	0800421c 	.word	0x0800421c

080006f4 <errorKomenda>:
	void errorKomenda(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80006fa:	af02      	add	r7, sp, #8
		char wiadomosc[RX_BUFF_SIZE];
		sprintf(wiadomosc,"[%s%s%dNiepoprawnaKomenda]\r\n",device_address,source_address,sumaNadOdb+1859);
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <errorKomenda+0x30>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f203 7343 	addw	r3, r3, #1859	; 0x743
 8000704:	4638      	mov	r0, r7
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <errorKomenda+0x34>)
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <errorKomenda+0x38>)
 800070c:	4908      	ldr	r1, [pc, #32]	; (8000730 <errorKomenda+0x3c>)
 800070e:	f003 f869 	bl	80037e4 <siprintf>
		send(wiadomosc);
 8000712:	463b      	mov	r3, r7
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd2b 	bl	8000170 <send>
	}
 800071a:	bf00      	nop
 800071c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200004b4 	.word	0x200004b4
 8000728:	200004b8 	.word	0x200004b8
 800072c:	08004320 	.word	0x08004320
 8000730:	08004244 	.word	0x08004244

08000734 <errorKodowanie>:
	void errorKodowanie()
	{
 8000734:	b580      	push	{r7, lr}
 8000736:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800073a:	af02      	add	r7, sp, #8
		char wiadomosc[RX_BUFF_SIZE];
		sprintf(wiadomosc,"[%s%s%dBladKodowania]\r\n",device_address,source_address,sumaNadOdb+1296);
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <errorKodowanie+0x30>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8000744:	4638      	mov	r0, r7
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <errorKodowanie+0x34>)
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <errorKodowanie+0x38>)
 800074c:	4908      	ldr	r1, [pc, #32]	; (8000770 <errorKodowanie+0x3c>)
 800074e:	f003 f849 	bl	80037e4 <siprintf>
		send(wiadomosc);
 8000752:	463b      	mov	r3, r7
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fd0b 	bl	8000170 <send>
	}
 800075a:	bf00      	nop
 800075c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200004b4 	.word	0x200004b4
 8000768:	200004b8 	.word	0x200004b8
 800076c:	08004320 	.word	0x08004320
 8000770:	08004264 	.word	0x08004264

08000774 <odebranoRamke>:
	void odebranoRamke(){
 8000774:	b580      	push	{r7, lr}
 8000776:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800077a:	af02      	add	r7, sp, #8
		char wiadomosc[RX_BUFF_SIZE];
		sprintf(wiadomosc,"[%s%s%dOdebranoRamke]\r\n",device_address,source_address,sumaNadOdb+1306);
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <odebranoRamke+0x30>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f203 531a 	addw	r3, r3, #1306	; 0x51a
 8000784:	4638      	mov	r0, r7
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <odebranoRamke+0x34>)
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <odebranoRamke+0x38>)
 800078c:	4908      	ldr	r1, [pc, #32]	; (80007b0 <odebranoRamke+0x3c>)
 800078e:	f003 f829 	bl	80037e4 <siprintf>
		send(wiadomosc);
 8000792:	463b      	mov	r3, r7
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fceb 	bl	8000170 <send>
	}
 800079a:	bf00      	nop
 800079c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200004b4 	.word	0x200004b4
 80007a8:	200004b8 	.word	0x200004b8
 80007ac:	08004320 	.word	0x08004320
 80007b0:	0800427c 	.word	0x0800427c

080007b4 <wyslijTrybPracyJeden>:
	void wyslijTrybPracyJeden(){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80007ba:	af02      	add	r7, sp, #8
		char wiadomosc[RX_BUFF_SIZE];
		sprintf(wiadomosc,"[%s%s%dTryb1PSTRYK]\r\n",device_address,source_address,sumaNadOdb+959);
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <wyslijTrybPracyJeden+0x30>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f203 33bf 	addw	r3, r3, #959	; 0x3bf
 80007c4:	4638      	mov	r0, r7
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <wyslijTrybPracyJeden+0x34>)
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <wyslijTrybPracyJeden+0x38>)
 80007cc:	4908      	ldr	r1, [pc, #32]	; (80007f0 <wyslijTrybPracyJeden+0x3c>)
 80007ce:	f003 f809 	bl	80037e4 <siprintf>
		send(wiadomosc);
 80007d2:	463b      	mov	r3, r7
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fccb 	bl	8000170 <send>
	}
 80007da:	bf00      	nop
 80007dc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200004b4 	.word	0x200004b4
 80007e8:	200004b8 	.word	0x200004b8
 80007ec:	08004320 	.word	0x08004320
 80007f0:	08004294 	.word	0x08004294

080007f4 <wyslijTrybPracyDwa>:
	void wyslijTrybPracyDwa()
	{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80007fa:	af02      	add	r7, sp, #8
		char wiadomosc[RX_BUFF_SIZE];
		sprintf(wiadomosc,"[%s%s%dTryb2PSTRYK]\r\n",device_address,source_address,sumaNadOdb+960);
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <wyslijTrybPracyDwa+0x30>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8000804:	4638      	mov	r0, r7
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <wyslijTrybPracyDwa+0x34>)
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <wyslijTrybPracyDwa+0x38>)
 800080c:	4908      	ldr	r1, [pc, #32]	; (8000830 <wyslijTrybPracyDwa+0x3c>)
 800080e:	f002 ffe9 	bl	80037e4 <siprintf>
		send(wiadomosc);
 8000812:	463b      	mov	r3, r7
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fcab 	bl	8000170 <send>
	}
 800081a:	bf00      	nop
 800081c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200004b4 	.word	0x200004b4
 8000828:	200004b8 	.word	0x200004b8
 800082c:	08004320 	.word	0x08004320
 8000830:	080042ac 	.word	0x080042ac

08000834 <wyslijGranica>:
	void wyslijGranica(int sumaGranicaTablica)
	{	char wiadomosc[RX_BUFF_SIZE];
 8000834:	b580      	push	{r7, lr}
 8000836:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800083a:	af02      	add	r7, sp, #8
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	6018      	str	r0, [r3, #0]
	sprintf(wiadomosc,"[%s%s%dGRANICA:%d]\r\n",device_address,source_address,sumaNadOdb+sumaGranicaTablica+559,granica);
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <wyslijGranica+0x48>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4413      	add	r3, r2
 800084a:	f203 232f 	addw	r3, r3, #559	; 0x22f
 800084e:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <wyslijGranica+0x4c>)
 8000850:	8812      	ldrh	r2, [r2, #0]
 8000852:	b292      	uxth	r2, r2
 8000854:	f107 0008 	add.w	r0, r7, #8
 8000858:	9201      	str	r2, [sp, #4]
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <wyslijGranica+0x50>)
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <wyslijGranica+0x54>)
 8000860:	490a      	ldr	r1, [pc, #40]	; (800088c <wyslijGranica+0x58>)
 8000862:	f002 ffbf 	bl	80037e4 <siprintf>
	send(wiadomosc);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fc80 	bl	8000170 <send>
	}
 8000870:	bf00      	nop
 8000872:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200004b4 	.word	0x200004b4
 8000880:	20000000 	.word	0x20000000
 8000884:	200004b8 	.word	0x200004b8
 8000888:	08004320 	.word	0x08004320
 800088c:	080042c4 	.word	0x080042c4

08000890 <wyslijSetGranica>:
	void wyslijSetGranica(){
 8000890:	b580      	push	{r7, lr}
 8000892:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000896:	af00      	add	r7, sp, #0
		char wiadomosc[RX_BUFF_SIZE];
			//sprintf(wiadomosc,"[%s%s%dGRANICA:%d]\r\n",device_address,source_address,sumaNadOdb+sumaGranicaTablica+559,granica);
			send(wiadomosc);
 8000898:	463b      	mov	r3, r7
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fc68 	bl	8000170 <send>
		send("Nowa granica wynosi: %d",granica);
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <wyslijSetGranica+0x28>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	4619      	mov	r1, r3
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <wyslijSetGranica+0x2c>)
 80008aa:	f7ff fc61 	bl	8000170 <send>
	}
 80008ae:	bf00      	nop
 80008b0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	080042dc 	.word	0x080042dc

080008c0 <main>:

	/**
	 * @brief  The application entry point.
	 * @retval int
	 */
	int main(void) {
 80008c0:	b5b0      	push	{r4, r5, r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
		/* USER CODE END 1 */

		/* MCU Configuration--------------------------------------------------------*/

		/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
		HAL_Init();
 80008c6:	f000 fc5b 	bl	8001180 <HAL_Init>
		/* USER CODE BEGIN Init */

		/* USER CODE END Init */

		/* Configure the system clock */
		SystemClock_Config();
 80008ca:	f000 f983 	bl	8000bd4 <SystemClock_Config>
		/* USER CODE BEGIN SysInit */

		/* USER CODE END SysInit */

		/* Initialize all configured peripherals */
		MX_GPIO_Init();
 80008ce:	f000 fa5d 	bl	8000d8c <MX_GPIO_Init>
		MX_USART2_UART_Init();
 80008d2:	f000 fa13 	bl	8000cfc <MX_USART2_UART_Init>
		MX_DMA_Init();
 80008d6:	f000 fa3b 	bl	8000d50 <MX_DMA_Init>
		MX_ADC1_Init();
 80008da:	f000 f9d1 	bl	8000c80 <MX_ADC1_Init>
		/* USER CODE BEGIN 2 */
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) BUFF_DATA, 2048);
 80008de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008e2:	49a4      	ldr	r1, [pc, #656]	; (8000b74 <main+0x2b4>)
 80008e4:	48a4      	ldr	r0, [pc, #656]	; (8000b78 <main+0x2b8>)
 80008e6:	f000 fd85 	bl	80013f4 <HAL_ADC_Start_DMA>
		HAL_UART_Receive_IT(&huart2, &BUFF_RX[EmptyRx], 1);
 80008ea:	4ba4      	ldr	r3, [pc, #656]	; (8000b7c <main+0x2bc>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	4ba3      	ldr	r3, [pc, #652]	; (8000b80 <main+0x2c0>)
 80008f4:	4413      	add	r3, r2
 80008f6:	2201      	movs	r2, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	48a2      	ldr	r0, [pc, #648]	; (8000b84 <main+0x2c4>)
 80008fc:	f002 fb27 	bl	8002f4e <HAL_UART_Receive_IT>
		send("[%s%s%dRozpoczynamPrace!]\r\n",device_address,source_address,sumaNadOdb+1720);
 8000900:	4ba1      	ldr	r3, [pc, #644]	; (8000b88 <main+0x2c8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8000908:	4aa0      	ldr	r2, [pc, #640]	; (8000b8c <main+0x2cc>)
 800090a:	49a1      	ldr	r1, [pc, #644]	; (8000b90 <main+0x2d0>)
 800090c:	48a1      	ldr	r0, [pc, #644]	; (8000b94 <main+0x2d4>)
 800090e:	f7ff fc2f 	bl	8000170 <send>
		/* USER CODE END 2 */

		/* Infinite loop */
		/* USER CODE BEGIN WHILE */
		while (1) {
			if (dataReady) {
 8000912:	4ba1      	ldr	r3, [pc, #644]	; (8000b98 <main+0x2d8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d004      	beq.n	8000926 <main+0x66>
				dataReady = 0;
 800091c:	4b9e      	ldr	r3, [pc, #632]	; (8000b98 <main+0x2d8>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
				analyseData();
 8000922:	f7ff fd3b 	bl	800039c <analyseData>
			}

			if (BusyRx != EmptyRx) {
 8000926:	4b9d      	ldr	r3, [pc, #628]	; (8000b9c <main+0x2dc>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b93      	ldr	r3, [pc, #588]	; (8000b7c <main+0x2bc>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	b29b      	uxth	r3, r3
 8000932:	429a      	cmp	r2, r3
 8000934:	d0ed      	beq.n	8000912 <main+0x52>
				znak = BUFF_RX[BusyRx];//Przepisanie z bufora
 8000936:	4b99      	ldr	r3, [pc, #612]	; (8000b9c <main+0x2dc>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	4b90      	ldr	r3, [pc, #576]	; (8000b80 <main+0x2c0>)
 8000940:	5c9b      	ldrb	r3, [r3, r2]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b96      	ldr	r3, [pc, #600]	; (8000ba0 <main+0x2e0>)
 8000946:	701a      	strb	r2, [r3, #0]
				BusyRx++;
 8000948:	4b94      	ldr	r3, [pc, #592]	; (8000b9c <main+0x2dc>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	b29b      	uxth	r3, r3
 800094e:	3301      	adds	r3, #1
 8000950:	b29a      	uxth	r2, r3
 8000952:	4b92      	ldr	r3, [pc, #584]	; (8000b9c <main+0x2dc>)
 8000954:	801a      	strh	r2, [r3, #0]
				if (BusyRx >= RX_BUFF_SIZE) BusyRx = 0;
 8000956:	4b91      	ldr	r3, [pc, #580]	; (8000b9c <main+0x2dc>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	b29b      	uxth	r3, r3
 800095c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000960:	d302      	bcc.n	8000968 <main+0xa8>
 8000962:	4b8e      	ldr	r3, [pc, #568]	; (8000b9c <main+0x2dc>)
 8000964:	2200      	movs	r2, #0
 8000966:	801a      	strh	r2, [r3, #0]
				if (znak == '[')
 8000968:	4b8d      	ldr	r3, [pc, #564]	; (8000ba0 <main+0x2e0>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b5b      	cmp	r3, #91	; 0x5b
 800096e:	d106      	bne.n	800097e <main+0xbe>
					{
					stan = 1;
 8000970:	4b8c      	ldr	r3, [pc, #560]	; (8000ba4 <main+0x2e4>)
 8000972:	2201      	movs	r2, #1
 8000974:	801a      	strh	r2, [r3, #0]
					dlugoscRamki = 0;
 8000976:	4b8c      	ldr	r3, [pc, #560]	; (8000ba8 <main+0x2e8>)
 8000978:	2200      	movs	r2, #0
 800097a:	801a      	strh	r2, [r3, #0]
 800097c:	e7c9      	b.n	8000912 <main+0x52>
					}
				else if (stan == 1) // stan 1 - odnaleziono początek ramki
 800097e:	4b89      	ldr	r3, [pc, #548]	; (8000ba4 <main+0x2e4>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	2b01      	cmp	r3, #1
 8000984:	f040 80ed 	bne.w	8000b62 <main+0x2a2>
					{

					if (znak == '!') stan = 2; //stan 2 - znak wymaga odkodowania
 8000988:	4b85      	ldr	r3, [pc, #532]	; (8000ba0 <main+0x2e0>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b21      	cmp	r3, #33	; 0x21
 800098e:	d103      	bne.n	8000998 <main+0xd8>
 8000990:	4b84      	ldr	r3, [pc, #528]	; (8000ba4 <main+0x2e4>)
 8000992:	2202      	movs	r2, #2
 8000994:	801a      	strh	r2, [r3, #0]
 8000996:	e7bc      	b.n	8000912 <main+0x52>
					 else if (znak == ']')
 8000998:	4b81      	ldr	r3, [pc, #516]	; (8000ba0 <main+0x2e0>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b5d      	cmp	r3, #93	; 0x5d
 800099e:	f040 80c7 	bne.w	8000b30 <main+0x270>
					{
						buforRamki[dlugoscRamki] = '\0';
 80009a2:	4b81      	ldr	r3, [pc, #516]	; (8000ba8 <main+0x2e8>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b80      	ldr	r3, [pc, #512]	; (8000bac <main+0x2ec>)
 80009aa:	2100      	movs	r1, #0
 80009ac:	5499      	strb	r1, [r3, r2]

						if (dlugoscRamki >= 10) // podano więcej znaków, niż minimalna ilość znaków w ramce
 80009ae:	4b7e      	ldr	r3, [pc, #504]	; (8000ba8 <main+0x2e8>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	2b09      	cmp	r3, #9
 80009b4:	f240 80b5 	bls.w	8000b22 <main+0x262>
							{

							memcpy(source_address, &buforRamki[0], 3);
 80009b8:	2203      	movs	r2, #3
 80009ba:	497c      	ldr	r1, [pc, #496]	; (8000bac <main+0x2ec>)
 80009bc:	4873      	ldr	r0, [pc, #460]	; (8000b8c <main+0x2cc>)
 80009be:	f002 fefb 	bl	80037b8 <memcpy>
							memcpy(destination_address, &buforRamki[3], 3);
 80009c2:	2203      	movs	r2, #3
 80009c4:	497a      	ldr	r1, [pc, #488]	; (8000bb0 <main+0x2f0>)
 80009c6:	487b      	ldr	r0, [pc, #492]	; (8000bb4 <main+0x2f4>)
 80009c8:	f002 fef6 	bl	80037b8 <memcpy>
 80009cc:	4b77      	ldr	r3, [pc, #476]	; (8000bac <main+0x2ec>)
 80009ce:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80009d2:	461a      	mov	r2, r3
							memcpy(suma_kontrolna, &buforRamki[6], 4);
 80009d4:	4b78      	ldr	r3, [pc, #480]	; (8000bb8 <main+0x2f8>)
 80009d6:	601a      	str	r2, [r3, #0]

							source_address[3] = '\0';
 80009d8:	4b6c      	ldr	r3, [pc, #432]	; (8000b8c <main+0x2cc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	70da      	strb	r2, [r3, #3]
							destination_address[3] = '\0';
 80009de:	4b75      	ldr	r3, [pc, #468]	; (8000bb4 <main+0x2f4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	70da      	strb	r2, [r3, #3]
							suma_kontrolna[4] = '\0';
 80009e4:	4b74      	ldr	r3, [pc, #464]	; (8000bb8 <main+0x2f8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	711a      	strb	r2, [r3, #4]

							int podana_suma_kontrolna = atoi(suma_kontrolna);
 80009ea:	4873      	ldr	r0, [pc, #460]	; (8000bb8 <main+0x2f8>)
 80009ec:	f002 feb6 	bl	800375c <atoi>
 80009f0:	60b8      	str	r0, [r7, #8]

							cmdLength = dlugoscRamki - 10;
 80009f2:	4b6d      	ldr	r3, [pc, #436]	; (8000ba8 <main+0x2e8>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	3b0a      	subs	r3, #10
 80009f8:	4a70      	ldr	r2, [pc, #448]	; (8000bbc <main+0x2fc>)
 80009fa:	6013      	str	r3, [r2, #0]
							if (strncmp(device_address, destination_address, 3) == 0) //jesli poprawny odbiorca
 80009fc:	2203      	movs	r2, #3
 80009fe:	496d      	ldr	r1, [pc, #436]	; (8000bb4 <main+0x2f4>)
 8000a00:	4863      	ldr	r0, [pc, #396]	; (8000b90 <main+0x2d0>)
 8000a02:	f002 ff0f 	bl	8003824 <strncmp>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f040 808a 	bne.w	8000b22 <main+0x262>
									{
 8000a0e:	466b      	mov	r3, sp
 8000a10:	461d      	mov	r5, r3

									char cmd[cmdLength + 1];
 8000a12:	4b6a      	ldr	r3, [pc, #424]	; (8000bbc <main+0x2fc>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	1c5c      	adds	r4, r3, #1
 8000a18:	1e63      	subs	r3, r4, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4623      	mov	r3, r4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f04f 0100 	mov.w	r1, #0
 8000a24:	f04f 0200 	mov.w	r2, #0
 8000a28:	f04f 0300 	mov.w	r3, #0
 8000a2c:	00cb      	lsls	r3, r1, #3
 8000a2e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a32:	00c2      	lsls	r2, r0, #3
 8000a34:	4623      	mov	r3, r4
 8000a36:	4618      	mov	r0, r3
 8000a38:	f04f 0100 	mov.w	r1, #0
 8000a3c:	f04f 0200 	mov.w	r2, #0
 8000a40:	f04f 0300 	mov.w	r3, #0
 8000a44:	00cb      	lsls	r3, r1, #3
 8000a46:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a4a:	00c2      	lsls	r2, r0, #3
 8000a4c:	4623      	mov	r3, r4
 8000a4e:	3307      	adds	r3, #7
 8000a50:	08db      	lsrs	r3, r3, #3
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	ebad 0d03 	sub.w	sp, sp, r3
 8000a58:	466b      	mov	r3, sp
 8000a5a:	3300      	adds	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
									memcpy(cmd, &buforRamki[10], cmdLength);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	4a56      	ldr	r2, [pc, #344]	; (8000bbc <main+0x2fc>)
 8000a62:	6812      	ldr	r2, [r2, #0]
 8000a64:	4956      	ldr	r1, [pc, #344]	; (8000bc0 <main+0x300>)
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fea6 	bl	80037b8 <memcpy>
									cmd[cmdLength] = '\0';
 8000a6c:	4b53      	ldr	r3, [pc, #332]	; (8000bbc <main+0x2fc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	2100      	movs	r1, #0
 8000a74:	54d1      	strb	r1, [r2, r3]

									for (int i = 0; i < 3; i++) suma_wyliczona +=(int) source_address[i];
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	e00d      	b.n	8000a98 <main+0x1d8>
 8000a7c:	4a43      	ldr	r2, [pc, #268]	; (8000b8c <main+0x2cc>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4413      	add	r3, r2
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	4b4f      	ldr	r3, [pc, #316]	; (8000bc4 <main+0x304>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <main+0x304>)
 8000a90:	801a      	strh	r2, [r3, #0]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	3301      	adds	r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	ddee      	ble.n	8000a7c <main+0x1bc>
									for (int i = 0; i < 3; i++) suma_wyliczona +=(int) destination_address[i];
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	e00d      	b.n	8000ac0 <main+0x200>
 8000aa4:	4a43      	ldr	r2, [pc, #268]	; (8000bb4 <main+0x2f4>)
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	4b45      	ldr	r3, [pc, #276]	; (8000bc4 <main+0x304>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b43      	ldr	r3, [pc, #268]	; (8000bc4 <main+0x304>)
 8000ab8:	801a      	strh	r2, [r3, #0]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	3301      	adds	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	ddee      	ble.n	8000aa4 <main+0x1e4>
									sumaNadOdb = suma_wyliczona;// suma z nadawcy + odbiorcy
 8000ac6:	4b3f      	ldr	r3, [pc, #252]	; (8000bc4 <main+0x304>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <main+0x2c8>)
 8000ace:	601a      	str	r2, [r3, #0]
									for (int i = 0; i <= cmdLength; i++) suma_wyliczona += (int) cmd[i];
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e00d      	b.n	8000af2 <main+0x232>
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	4413      	add	r3, r2
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <main+0x304>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <main+0x304>)
 8000aea:	801a      	strh	r2, [r3, #0]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	3301      	adds	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <main+0x2fc>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	ddec      	ble.n	8000ad6 <main+0x216>

									if (podana_suma_kontrolna == suma_wyliczona) // jeżeli komenda została przysłana
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <main+0x304>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d106      	bne.n	8000b16 <main+0x256>
											{
										odebranoRamke();
 8000b08:	f7ff fe34 	bl	8000774 <odebranoRamke>
										analizaKomendy(cmd);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fce4 	bl	80004dc <analizaKomendy>
 8000b14:	e001      	b.n	8000b1a <main+0x25a>
									} else {
										 errorSumaKontrolna();
 8000b16:	f7ff fdcd 	bl	80006b4 <errorSumaKontrolna>
									}

									suma_wyliczona = 0;
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <main+0x304>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	801a      	strh	r2, [r3, #0]
 8000b20:	46ad      	mov	sp, r5

							}
						}

						stan = 0;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <main+0x2e4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	801a      	strh	r2, [r3, #0]
						dlugoscRamki = 0;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <main+0x2e8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	801a      	strh	r2, [r3, #0]
 8000b2e:	e6f0      	b.n	8000912 <main+0x52>
					}
					 else
					{
						buforRamki[dlugoscRamki] = znak; // zapisuje znak do bufora ramki
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <main+0x2e8>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <main+0x2e0>)
 8000b38:	7819      	ldrb	r1, [r3, #0]
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <main+0x2ec>)
 8000b3c:	5499      	strb	r1, [r3, r2]
						dlugoscRamki++;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <main+0x2e8>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <main+0x2e8>)
 8000b48:	801a      	strh	r2, [r3, #0]
						if (dlugoscRamki > (62)) {
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <main+0x2e8>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	2b3e      	cmp	r3, #62	; 0x3e
 8000b50:	f67f aedf 	bls.w	8000912 <main+0x52>
							dlugoscRamki = 0;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <main+0x2e8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	801a      	strh	r2, [r3, #0]
							stan = 0; //stan - 0 - stan poszukiwania nowego znaku rozpoczecia ramki '['
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <main+0x2e4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	801a      	strh	r2, [r3, #0]
							break;
 8000b60:	e032      	b.n	8000bc8 <main+0x308>
						}
					}
				} else if (stan == 2)
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <main+0x2e4>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	f47f aed3 	bne.w	8000912 <main+0x52>
				{
					dekoduj();
 8000b6c:	f7ff fd54 	bl	8000618 <dekoduj>
			if (dataReady) {
 8000b70:	e6cf      	b.n	8000912 <main+0x52>
 8000b72:	bf00      	nop
 8000b74:	20000798 	.word	0x20000798
 8000b78:	200004c8 	.word	0x200004c8
 8000b7c:	20000090 	.word	0x20000090
 8000b80:	200000b4 	.word	0x200000b4
 8000b84:	20000554 	.word	0x20000554
 8000b88:	200004b4 	.word	0x200004b4
 8000b8c:	200004b8 	.word	0x200004b8
 8000b90:	08004320 	.word	0x08004320
 8000b94:	080042f4 	.word	0x080042f4
 8000b98:	2000009a 	.word	0x2000009a
 8000b9c:	20000092 	.word	0x20000092
 8000ba0:	20000540 	.word	0x20000540
 8000ba4:	200000a0 	.word	0x200000a0
 8000ba8:	200000a4 	.word	0x200000a4
 8000bac:	200002b4 	.word	0x200002b4
 8000bb0:	200002b7 	.word	0x200002b7
 8000bb4:	200004bc 	.word	0x200004bc
 8000bb8:	20000544 	.word	0x20000544
 8000bbc:	200004c0 	.word	0x200004c0
 8000bc0:	200002be 	.word	0x200002be
 8000bc4:	200000a2 	.word	0x200000a2
 8000bc8:	2300      	movs	r3, #0
			/* USER CODE BEGIN 3 */

		}

		/* USER CODE END 3 */
	}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd2:	bf00      	nop

08000bd4 <SystemClock_Config>:

	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b094      	sub	sp, #80	; 0x50
 8000bd8:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bde:	2228      	movs	r2, #40	; 0x28
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 fdf6 	bl	80037d4 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
		RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c04:	2302      	movs	r3, #2
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
		RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	63bb      	str	r3, [r7, #56]	; 0x38
		RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c10:	2302      	movs	r3, #2
 8000c12:	647b      	str	r3, [r7, #68]	; 0x44
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c14:	2300      	movs	r3, #0
 8000c16:	64bb      	str	r3, [r7, #72]	; 0x48
		RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fc33 	bl	800248c <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x5c>
			Error_Handler();
 8000c2c:	f000 f91c 	bl	8000e68 <Error_Handler>
		}
		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c30:	230f      	movs	r3, #15
 8000c32:	617b      	str	r3, [r7, #20]
				| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61bb      	str	r3, [r7, #24]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c40:	623b      	str	r3, [r7, #32]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0)
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 fe9d 	bl	800298c <HAL_RCC_ClockConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x88>
				!= HAL_OK) {
			Error_Handler();
 8000c58:	f000 f906 	bl	8000e68 <Error_Handler>
		}
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	607b      	str	r3, [r7, #4]
		PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 f82a 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xa2>
			Error_Handler();
 8000c72:	f000 f8f9 	bl	8000e68 <Error_Handler>
		}
	}
 8000c76:	bf00      	nop
 8000c78:	3750      	adds	r7, #80	; 0x50
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <MX_ADC1_Init>:
	/**
	 * @brief ADC1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_ADC1_Init(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN ADC1_Init 0 */

		/* USER CODE END ADC1_Init 0 */

		ADC_ChannelConfTypeDef sConfig = { 0 };
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
		/* USER CODE BEGIN ADC1_Init 1 */

		/* USER CODE END ADC1_Init 1 */
		/** Common config
		 */
		hadc1.Instance = ADC1;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_ADC1_Init+0x74>)
 8000c92:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <MX_ADC1_Init+0x78>)
 8000c94:	601a      	str	r2, [r3, #0]
		hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_ADC1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
		hadc1.Init.ContinuousConvMode = ENABLE;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_ADC1_Init+0x74>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	731a      	strb	r2, [r3, #12]
		hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_ADC1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	751a      	strb	r2, [r3, #20]
		hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_ADC1_Init+0x74>)
 8000caa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cae:	61da      	str	r2, [r3, #28]
		hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_ADC1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
		hadc1.Init.NbrOfConversion = 1;
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_ADC1_Init+0x74>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	611a      	str	r2, [r3, #16]
		if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <MX_ADC1_Init+0x74>)
 8000cbe:	f000 fac1 	bl	8001244 <HAL_ADC_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_ADC1_Init+0x4c>
			Error_Handler();
 8000cc8:	f000 f8ce 	bl	8000e68 <Error_Handler>
		}
		/** Configure Regular Channel
		 */
		sConfig.Channel = ADC_CHANNEL_0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_ADC1_Init+0x74>)
 8000cde:	f000 fc71 	bl	80015c4 <HAL_ADC_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_ADC1_Init+0x6c>
			Error_Handler();
 8000ce8:	f000 f8be 	bl	8000e68 <Error_Handler>
		}
		/* USER CODE BEGIN ADC1_Init 2 */

		/* USER CODE END ADC1_Init 2 */

	}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200004c8 	.word	0x200004c8
 8000cf8:	40012400 	.word	0x40012400

08000cfc <MX_USART2_UART_Init>:
	/**
	 * @brief USART2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART2_UART_Init(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
		/* USER CODE END USART2_Init 0 */

		/* USER CODE BEGIN USART2_Init 1 */

		/* USER CODE END USART2_Init 1 */
		huart2.Instance = USART2;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_USART2_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = 115200;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d34:	f002 f87a 	bl	8002e2c <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART2_UART_Init+0x46>
			Error_Handler();
 8000d3e:	f000 f893 	bl	8000e68 <Error_Handler>
		}
		/* USER CODE BEGIN USART2_Init 2 */

		/* USER CODE END USART2_Init 2 */

	}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000554 	.word	0x20000554
 8000d4c:	40004400 	.word	0x40004400

08000d50 <MX_DMA_Init>:

	/**
	 * Enable DMA controller clock
	 */
	static void MX_DMA_Init(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

		/* DMA controller clock enable */
		__HAL_RCC_DMA1_CLK_ENABLE();
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_DMA_Init+0x38>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <MX_DMA_Init+0x38>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_DMA_Init+0x38>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

		/* DMA interrupt init */
		/* DMA1_Channel1_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	200b      	movs	r0, #11
 8000d74:	f000 fef7 	bl	8001b66 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d78:	200b      	movs	r0, #11
 8000d7a:	f000 ff10 	bl	8001b9e <HAL_NVIC_EnableIRQ>

	}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000da0:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <MX_GPIO_Init+0xcc>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a2c      	ldr	r2, [pc, #176]	; (8000e58 <MX_GPIO_Init+0xcc>)
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <MX_GPIO_Init+0xcc>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_GPIO_Init+0xcc>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <MX_GPIO_Init+0xcc>)
 8000dbe:	f043 0320 	orr.w	r3, r3, #32
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_GPIO_Init+0xcc>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0320 	and.w	r3, r3, #32
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_GPIO_Init+0xcc>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <MX_GPIO_Init+0xcc>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_GPIO_Init+0xcc>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_GPIO_Init+0xcc>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <MX_GPIO_Init+0xcc>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_GPIO_Init+0xcc>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2120      	movs	r1, #32
 8000e04:	4815      	ldr	r0, [pc, #84]	; (8000e5c <MX_GPIO_Init+0xd0>)
 8000e06:	f001 fb07 	bl	8002418 <HAL_GPIO_WritePin>

		/*Configure GPIO pin : B1_Pin */
		GPIO_InitStruct.Pin = B1_Pin;
 8000e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_GPIO_Init+0xd4>)
 8000e12:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4811      	ldr	r0, [pc, #68]	; (8000e64 <MX_GPIO_Init+0xd8>)
 8000e20:	f001 f976 	bl	8002110 <HAL_GPIO_Init>

		/*Configure GPIO pin : LD2_Pin */
		GPIO_InitStruct.Pin = LD2_Pin;
 8000e24:	2320      	movs	r3, #32
 8000e26:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4808      	ldr	r0, [pc, #32]	; (8000e5c <MX_GPIO_Init+0xd0>)
 8000e3c:	f001 f968 	bl	8002110 <HAL_GPIO_Init>

		/* EXTI interrupt init*/
		HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2028      	movs	r0, #40	; 0x28
 8000e46:	f000 fe8e 	bl	8001b66 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e4a:	2028      	movs	r0, #40	; 0x28
 8000e4c:	f000 fea7 	bl	8001b9e <HAL_NVIC_EnableIRQ>

	}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	10110000 	.word	0x10110000
 8000e64:	40011000 	.word	0x40011000

08000e68 <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8000e70:	e7fe      	b.n	8000e70 <Error_Handler+0x8>
	...

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_MspInit+0x60>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_MspInit+0x60>)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010000 	.word	0x40010000

08000ed8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a28      	ldr	r2, [pc, #160]	; (8000f94 <HAL_ADC_MspInit+0xbc>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d149      	bne.n	8000f8c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <HAL_ADC_MspInit+0xc0>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a26      	ldr	r2, [pc, #152]	; (8000f98 <HAL_ADC_MspInit+0xc0>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <HAL_ADC_MspInit+0xc0>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <HAL_ADC_MspInit+0xc0>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <HAL_ADC_MspInit+0xc0>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <HAL_ADC_MspInit+0xc0>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	4819      	ldr	r0, [pc, #100]	; (8000f9c <HAL_ADC_MspInit+0xc4>)
 8000f38:	f001 f8ea 	bl	8002110 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000f3e:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000f66:	2220      	movs	r2, #32
 8000f68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000f72:	f000 fe2f 	bl	8001bd4 <HAL_DMA_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000f7c:	f7ff ff74 	bl	8000e68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000f84:	621a      	str	r2, [r3, #32]
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40012400 	.word	0x40012400
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	200004fc 	.word	0x200004fc
 8000fa4:	40020008 	.word	0x40020008

08000fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a19      	ldr	r2, [pc, #100]	; (8001028 <HAL_UART_MspInit+0x80>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d12b      	bne.n	8001020 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_UART_MspInit+0x84>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_UART_MspInit+0x84>)
 8000fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd2:	61d3      	str	r3, [r2, #28]
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_UART_MspInit+0x84>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_UART_MspInit+0x84>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a11      	ldr	r2, [pc, #68]	; (800102c <HAL_UART_MspInit+0x84>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_UART_MspInit+0x84>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ff8:	230c      	movs	r3, #12
 8000ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2302      	movs	r3, #2
 8001002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	4809      	ldr	r0, [pc, #36]	; (8001030 <HAL_UART_MspInit+0x88>)
 800100c:	f001 f880 	bl	8002110 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	2026      	movs	r0, #38	; 0x26
 8001016:	f000 fda6 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800101a:	2026      	movs	r0, #38	; 0x26
 800101c:	f000 fdbf 	bl	8001b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40004400 	.word	0x40004400
 800102c:	40021000 	.word	0x40021000
 8001030:	40010800 	.word	0x40010800

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107a:	f000 f8c7 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <DMA1_Channel1_IRQHandler+0x10>)
 800108a:	f000 ff0d 	bl	8001ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200004fc 	.word	0x200004fc

08001098 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <USART2_IRQHandler+0x10>)
 800109e:	f001 ff87 	bl	8002fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000554 	.word	0x20000554

080010ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010b4:	f001 f9c8 	bl	8002448 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f002 fb3a 	bl	8003764 <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20005000 	.word	0x20005000
 800111c:	00000400 	.word	0x00000400
 8001120:	200000a8 	.word	0x200000a8
 8001124:	200027b0 	.word	0x200027b0

08001128 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800115a:	f7ff ffe5 	bl	8001128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f002 fb07 	bl	8003770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001162:	f7ff fbad 	bl	80008c0 <main>
  bx lr
 8001166:	4770      	bx	lr
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001170:	08004478 	.word	0x08004478
  ldr r2, =_sbss
 8001174:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001178:	200027ac 	.word	0x200027ac

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_Init+0x28>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_Init+0x28>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 fcdd 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	2000      	movs	r0, #0
 8001198:	f000 f808 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff fe6a 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40022000 	.word	0x40022000

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_InitTick+0x54>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fcf5 	bl	8001bba <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00e      	b.n	80011f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d80a      	bhi.n	80011f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f000 fcbd 	bl	8001b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <HAL_InitTick+0x5c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000004 	.word	0x20000004
 8001204:	2000000c 	.word	0x2000000c
 8001208:	20000008 	.word	0x20000008

0800120c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x1c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_IncTick+0x20>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_IncTick+0x20>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	2000000c 	.word	0x2000000c
 800122c:	20002798 	.word	0x20002798

08001230 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <HAL_GetTick+0x10>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	20002798 	.word	0x20002798

08001244 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e0be      	b.n	80013e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001270:	2b00      	cmp	r3, #0
 8001272:	d109      	bne.n	8001288 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fe28 	bl	8000ed8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 faed 	bl	8001868 <ADC_ConversionStop_Disable>
 800128e:	4603      	mov	r3, r0
 8001290:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001296:	f003 0310 	and.w	r3, r3, #16
 800129a:	2b00      	cmp	r3, #0
 800129c:	f040 8099 	bne.w	80013d2 <HAL_ADC_Init+0x18e>
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 8095 	bne.w	80013d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012b0:	f023 0302 	bic.w	r3, r3, #2
 80012b4:	f043 0202 	orr.w	r2, r3, #2
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7b1b      	ldrb	r3, [r3, #12]
 80012ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012dc:	d003      	beq.n	80012e6 <HAL_ADC_Init+0xa2>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d102      	bne.n	80012ec <HAL_ADC_Init+0xa8>
 80012e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ea:	e000      	b.n	80012ee <HAL_ADC_Init+0xaa>
 80012ec:	2300      	movs	r3, #0
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7d1b      	ldrb	r3, [r3, #20]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d119      	bne.n	8001330 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7b1b      	ldrb	r3, [r3, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d109      	bne.n	8001318 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	3b01      	subs	r3, #1
 800130a:	035a      	lsls	r2, r3, #13
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	e00b      	b.n	8001330 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131c:	f043 0220 	orr.w	r2, r3, #32
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	f043 0201 	orr.w	r2, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	430a      	orrs	r2, r1
 8001342:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <HAL_ADC_Init+0x1a8>)
 800134c:	4013      	ands	r3, r2
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	430b      	orrs	r3, r1
 8001356:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001360:	d003      	beq.n	800136a <HAL_ADC_Init+0x126>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d104      	bne.n	8001374 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	3b01      	subs	r3, #1
 8001370:	051b      	lsls	r3, r3, #20
 8001372:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	430a      	orrs	r2, r1
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_ADC_Init+0x1ac>)
 8001390:	4013      	ands	r3, r2
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	429a      	cmp	r2, r3
 8001396:	d10b      	bne.n	80013b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	f023 0303 	bic.w	r3, r3, #3
 80013a6:	f043 0201 	orr.w	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013ae:	e018      	b.n	80013e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	f023 0312 	bic.w	r3, r3, #18
 80013b8:	f043 0210 	orr.w	r2, r3, #16
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013d0:	e007      	b.n	80013e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	f043 0210 	orr.w	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	ffe1f7fd 	.word	0xffe1f7fd
 80013f0:	ff1f0efe 	.word	0xff1f0efe

080013f4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a64      	ldr	r2, [pc, #400]	; (800159c <HAL_ADC_Start_DMA+0x1a8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d004      	beq.n	8001418 <HAL_ADC_Start_DMA+0x24>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a63      	ldr	r2, [pc, #396]	; (80015a0 <HAL_ADC_Start_DMA+0x1ac>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d106      	bne.n	8001426 <HAL_ADC_Start_DMA+0x32>
 8001418:	4b60      	ldr	r3, [pc, #384]	; (800159c <HAL_ADC_Start_DMA+0x1a8>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001420:	2b00      	cmp	r3, #0
 8001422:	f040 80b3 	bne.w	800158c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_ADC_Start_DMA+0x40>
 8001430:	2302      	movs	r3, #2
 8001432:	e0ae      	b.n	8001592 <HAL_ADC_Start_DMA+0x19e>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 f9b9 	bl	80017b4 <ADC_Enable>
 8001442:	4603      	mov	r3, r0
 8001444:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f040 809a 	bne.w	8001582 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a4e      	ldr	r2, [pc, #312]	; (80015a0 <HAL_ADC_Start_DMA+0x1ac>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d105      	bne.n	8001478 <HAL_ADC_Start_DMA+0x84>
 800146c:	4b4b      	ldr	r3, [pc, #300]	; (800159c <HAL_ADC_Start_DMA+0x1a8>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d115      	bne.n	80014a4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148e:	2b00      	cmp	r3, #0
 8001490:	d026      	beq.n	80014e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800149a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014a2:	e01d      	b.n	80014e0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a39      	ldr	r2, [pc, #228]	; (800159c <HAL_ADC_Start_DMA+0x1a8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d004      	beq.n	80014c4 <HAL_ADC_Start_DMA+0xd0>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a38      	ldr	r2, [pc, #224]	; (80015a0 <HAL_ADC_Start_DMA+0x1ac>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d10d      	bne.n	80014e0 <HAL_ADC_Start_DMA+0xec>
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <HAL_ADC_Start_DMA+0x1a8>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	f023 0206 	bic.w	r2, r3, #6
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80014f8:	e002      	b.n	8001500 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a25      	ldr	r2, [pc, #148]	; (80015a4 <HAL_ADC_Start_DMA+0x1b0>)
 800150e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4a24      	ldr	r2, [pc, #144]	; (80015a8 <HAL_ADC_Start_DMA+0x1b4>)
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a23      	ldr	r2, [pc, #140]	; (80015ac <HAL_ADC_Start_DMA+0x1b8>)
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f06f 0202 	mvn.w	r2, #2
 8001528:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001538:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6a18      	ldr	r0, [r3, #32]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	334c      	adds	r3, #76	; 0x4c
 8001544:	4619      	mov	r1, r3
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f000 fb9d 	bl	8001c88 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001558:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800155c:	d108      	bne.n	8001570 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800156c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800156e:	e00f      	b.n	8001590 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800157e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001580:	e006      	b.n	8001590 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800158a:	e001      	b.n	8001590 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001590:	7dfb      	ldrb	r3, [r7, #23]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40012400 	.word	0x40012400
 80015a0:	40012800 	.word	0x40012800
 80015a4:	080018eb 	.word	0x080018eb
 80015a8:	08001967 	.word	0x08001967
 80015ac:	08001983 	.word	0x08001983

080015b0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x20>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e0dc      	b.n	800179e <HAL_ADC_ConfigChannel+0x1da>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b06      	cmp	r3, #6
 80015f2:	d81c      	bhi.n	800162e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	3b05      	subs	r3, #5
 8001606:	221f      	movs	r2, #31
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	4019      	ands	r1, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	3b05      	subs	r3, #5
 8001620:	fa00 f203 	lsl.w	r2, r0, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	635a      	str	r2, [r3, #52]	; 0x34
 800162c:	e03c      	b.n	80016a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d81c      	bhi.n	8001670 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	3b23      	subs	r3, #35	; 0x23
 8001648:	221f      	movs	r2, #31
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	4019      	ands	r1, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	3b23      	subs	r3, #35	; 0x23
 8001662:	fa00 f203 	lsl.w	r2, r0, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
 800166e:	e01b      	b.n	80016a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	3b41      	subs	r3, #65	; 0x41
 8001682:	221f      	movs	r2, #31
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	4019      	ands	r1, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3b41      	subs	r3, #65	; 0x41
 800169c:	fa00 f203 	lsl.w	r2, r0, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b09      	cmp	r3, #9
 80016ae:	d91c      	bls.n	80016ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68d9      	ldr	r1, [r3, #12]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	3b1e      	subs	r3, #30
 80016c2:	2207      	movs	r2, #7
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	4019      	ands	r1, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6898      	ldr	r0, [r3, #8]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	3b1e      	subs	r3, #30
 80016dc:	fa00 f203 	lsl.w	r2, r0, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	e019      	b.n	800171e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6919      	ldr	r1, [r3, #16]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	2207      	movs	r2, #7
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	4019      	ands	r1, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	6898      	ldr	r0, [r3, #8]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b10      	cmp	r3, #16
 8001724:	d003      	beq.n	800172e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800172a:	2b11      	cmp	r3, #17
 800172c:	d132      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d125      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d126      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001754:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b10      	cmp	r3, #16
 800175c:	d11a      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_ADC_ConfigChannel+0x1e8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	0c9a      	lsrs	r2, r3, #18
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001774:	e002      	b.n	800177c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3b01      	subs	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x1b2>
 8001782:	e007      	b.n	8001794 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	f043 0220 	orr.w	r2, r3, #32
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800179c:	7bfb      	ldrb	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40012400 	.word	0x40012400
 80017ac:	20000004 	.word	0x20000004
 80017b0:	431bde83 	.word	0x431bde83

080017b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d040      	beq.n	8001854 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0201 	orr.w	r2, r2, #1
 80017e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <ADC_Enable+0xac>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1f      	ldr	r2, [pc, #124]	; (8001864 <ADC_Enable+0xb0>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9b      	lsrs	r3, r3, #18
 80017ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017f0:	e002      	b.n	80017f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f9      	bne.n	80017f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017fe:	f7ff fd17 	bl	8001230 <HAL_GetTick>
 8001802:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001804:	e01f      	b.n	8001846 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001806:	f7ff fd13 	bl	8001230 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d918      	bls.n	8001846 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b01      	cmp	r3, #1
 8001820:	d011      	beq.n	8001846 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	f043 0210 	orr.w	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e007      	b.n	8001856 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b01      	cmp	r3, #1
 8001852:	d1d8      	bne.n	8001806 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000004 	.word	0x20000004
 8001864:	431bde83 	.word	0x431bde83

08001868 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b01      	cmp	r3, #1
 8001880:	d12e      	bne.n	80018e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0201 	bic.w	r2, r2, #1
 8001890:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001892:	f7ff fccd 	bl	8001230 <HAL_GetTick>
 8001896:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001898:	e01b      	b.n	80018d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800189a:	f7ff fcc9 	bl	8001230 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d914      	bls.n	80018d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d10d      	bne.n	80018d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	f043 0210 	orr.w	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	f043 0201 	orr.w	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e007      	b.n	80018e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d0dc      	beq.n	800189a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001900:	2b00      	cmp	r3, #0
 8001902:	d127      	bne.n	8001954 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800191a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800191e:	d115      	bne.n	800194c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001924:	2b00      	cmp	r3, #0
 8001926:	d111      	bne.n	800194c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7fe fd11 	bl	8000374 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001952:	e004      	b.n	800195e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f7fe fce9 	bl	800034c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	f043 0204 	orr.w	r2, r3, #4
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f7ff fe01 	bl	80015b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <__NVIC_GetPriorityGrouping+0x18>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 0307 	and.w	r3, r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4906      	ldr	r1, [pc, #24]	; (8001a50 <__NVIC_EnableIRQ+0x34>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f7ff ff90 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff2d 	bl	80019b8 <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b78:	f7ff ff42 	bl	8001a00 <__NVIC_GetPriorityGrouping>
 8001b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff ff90 	bl	8001aa8 <NVIC_EncodePriority>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff5f 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff35 	bl	8001a1c <__NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ffa2 	bl	8001b0c <SysTick_Config>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e043      	b.n	8001c72 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_DMA_Init+0xa8>)
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <HAL_DMA_Init+0xac>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	009a      	lsls	r2, r3, #2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a1f      	ldr	r2, [pc, #124]	; (8001c84 <HAL_DMA_Init+0xb0>)
 8001c06:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c1e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	bffdfff8 	.word	0xbffdfff8
 8001c80:	cccccccd 	.word	0xcccccccd
 8001c84:	40020000 	.word	0x40020000

08001c88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_DMA_Start_IT+0x20>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e04a      	b.n	8001d3e <HAL_DMA_Start_IT+0xb6>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d13a      	bne.n	8001d30 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f9e8 	bl	80020b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 020e 	orr.w	r2, r2, #14
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e00f      	b.n	8001d1e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0204 	bic.w	r2, r2, #4
 8001d0c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 020a 	orr.w	r2, r2, #10
 8001d1c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0201 	orr.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e005      	b.n	8001d3c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d008      	beq.n	8001d6e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e020      	b.n	8001db0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 020e 	bic.w	r2, r2, #14
 8001d7c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0201 	bic.w	r2, r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d005      	beq.n	8001dde <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e051      	b.n	8001e82 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 020e 	bic.w	r2, r2, #14
 8001dec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <HAL_DMA_Abort_IT+0xd0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d029      	beq.n	8001e5c <HAL_DMA_Abort_IT+0xa0>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a20      	ldr	r2, [pc, #128]	; (8001e90 <HAL_DMA_Abort_IT+0xd4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d022      	beq.n	8001e58 <HAL_DMA_Abort_IT+0x9c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_DMA_Abort_IT+0xd8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d01a      	beq.n	8001e52 <HAL_DMA_Abort_IT+0x96>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_DMA_Abort_IT+0xdc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d012      	beq.n	8001e4c <HAL_DMA_Abort_IT+0x90>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <HAL_DMA_Abort_IT+0xe0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00a      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x8a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1a      	ldr	r2, [pc, #104]	; (8001ea0 <HAL_DMA_Abort_IT+0xe4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d102      	bne.n	8001e40 <HAL_DMA_Abort_IT+0x84>
 8001e3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e3e:	e00e      	b.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e44:	e00b      	b.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e4a:	e008      	b.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e50:	e005      	b.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e56:	e002      	b.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e58:	2310      	movs	r3, #16
 8001e5a:	e000      	b.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <HAL_DMA_Abort_IT+0xe8>)
 8001e60:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
    } 
  }
  return status;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40020008 	.word	0x40020008
 8001e90:	4002001c 	.word	0x4002001c
 8001e94:	40020030 	.word	0x40020030
 8001e98:	40020044 	.word	0x40020044
 8001e9c:	40020058 	.word	0x40020058
 8001ea0:	4002006c 	.word	0x4002006c
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d04f      	beq.n	8001f70 <HAL_DMA_IRQHandler+0xc8>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d04a      	beq.n	8001f70 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0204 	bic.w	r2, r2, #4
 8001ef6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a66      	ldr	r2, [pc, #408]	; (8002098 <HAL_DMA_IRQHandler+0x1f0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d029      	beq.n	8001f56 <HAL_DMA_IRQHandler+0xae>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a65      	ldr	r2, [pc, #404]	; (800209c <HAL_DMA_IRQHandler+0x1f4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d022      	beq.n	8001f52 <HAL_DMA_IRQHandler+0xaa>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a63      	ldr	r2, [pc, #396]	; (80020a0 <HAL_DMA_IRQHandler+0x1f8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01a      	beq.n	8001f4c <HAL_DMA_IRQHandler+0xa4>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a62      	ldr	r2, [pc, #392]	; (80020a4 <HAL_DMA_IRQHandler+0x1fc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d012      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x9e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_DMA_IRQHandler+0x200>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00a      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x98>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a5f      	ldr	r2, [pc, #380]	; (80020ac <HAL_DMA_IRQHandler+0x204>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d102      	bne.n	8001f3a <HAL_DMA_IRQHandler+0x92>
 8001f34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f38:	e00e      	b.n	8001f58 <HAL_DMA_IRQHandler+0xb0>
 8001f3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f3e:	e00b      	b.n	8001f58 <HAL_DMA_IRQHandler+0xb0>
 8001f40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f44:	e008      	b.n	8001f58 <HAL_DMA_IRQHandler+0xb0>
 8001f46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f4a:	e005      	b.n	8001f58 <HAL_DMA_IRQHandler+0xb0>
 8001f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f50:	e002      	b.n	8001f58 <HAL_DMA_IRQHandler+0xb0>
 8001f52:	2340      	movs	r3, #64	; 0x40
 8001f54:	e000      	b.n	8001f58 <HAL_DMA_IRQHandler+0xb0>
 8001f56:	2304      	movs	r3, #4
 8001f58:	4a55      	ldr	r2, [pc, #340]	; (80020b0 <HAL_DMA_IRQHandler+0x208>)
 8001f5a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8094 	beq.w	800208e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f6e:	e08e      	b.n	800208e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	2202      	movs	r2, #2
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d056      	beq.n	800202e <HAL_DMA_IRQHandler+0x186>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d051      	beq.n	800202e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10b      	bne.n	8001fb0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 020a 	bic.w	r2, r2, #10
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a38      	ldr	r2, [pc, #224]	; (8002098 <HAL_DMA_IRQHandler+0x1f0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d029      	beq.n	800200e <HAL_DMA_IRQHandler+0x166>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a37      	ldr	r2, [pc, #220]	; (800209c <HAL_DMA_IRQHandler+0x1f4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <HAL_DMA_IRQHandler+0x162>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a35      	ldr	r2, [pc, #212]	; (80020a0 <HAL_DMA_IRQHandler+0x1f8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01a      	beq.n	8002004 <HAL_DMA_IRQHandler+0x15c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a34      	ldr	r2, [pc, #208]	; (80020a4 <HAL_DMA_IRQHandler+0x1fc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d012      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x156>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a32      	ldr	r2, [pc, #200]	; (80020a8 <HAL_DMA_IRQHandler+0x200>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x150>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a31      	ldr	r2, [pc, #196]	; (80020ac <HAL_DMA_IRQHandler+0x204>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d102      	bne.n	8001ff2 <HAL_DMA_IRQHandler+0x14a>
 8001fec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ff0:	e00e      	b.n	8002010 <HAL_DMA_IRQHandler+0x168>
 8001ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff6:	e00b      	b.n	8002010 <HAL_DMA_IRQHandler+0x168>
 8001ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffc:	e008      	b.n	8002010 <HAL_DMA_IRQHandler+0x168>
 8001ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002002:	e005      	b.n	8002010 <HAL_DMA_IRQHandler+0x168>
 8002004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002008:	e002      	b.n	8002010 <HAL_DMA_IRQHandler+0x168>
 800200a:	2320      	movs	r3, #32
 800200c:	e000      	b.n	8002010 <HAL_DMA_IRQHandler+0x168>
 800200e:	2302      	movs	r3, #2
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_DMA_IRQHandler+0x208>)
 8002012:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	2b00      	cmp	r3, #0
 8002022:	d034      	beq.n	800208e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800202c:	e02f      	b.n	800208e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2208      	movs	r2, #8
 8002034:	409a      	lsls	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d028      	beq.n	8002090 <HAL_DMA_IRQHandler+0x1e8>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d023      	beq.n	8002090 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 020e 	bic.w	r2, r2, #14
 8002056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f202 	lsl.w	r2, r1, r2
 8002066:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
    }
  }
  return;
 800208e:	bf00      	nop
 8002090:	bf00      	nop
}
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40020008 	.word	0x40020008
 800209c:	4002001c 	.word	0x4002001c
 80020a0:	40020030 	.word	0x40020030
 80020a4:	40020044 	.word	0x40020044
 80020a8:	40020058 	.word	0x40020058
 80020ac:	4002006c 	.word	0x4002006c
 80020b0:	40020000 	.word	0x40020000

080020b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	2101      	movs	r1, #1
 80020cc:	fa01 f202 	lsl.w	r2, r1, r2
 80020d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b10      	cmp	r3, #16
 80020e0:	d108      	bne.n	80020f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020f2:	e007      	b.n	8002104 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	60da      	str	r2, [r3, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
	...

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b08b      	sub	sp, #44	; 0x2c
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002122:	e169      	b.n	80023f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002124:	2201      	movs	r2, #1
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	429a      	cmp	r2, r3
 800213e:	f040 8158 	bne.w	80023f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4a9a      	ldr	r2, [pc, #616]	; (80023b0 <HAL_GPIO_Init+0x2a0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d05e      	beq.n	800220a <HAL_GPIO_Init+0xfa>
 800214c:	4a98      	ldr	r2, [pc, #608]	; (80023b0 <HAL_GPIO_Init+0x2a0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d875      	bhi.n	800223e <HAL_GPIO_Init+0x12e>
 8002152:	4a98      	ldr	r2, [pc, #608]	; (80023b4 <HAL_GPIO_Init+0x2a4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d058      	beq.n	800220a <HAL_GPIO_Init+0xfa>
 8002158:	4a96      	ldr	r2, [pc, #600]	; (80023b4 <HAL_GPIO_Init+0x2a4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d86f      	bhi.n	800223e <HAL_GPIO_Init+0x12e>
 800215e:	4a96      	ldr	r2, [pc, #600]	; (80023b8 <HAL_GPIO_Init+0x2a8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d052      	beq.n	800220a <HAL_GPIO_Init+0xfa>
 8002164:	4a94      	ldr	r2, [pc, #592]	; (80023b8 <HAL_GPIO_Init+0x2a8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d869      	bhi.n	800223e <HAL_GPIO_Init+0x12e>
 800216a:	4a94      	ldr	r2, [pc, #592]	; (80023bc <HAL_GPIO_Init+0x2ac>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d04c      	beq.n	800220a <HAL_GPIO_Init+0xfa>
 8002170:	4a92      	ldr	r2, [pc, #584]	; (80023bc <HAL_GPIO_Init+0x2ac>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d863      	bhi.n	800223e <HAL_GPIO_Init+0x12e>
 8002176:	4a92      	ldr	r2, [pc, #584]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d046      	beq.n	800220a <HAL_GPIO_Init+0xfa>
 800217c:	4a90      	ldr	r2, [pc, #576]	; (80023c0 <HAL_GPIO_Init+0x2b0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d85d      	bhi.n	800223e <HAL_GPIO_Init+0x12e>
 8002182:	2b12      	cmp	r3, #18
 8002184:	d82a      	bhi.n	80021dc <HAL_GPIO_Init+0xcc>
 8002186:	2b12      	cmp	r3, #18
 8002188:	d859      	bhi.n	800223e <HAL_GPIO_Init+0x12e>
 800218a:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <HAL_GPIO_Init+0x80>)
 800218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002190:	0800220b 	.word	0x0800220b
 8002194:	080021e5 	.word	0x080021e5
 8002198:	080021f7 	.word	0x080021f7
 800219c:	08002239 	.word	0x08002239
 80021a0:	0800223f 	.word	0x0800223f
 80021a4:	0800223f 	.word	0x0800223f
 80021a8:	0800223f 	.word	0x0800223f
 80021ac:	0800223f 	.word	0x0800223f
 80021b0:	0800223f 	.word	0x0800223f
 80021b4:	0800223f 	.word	0x0800223f
 80021b8:	0800223f 	.word	0x0800223f
 80021bc:	0800223f 	.word	0x0800223f
 80021c0:	0800223f 	.word	0x0800223f
 80021c4:	0800223f 	.word	0x0800223f
 80021c8:	0800223f 	.word	0x0800223f
 80021cc:	0800223f 	.word	0x0800223f
 80021d0:	0800223f 	.word	0x0800223f
 80021d4:	080021ed 	.word	0x080021ed
 80021d8:	08002201 	.word	0x08002201
 80021dc:	4a79      	ldr	r2, [pc, #484]	; (80023c4 <HAL_GPIO_Init+0x2b4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021e2:	e02c      	b.n	800223e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	623b      	str	r3, [r7, #32]
          break;
 80021ea:	e029      	b.n	8002240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	3304      	adds	r3, #4
 80021f2:	623b      	str	r3, [r7, #32]
          break;
 80021f4:	e024      	b.n	8002240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	3308      	adds	r3, #8
 80021fc:	623b      	str	r3, [r7, #32]
          break;
 80021fe:	e01f      	b.n	8002240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	330c      	adds	r3, #12
 8002206:	623b      	str	r3, [r7, #32]
          break;
 8002208:	e01a      	b.n	8002240 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002212:	2304      	movs	r3, #4
 8002214:	623b      	str	r3, [r7, #32]
          break;
 8002216:	e013      	b.n	8002240 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002220:	2308      	movs	r3, #8
 8002222:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	611a      	str	r2, [r3, #16]
          break;
 800222a:	e009      	b.n	8002240 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800222c:	2308      	movs	r3, #8
 800222e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	615a      	str	r2, [r3, #20]
          break;
 8002236:	e003      	b.n	8002240 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
          break;
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x130>
          break;
 800223e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2bff      	cmp	r3, #255	; 0xff
 8002244:	d801      	bhi.n	800224a <HAL_GPIO_Init+0x13a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	e001      	b.n	800224e <HAL_GPIO_Init+0x13e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2bff      	cmp	r3, #255	; 0xff
 8002254:	d802      	bhi.n	800225c <HAL_GPIO_Init+0x14c>
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	e002      	b.n	8002262 <HAL_GPIO_Init+0x152>
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	3b08      	subs	r3, #8
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	210f      	movs	r1, #15
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	401a      	ands	r2, r3
 8002274:	6a39      	ldr	r1, [r7, #32]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	431a      	orrs	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80b1 	beq.w	80023f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002290:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <HAL_GPIO_Init+0x2b8>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	4a4c      	ldr	r2, [pc, #304]	; (80023c8 <HAL_GPIO_Init+0x2b8>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6193      	str	r3, [r2, #24]
 800229c:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <HAL_GPIO_Init+0x2b8>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022a8:	4a48      	ldr	r2, [pc, #288]	; (80023cc <HAL_GPIO_Init+0x2bc>)
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4013      	ands	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a40      	ldr	r2, [pc, #256]	; (80023d0 <HAL_GPIO_Init+0x2c0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d013      	beq.n	80022fc <HAL_GPIO_Init+0x1ec>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3f      	ldr	r2, [pc, #252]	; (80023d4 <HAL_GPIO_Init+0x2c4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00d      	beq.n	80022f8 <HAL_GPIO_Init+0x1e8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3e      	ldr	r2, [pc, #248]	; (80023d8 <HAL_GPIO_Init+0x2c8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d007      	beq.n	80022f4 <HAL_GPIO_Init+0x1e4>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a3d      	ldr	r2, [pc, #244]	; (80023dc <HAL_GPIO_Init+0x2cc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_GPIO_Init+0x1e0>
 80022ec:	2303      	movs	r3, #3
 80022ee:	e006      	b.n	80022fe <HAL_GPIO_Init+0x1ee>
 80022f0:	2304      	movs	r3, #4
 80022f2:	e004      	b.n	80022fe <HAL_GPIO_Init+0x1ee>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x1ee>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_GPIO_Init+0x1ee>
 80022fc:	2300      	movs	r3, #0
 80022fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002300:	f002 0203 	and.w	r2, r2, #3
 8002304:	0092      	lsls	r2, r2, #2
 8002306:	4093      	lsls	r3, r2
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800230e:	492f      	ldr	r1, [pc, #188]	; (80023cc <HAL_GPIO_Init+0x2bc>)
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d006      	beq.n	8002336 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	492c      	ldr	r1, [pc, #176]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	43db      	mvns	r3, r3
 800233e:	4928      	ldr	r1, [pc, #160]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002340:	4013      	ands	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002350:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	4922      	ldr	r1, [pc, #136]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	43db      	mvns	r3, r3
 8002366:	491e      	ldr	r1, [pc, #120]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002368:	4013      	ands	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	4918      	ldr	r1, [pc, #96]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	608b      	str	r3, [r1, #8]
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	43db      	mvns	r3, r3
 800238e:	4914      	ldr	r1, [pc, #80]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002390:	4013      	ands	r3, r2
 8002392:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d021      	beq.n	80023e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60cb      	str	r3, [r1, #12]
 80023ac:	e021      	b.n	80023f2 <HAL_GPIO_Init+0x2e2>
 80023ae:	bf00      	nop
 80023b0:	10320000 	.word	0x10320000
 80023b4:	10310000 	.word	0x10310000
 80023b8:	10220000 	.word	0x10220000
 80023bc:	10210000 	.word	0x10210000
 80023c0:	10120000 	.word	0x10120000
 80023c4:	10110000 	.word	0x10110000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010000 	.word	0x40010000
 80023d0:	40010800 	.word	0x40010800
 80023d4:	40010c00 	.word	0x40010c00
 80023d8:	40011000 	.word	0x40011000
 80023dc:	40011400 	.word	0x40011400
 80023e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_GPIO_Init+0x304>)
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	4909      	ldr	r1, [pc, #36]	; (8002414 <HAL_GPIO_Init+0x304>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	3301      	adds	r3, #1
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	f47f ae8e 	bne.w	8002124 <HAL_GPIO_Init+0x14>
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	372c      	adds	r7, #44	; 0x2c
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
 8002424:	4613      	mov	r3, r2
 8002426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002434:	e003      	b.n	800243e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	041a      	lsls	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	611a      	str	r2, [r3, #16]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d006      	beq.n	800246c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f806 	bl	8002478 <HAL_GPIO_EXTI_Callback>
  }
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40010400 	.word	0x40010400

08002478 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e26c      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8087 	beq.w	80025ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ac:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d00c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024b8:	4b8f      	ldr	r3, [pc, #572]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d112      	bne.n	80024ea <HAL_RCC_OscConfig+0x5e>
 80024c4:	4b8c      	ldr	r3, [pc, #560]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d10b      	bne.n	80024ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d2:	4b89      	ldr	r3, [pc, #548]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d06c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x12c>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d168      	bne.n	80025b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e246      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x76>
 80024f4:	4b80      	ldr	r3, [pc, #512]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a7f      	ldr	r2, [pc, #508]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e02e      	b.n	8002560 <HAL_RCC_OscConfig+0xd4>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x98>
 800250a:	4b7b      	ldr	r3, [pc, #492]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7a      	ldr	r2, [pc, #488]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b78      	ldr	r3, [pc, #480]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a77      	ldr	r2, [pc, #476]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e01d      	b.n	8002560 <HAL_RCC_OscConfig+0xd4>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0xbc>
 800252e:	4b72      	ldr	r3, [pc, #456]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a71      	ldr	r2, [pc, #452]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6e      	ldr	r2, [pc, #440]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0xd4>
 8002548:	4b6b      	ldr	r3, [pc, #428]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6a      	ldr	r2, [pc, #424]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800254e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b68      	ldr	r3, [pc, #416]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a67      	ldr	r2, [pc, #412]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7fe fe62 	bl	8001230 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002570:	f7fe fe5e 	bl	8001230 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e1fa      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0xe4>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fe4e 	bl	8001230 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7fe fe4a 	bl	8001230 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e1e6      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x10c>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d063      	beq.n	800268e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c6:	4b4c      	ldr	r3, [pc, #304]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025d2:	4b49      	ldr	r3, [pc, #292]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d11c      	bne.n	8002618 <HAL_RCC_OscConfig+0x18c>
 80025de:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x176>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1ba      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b3d      	ldr	r3, [pc, #244]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4939      	ldr	r1, [pc, #228]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	e03a      	b.n	800268e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002620:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7fe fe03 	bl	8001230 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262e:	f7fe fdff 	bl	8001230 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e19b      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002640:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264c:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4927      	ldr	r1, [pc, #156]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
 8002660:	e015      	b.n	800268e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fde2 	bl	8001230 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002670:	f7fe fdde 	bl	8001230 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e17a      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03a      	beq.n	8002710 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d019      	beq.n	80026d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a8:	f7fe fdc2 	bl	8001230 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b0:	f7fe fdbe 	bl	8001230 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e15a      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f000 fad8 	bl	8002c84 <RCC_Delay>
 80026d4:	e01c      	b.n	8002710 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026dc:	f7fe fda8 	bl	8001230 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e2:	e00f      	b.n	8002704 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e4:	f7fe fda4 	bl	8001230 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d908      	bls.n	8002704 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e140      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	42420000 	.word	0x42420000
 8002700:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	4b9e      	ldr	r3, [pc, #632]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e9      	bne.n	80026e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80a6 	beq.w	800286a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002722:	4b97      	ldr	r3, [pc, #604]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10d      	bne.n	800274a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	4b94      	ldr	r3, [pc, #592]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a93      	ldr	r2, [pc, #588]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	61d3      	str	r3, [r2, #28]
 800273a:	4b91      	ldr	r3, [pc, #580]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002746:	2301      	movs	r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b8e      	ldr	r3, [pc, #568]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d118      	bne.n	8002788 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002756:	4b8b      	ldr	r3, [pc, #556]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a8a      	ldr	r2, [pc, #552]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002762:	f7fe fd65 	bl	8001230 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276a:	f7fe fd61 	bl	8001230 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	; 0x64
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e0fd      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	4b81      	ldr	r3, [pc, #516]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x312>
 8002790:	4b7b      	ldr	r3, [pc, #492]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4a7a      	ldr	r2, [pc, #488]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6213      	str	r3, [r2, #32]
 800279c:	e02d      	b.n	80027fa <HAL_RCC_OscConfig+0x36e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x334>
 80027a6:	4b76      	ldr	r3, [pc, #472]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4a75      	ldr	r2, [pc, #468]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6213      	str	r3, [r2, #32]
 80027b2:	4b73      	ldr	r3, [pc, #460]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4a72      	ldr	r2, [pc, #456]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	6213      	str	r3, [r2, #32]
 80027be:	e01c      	b.n	80027fa <HAL_RCC_OscConfig+0x36e>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCC_OscConfig+0x356>
 80027c8:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4a6c      	ldr	r2, [pc, #432]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4a69      	ldr	r2, [pc, #420]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	e00b      	b.n	80027fa <HAL_RCC_OscConfig+0x36e>
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a66      	ldr	r2, [pc, #408]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	6213      	str	r3, [r2, #32]
 80027ee:	4b64      	ldr	r3, [pc, #400]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a63      	ldr	r2, [pc, #396]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d015      	beq.n	800282e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7fe fd15 	bl	8001230 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe fd11 	bl	8001230 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	; 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0ab      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	4b57      	ldr	r3, [pc, #348]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ee      	beq.n	800280a <HAL_RCC_OscConfig+0x37e>
 800282c:	e014      	b.n	8002858 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fe fcff 	bl	8001230 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fcfb 	bl	8001230 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e095      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284c:	4b4c      	ldr	r3, [pc, #304]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ee      	bne.n	8002836 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d105      	bne.n	800286a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285e:	4b48      	ldr	r3, [pc, #288]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4a47      	ldr	r2, [pc, #284]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002868:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8081 	beq.w	8002976 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002874:	4b42      	ldr	r3, [pc, #264]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	d061      	beq.n	8002944 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d146      	bne.n	8002916 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002888:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <HAL_RCC_OscConfig+0x4fc>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7fe fccf 	bl	8001230 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002896:	f7fe fccb 	bl	8001230 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e067      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a8:	4b35      	ldr	r3, [pc, #212]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f0      	bne.n	8002896 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028bc:	d108      	bne.n	80028d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	492d      	ldr	r1, [pc, #180]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a19      	ldr	r1, [r3, #32]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	430b      	orrs	r3, r1
 80028e2:	4927      	ldr	r1, [pc, #156]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <HAL_RCC_OscConfig+0x4fc>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7fe fc9f 	bl	8001230 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f6:	f7fe fc9b 	bl	8001230 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e037      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002908:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x46a>
 8002914:	e02f      	b.n	8002976 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <HAL_RCC_OscConfig+0x4fc>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fc88 	bl	8001230 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002924:	f7fe fc84 	bl	8001230 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e020      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x498>
 8002942:	e018      	b.n	8002976 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e013      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	429a      	cmp	r2, r3
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	40007000 	.word	0x40007000
 8002988:	42420060 	.word	0x42420060

0800298c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0d0      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a0:	4b6a      	ldr	r3, [pc, #424]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d910      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b67      	ldr	r3, [pc, #412]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 0207 	bic.w	r2, r3, #7
 80029b6:	4965      	ldr	r1, [pc, #404]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	494d      	ldr	r1, [pc, #308]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d040      	beq.n	8002aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d115      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4a:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e073      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e06b      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6a:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4936      	ldr	r1, [pc, #216]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe fbd8 	bl	8001230 <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7fe fbd4 	bl	8001230 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e053      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 020c 	and.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1eb      	bne.n	8002a84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aac:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d210      	bcs.n	8002adc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 0207 	bic.w	r2, r3, #7
 8002ac2:	4922      	ldr	r1, [pc, #136]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e032      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b1a:	f000 f821 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	490a      	ldr	r1, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	5ccb      	ldrb	r3, [r1, r3]
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1cc>)
 8002b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1d0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe fb36 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40021000 	.word	0x40021000
 8002b54:	08004324 	.word	0x08004324
 8002b58:	20000004 	.word	0x20000004
 8002b5c:	20000008 	.word	0x20000008

08002b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b490      	push	{r4, r7}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b68:	1d3c      	adds	r4, r7, #4
 8002b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b70:	f240 2301 	movw	r3, #513	; 0x201
 8002b74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b8a:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d002      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x46>
 8002b9e:	e02d      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ba2:	623b      	str	r3, [r7, #32]
      break;
 8002ba4:	e02d      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bb8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	0c5b      	lsrs	r3, r3, #17
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bde:	fb02 f203 	mul.w	r2, r2, r3
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bea:	e004      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	623b      	str	r3, [r7, #32]
      break;
 8002bfa:	e002      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bfe:	623b      	str	r3, [r7, #32]
      break;
 8002c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c02:	6a3b      	ldr	r3, [r7, #32]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3728      	adds	r7, #40	; 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc90      	pop	{r4, r7}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	08004310 	.word	0x08004310
 8002c14:	40021000 	.word	0x40021000
 8002c18:	007a1200 	.word	0x007a1200
 8002c1c:	003d0900 	.word	0x003d0900

08002c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c24:	4b02      	ldr	r3, [pc, #8]	; (8002c30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	20000004 	.word	0x20000004

08002c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c38:	f7ff fff2 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000
 8002c58:	08004334 	.word	0x08004334

08002c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c60:	f7ff ffde 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	0adb      	lsrs	r3, r3, #11
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4903      	ldr	r1, [pc, #12]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c72:	5ccb      	ldrb	r3, [r1, r3]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	08004334 	.word	0x08004334

08002c84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <RCC_Delay+0x34>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <RCC_Delay+0x38>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0a5b      	lsrs	r3, r3, #9
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ca0:	bf00      	nop
  }
  while (Delay --);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1e5a      	subs	r2, r3, #1
 8002ca6:	60fa      	str	r2, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f9      	bne.n	8002ca0 <RCC_Delay+0x1c>
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	20000004 	.word	0x20000004
 8002cbc:	10624dd3 	.word	0x10624dd3

08002cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d07d      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce0:	4b4f      	ldr	r3, [pc, #316]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b4c      	ldr	r3, [pc, #304]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	4a4b      	ldr	r2, [pc, #300]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	61d3      	str	r3, [r2, #28]
 8002cf8:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d04:	2301      	movs	r3, #1
 8002d06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d118      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d14:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a42      	ldr	r2, [pc, #264]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d20:	f7fe fa86 	bl	8001230 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d26:	e008      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d28:	f7fe fa82 	bl	8001230 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e06d      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d02e      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d027      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d64:	4b2e      	ldr	r3, [pc, #184]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d74:	4b2c      	ldr	r3, [pc, #176]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d7a:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d014      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fa51 	bl	8001230 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7fe fa4d 	bl	8001230 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e036      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ee      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db4:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4917      	ldr	r1, [pc, #92]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002de4:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	490b      	ldr	r1, [pc, #44]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	4904      	ldr	r1, [pc, #16]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40007000 	.word	0x40007000
 8002e28:	42420440 	.word	0x42420440

08002e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e03f      	b.n	8002ebe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fe f8a8 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	; 0x24
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fbe5 	bl	8003640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b085      	sub	sp, #20
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d130      	bne.n	8002f42 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_UART_Transmit_IT+0x26>
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e029      	b.n	8002f44 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Transmit_IT+0x38>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e022      	b.n	8002f44 <HAL_UART_Transmit_IT+0x7e>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	88fa      	ldrh	r2, [r7, #6]
 8002f10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	88fa      	ldrh	r2, [r7, #6]
 8002f16:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f3c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e000      	b.n	8002f44 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
  }
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d11d      	bne.n	8002fa4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_UART_Receive_IT+0x26>
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e016      	b.n	8002fa6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Receive_IT+0x38>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e00f      	b.n	8002fa6 <HAL_UART_Receive_IT+0x58>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f9c6 	bl	800332c <UART_Start_Receive_IT>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	e000      	b.n	8002fa6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
  }
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_UART_IRQHandler+0x52>
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fa76 	bl	80034ec <UART_Receive_IT>
      return;
 8003000:	e17b      	b.n	80032fa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80b1 	beq.w	800316c <HAL_UART_IRQHandler+0x1bc>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_UART_IRQHandler+0x70>
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80a6 	beq.w	800316c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_UART_IRQHandler+0x90>
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f043 0201 	orr.w	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_UART_IRQHandler+0xb0>
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f043 0202 	orr.w	r2, r3, #2
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_UART_IRQHandler+0xd0>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00f      	beq.n	80030aa <HAL_UART_IRQHandler+0xfa>
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <HAL_UART_IRQHandler+0xee>
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f043 0208 	orr.w	r2, r3, #8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 811e 	beq.w	80032f0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_UART_IRQHandler+0x11e>
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fa0f 	bl	80034ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_UART_IRQHandler+0x146>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d031      	beq.n	800315a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f951 	bl	800339e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d023      	beq.n	8003152 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003118:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	2b00      	cmp	r3, #0
 8003120:	d013      	beq.n	800314a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	4a76      	ldr	r2, [pc, #472]	; (8003300 <HAL_UART_IRQHandler+0x350>)
 8003128:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fe44 	bl	8001dbc <HAL_DMA_Abort_IT>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003144:	4610      	mov	r0, r2
 8003146:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003148:	e00e      	b.n	8003168 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8da 	bl	8003304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003150:	e00a      	b.n	8003168 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8d6 	bl	8003304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003158:	e006      	b.n	8003168 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f8d2 	bl	8003304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003166:	e0c3      	b.n	80032f0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	bf00      	nop
    return;
 800316a:	e0c1      	b.n	80032f0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 80a1 	bne.w	80032b8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 809b 	beq.w	80032b8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8095 	beq.w	80032b8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d04e      	beq.n	8003250 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80031bc:	8a3b      	ldrh	r3, [r7, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8098 	beq.w	80032f4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031c8:	8a3a      	ldrh	r2, [r7, #16]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	f080 8092 	bcs.w	80032f4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8a3a      	ldrh	r2, [r7, #16]
 80031d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d02b      	beq.n	8003238 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0210 	bic.w	r2, r2, #16
 800322c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fd87 	bl	8001d46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003240:	b29b      	uxth	r3, r3
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	b29b      	uxth	r3, r3
 8003246:	4619      	mov	r1, r3
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f864 	bl	8003316 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800324e:	e051      	b.n	80032f4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003258:	b29b      	uxth	r3, r3
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d047      	beq.n	80032f8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003268:	8a7b      	ldrh	r3, [r7, #18]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d044      	beq.n	80032f8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800327c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0210 	bic.w	r2, r2, #16
 80032aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032ac:	8a7b      	ldrh	r3, [r7, #18]
 80032ae:	4619      	mov	r1, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f830 	bl	8003316 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80032b6:	e01f      	b.n	80032f8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_UART_IRQHandler+0x324>
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f8a6 	bl	800341e <UART_Transmit_IT>
    return;
 80032d2:	e012      	b.n	80032fa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00d      	beq.n	80032fa <HAL_UART_IRQHandler+0x34a>
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f8e7 	bl	80034bc <UART_EndTransmit_IT>
    return;
 80032ee:	e004      	b.n	80032fa <HAL_UART_IRQHandler+0x34a>
    return;
 80032f0:	bf00      	nop
 80032f2:	e002      	b.n	80032fa <HAL_UART_IRQHandler+0x34a>
      return;
 80032f4:	bf00      	nop
 80032f6:	e000      	b.n	80032fa <HAL_UART_IRQHandler+0x34a>
      return;
 80032f8:	bf00      	nop
  }
}
 80032fa:	3728      	adds	r7, #40	; 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	080033f7 	.word	0x080033f7

08003304 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	88fa      	ldrh	r2, [r7, #6]
 800334a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2222      	movs	r2, #34	; 0x22
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003370:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0220 	orr.w	r2, r2, #32
 8003390:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d107      	bne.n	80033de <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0210 	bic.w	r2, r2, #16
 80033dc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff ff77 	bl	8003304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800341e:	b480      	push	{r7}
 8003420:	b085      	sub	sp, #20
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b21      	cmp	r3, #33	; 0x21
 8003430:	d13e      	bne.n	80034b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343a:	d114      	bne.n	8003466 <UART_Transmit_IT+0x48>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d110      	bne.n	8003466 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003458:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	621a      	str	r2, [r3, #32]
 8003464:	e008      	b.n	8003478 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	1c59      	adds	r1, r3, #1
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6211      	str	r1, [r2, #32]
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29b      	uxth	r3, r3
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4619      	mov	r1, r3
 8003486:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10f      	bne.n	80034ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800349a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e000      	b.n	80034b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034b0:	2302      	movs	r3, #2
  }
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7fc fecb 	bl	8000278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b22      	cmp	r3, #34	; 0x22
 80034fe:	f040 8099 	bne.w	8003634 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350a:	d117      	bne.n	800353c <UART_Receive_IT+0x50>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d113      	bne.n	800353c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800352a:	b29a      	uxth	r2, r3
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	1c9a      	adds	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	629a      	str	r2, [r3, #40]	; 0x28
 800353a:	e026      	b.n	800358a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354e:	d007      	beq.n	8003560 <UART_Receive_IT+0x74>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <UART_Receive_IT+0x82>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e008      	b.n	8003580 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800357a:	b2da      	uxtb	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29b      	uxth	r3, r3
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4619      	mov	r1, r3
 8003598:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800359a:	2b00      	cmp	r3, #0
 800359c:	d148      	bne.n	8003630 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0220 	bic.w	r2, r2, #32
 80035ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d123      	bne.n	8003626 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0210 	bic.w	r2, r2, #16
 80035f2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d10a      	bne.n	8003618 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800361c:	4619      	mov	r1, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fe79 	bl	8003316 <HAL_UARTEx_RxEventCallback>
 8003624:	e002      	b.n	800362c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fc fe62 	bl	80002f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	e002      	b.n	8003636 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	e000      	b.n	8003636 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003634:	2302      	movs	r3, #2
  }
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800367a:	f023 030c 	bic.w	r3, r3, #12
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	430b      	orrs	r3, r1
 8003686:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2c      	ldr	r2, [pc, #176]	; (8003754 <UART_SetConfig+0x114>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d103      	bne.n	80036b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036a8:	f7ff fad8 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	e002      	b.n	80036b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036b0:	f7ff fac0 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 80036b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	009a      	lsls	r2, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036cc:	4a22      	ldr	r2, [pc, #136]	; (8003758 <UART_SetConfig+0x118>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	0119      	lsls	r1, r3, #4
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009a      	lsls	r2, r3, #2
 80036e0:	441a      	add	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ec:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <UART_SetConfig+0x118>)
 80036ee:	fba3 0302 	umull	r0, r3, r3, r2
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2064      	movs	r0, #100	; 0x64
 80036f6:	fb00 f303 	mul.w	r3, r0, r3
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	3332      	adds	r3, #50	; 0x32
 8003700:	4a15      	ldr	r2, [pc, #84]	; (8003758 <UART_SetConfig+0x118>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800370c:	4419      	add	r1, r3
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009a      	lsls	r2, r3, #2
 8003718:	441a      	add	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	fbb2 f2f3 	udiv	r2, r2, r3
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <UART_SetConfig+0x118>)
 8003726:	fba3 0302 	umull	r0, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2064      	movs	r0, #100	; 0x64
 800372e:	fb00 f303 	mul.w	r3, r0, r3
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	3332      	adds	r3, #50	; 0x32
 8003738:	4a07      	ldr	r2, [pc, #28]	; (8003758 <UART_SetConfig+0x118>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	f003 020f 	and.w	r2, r3, #15
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	440a      	add	r2, r1
 800374a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40013800 	.word	0x40013800
 8003758:	51eb851f 	.word	0x51eb851f

0800375c <atoi>:
 800375c:	220a      	movs	r2, #10
 800375e:	2100      	movs	r1, #0
 8003760:	f000 b8f8 	b.w	8003954 <strtol>

08003764 <__errno>:
 8003764:	4b01      	ldr	r3, [pc, #4]	; (800376c <__errno+0x8>)
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000010 	.word	0x20000010

08003770 <__libc_init_array>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	2600      	movs	r6, #0
 8003774:	4d0c      	ldr	r5, [pc, #48]	; (80037a8 <__libc_init_array+0x38>)
 8003776:	4c0d      	ldr	r4, [pc, #52]	; (80037ac <__libc_init_array+0x3c>)
 8003778:	1b64      	subs	r4, r4, r5
 800377a:	10a4      	asrs	r4, r4, #2
 800377c:	42a6      	cmp	r6, r4
 800377e:	d109      	bne.n	8003794 <__libc_init_array+0x24>
 8003780:	f000 fd1e 	bl	80041c0 <_init>
 8003784:	2600      	movs	r6, #0
 8003786:	4d0a      	ldr	r5, [pc, #40]	; (80037b0 <__libc_init_array+0x40>)
 8003788:	4c0a      	ldr	r4, [pc, #40]	; (80037b4 <__libc_init_array+0x44>)
 800378a:	1b64      	subs	r4, r4, r5
 800378c:	10a4      	asrs	r4, r4, #2
 800378e:	42a6      	cmp	r6, r4
 8003790:	d105      	bne.n	800379e <__libc_init_array+0x2e>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	f855 3b04 	ldr.w	r3, [r5], #4
 8003798:	4798      	blx	r3
 800379a:	3601      	adds	r6, #1
 800379c:	e7ee      	b.n	800377c <__libc_init_array+0xc>
 800379e:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a2:	4798      	blx	r3
 80037a4:	3601      	adds	r6, #1
 80037a6:	e7f2      	b.n	800378e <__libc_init_array+0x1e>
 80037a8:	08004470 	.word	0x08004470
 80037ac:	08004470 	.word	0x08004470
 80037b0:	08004470 	.word	0x08004470
 80037b4:	08004474 	.word	0x08004474

080037b8 <memcpy>:
 80037b8:	440a      	add	r2, r1
 80037ba:	4291      	cmp	r1, r2
 80037bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80037c0:	d100      	bne.n	80037c4 <memcpy+0xc>
 80037c2:	4770      	bx	lr
 80037c4:	b510      	push	{r4, lr}
 80037c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ca:	4291      	cmp	r1, r2
 80037cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037d0:	d1f9      	bne.n	80037c6 <memcpy+0xe>
 80037d2:	bd10      	pop	{r4, pc}

080037d4 <memset>:
 80037d4:	4603      	mov	r3, r0
 80037d6:	4402      	add	r2, r0
 80037d8:	4293      	cmp	r3, r2
 80037da:	d100      	bne.n	80037de <memset+0xa>
 80037dc:	4770      	bx	lr
 80037de:	f803 1b01 	strb.w	r1, [r3], #1
 80037e2:	e7f9      	b.n	80037d8 <memset+0x4>

080037e4 <siprintf>:
 80037e4:	b40e      	push	{r1, r2, r3}
 80037e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037ea:	b500      	push	{lr}
 80037ec:	b09c      	sub	sp, #112	; 0x70
 80037ee:	ab1d      	add	r3, sp, #116	; 0x74
 80037f0:	9002      	str	r0, [sp, #8]
 80037f2:	9006      	str	r0, [sp, #24]
 80037f4:	9107      	str	r1, [sp, #28]
 80037f6:	9104      	str	r1, [sp, #16]
 80037f8:	4808      	ldr	r0, [pc, #32]	; (800381c <siprintf+0x38>)
 80037fa:	4909      	ldr	r1, [pc, #36]	; (8003820 <siprintf+0x3c>)
 80037fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003800:	9105      	str	r1, [sp, #20]
 8003802:	6800      	ldr	r0, [r0, #0]
 8003804:	a902      	add	r1, sp, #8
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	f000 f92a 	bl	8003a60 <_svfiprintf_r>
 800380c:	2200      	movs	r2, #0
 800380e:	9b02      	ldr	r3, [sp, #8]
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	b01c      	add	sp, #112	; 0x70
 8003814:	f85d eb04 	ldr.w	lr, [sp], #4
 8003818:	b003      	add	sp, #12
 800381a:	4770      	bx	lr
 800381c:	20000010 	.word	0x20000010
 8003820:	ffff0208 	.word	0xffff0208

08003824 <strncmp>:
 8003824:	b510      	push	{r4, lr}
 8003826:	b16a      	cbz	r2, 8003844 <strncmp+0x20>
 8003828:	3901      	subs	r1, #1
 800382a:	1884      	adds	r4, r0, r2
 800382c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003830:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003834:	4293      	cmp	r3, r2
 8003836:	d103      	bne.n	8003840 <strncmp+0x1c>
 8003838:	42a0      	cmp	r0, r4
 800383a:	d001      	beq.n	8003840 <strncmp+0x1c>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f5      	bne.n	800382c <strncmp+0x8>
 8003840:	1a98      	subs	r0, r3, r2
 8003842:	bd10      	pop	{r4, pc}
 8003844:	4610      	mov	r0, r2
 8003846:	e7fc      	b.n	8003842 <strncmp+0x1e>

08003848 <_strtol_l.isra.0>:
 8003848:	2b01      	cmp	r3, #1
 800384a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800384e:	4686      	mov	lr, r0
 8003850:	d001      	beq.n	8003856 <_strtol_l.isra.0+0xe>
 8003852:	2b24      	cmp	r3, #36	; 0x24
 8003854:	d906      	bls.n	8003864 <_strtol_l.isra.0+0x1c>
 8003856:	f7ff ff85 	bl	8003764 <__errno>
 800385a:	2316      	movs	r3, #22
 800385c:	6003      	str	r3, [r0, #0]
 800385e:	2000      	movs	r0, #0
 8003860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003864:	468c      	mov	ip, r1
 8003866:	4e3a      	ldr	r6, [pc, #232]	; (8003950 <_strtol_l.isra.0+0x108>)
 8003868:	4660      	mov	r0, ip
 800386a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800386e:	5da5      	ldrb	r5, [r4, r6]
 8003870:	f015 0508 	ands.w	r5, r5, #8
 8003874:	d1f8      	bne.n	8003868 <_strtol_l.isra.0+0x20>
 8003876:	2c2d      	cmp	r4, #45	; 0x2d
 8003878:	d133      	bne.n	80038e2 <_strtol_l.isra.0+0x9a>
 800387a:	f04f 0801 	mov.w	r8, #1
 800387e:	f89c 4000 	ldrb.w	r4, [ip]
 8003882:	f100 0c02 	add.w	ip, r0, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d05d      	beq.n	8003946 <_strtol_l.isra.0+0xfe>
 800388a:	2b10      	cmp	r3, #16
 800388c:	d10c      	bne.n	80038a8 <_strtol_l.isra.0+0x60>
 800388e:	2c30      	cmp	r4, #48	; 0x30
 8003890:	d10a      	bne.n	80038a8 <_strtol_l.isra.0+0x60>
 8003892:	f89c 0000 	ldrb.w	r0, [ip]
 8003896:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800389a:	2858      	cmp	r0, #88	; 0x58
 800389c:	d14e      	bne.n	800393c <_strtol_l.isra.0+0xf4>
 800389e:	2310      	movs	r3, #16
 80038a0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80038a4:	f10c 0c02 	add.w	ip, ip, #2
 80038a8:	2500      	movs	r5, #0
 80038aa:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80038ae:	3f01      	subs	r7, #1
 80038b0:	fbb7 f9f3 	udiv	r9, r7, r3
 80038b4:	4628      	mov	r0, r5
 80038b6:	fb03 7a19 	mls	sl, r3, r9, r7
 80038ba:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80038be:	2e09      	cmp	r6, #9
 80038c0:	d818      	bhi.n	80038f4 <_strtol_l.isra.0+0xac>
 80038c2:	4634      	mov	r4, r6
 80038c4:	42a3      	cmp	r3, r4
 80038c6:	dd24      	ble.n	8003912 <_strtol_l.isra.0+0xca>
 80038c8:	2d00      	cmp	r5, #0
 80038ca:	db1f      	blt.n	800390c <_strtol_l.isra.0+0xc4>
 80038cc:	4581      	cmp	r9, r0
 80038ce:	d31d      	bcc.n	800390c <_strtol_l.isra.0+0xc4>
 80038d0:	d101      	bne.n	80038d6 <_strtol_l.isra.0+0x8e>
 80038d2:	45a2      	cmp	sl, r4
 80038d4:	db1a      	blt.n	800390c <_strtol_l.isra.0+0xc4>
 80038d6:	2501      	movs	r5, #1
 80038d8:	fb00 4003 	mla	r0, r0, r3, r4
 80038dc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80038e0:	e7eb      	b.n	80038ba <_strtol_l.isra.0+0x72>
 80038e2:	2c2b      	cmp	r4, #43	; 0x2b
 80038e4:	bf08      	it	eq
 80038e6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80038ea:	46a8      	mov	r8, r5
 80038ec:	bf08      	it	eq
 80038ee:	f100 0c02 	addeq.w	ip, r0, #2
 80038f2:	e7c8      	b.n	8003886 <_strtol_l.isra.0+0x3e>
 80038f4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80038f8:	2e19      	cmp	r6, #25
 80038fa:	d801      	bhi.n	8003900 <_strtol_l.isra.0+0xb8>
 80038fc:	3c37      	subs	r4, #55	; 0x37
 80038fe:	e7e1      	b.n	80038c4 <_strtol_l.isra.0+0x7c>
 8003900:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003904:	2e19      	cmp	r6, #25
 8003906:	d804      	bhi.n	8003912 <_strtol_l.isra.0+0xca>
 8003908:	3c57      	subs	r4, #87	; 0x57
 800390a:	e7db      	b.n	80038c4 <_strtol_l.isra.0+0x7c>
 800390c:	f04f 35ff 	mov.w	r5, #4294967295
 8003910:	e7e4      	b.n	80038dc <_strtol_l.isra.0+0x94>
 8003912:	2d00      	cmp	r5, #0
 8003914:	da08      	bge.n	8003928 <_strtol_l.isra.0+0xe0>
 8003916:	2322      	movs	r3, #34	; 0x22
 8003918:	4638      	mov	r0, r7
 800391a:	f8ce 3000 	str.w	r3, [lr]
 800391e:	2a00      	cmp	r2, #0
 8003920:	d09e      	beq.n	8003860 <_strtol_l.isra.0+0x18>
 8003922:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003926:	e007      	b.n	8003938 <_strtol_l.isra.0+0xf0>
 8003928:	f1b8 0f00 	cmp.w	r8, #0
 800392c:	d000      	beq.n	8003930 <_strtol_l.isra.0+0xe8>
 800392e:	4240      	negs	r0, r0
 8003930:	2a00      	cmp	r2, #0
 8003932:	d095      	beq.n	8003860 <_strtol_l.isra.0+0x18>
 8003934:	2d00      	cmp	r5, #0
 8003936:	d1f4      	bne.n	8003922 <_strtol_l.isra.0+0xda>
 8003938:	6011      	str	r1, [r2, #0]
 800393a:	e791      	b.n	8003860 <_strtol_l.isra.0+0x18>
 800393c:	2430      	movs	r4, #48	; 0x30
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1b2      	bne.n	80038a8 <_strtol_l.isra.0+0x60>
 8003942:	2308      	movs	r3, #8
 8003944:	e7b0      	b.n	80038a8 <_strtol_l.isra.0+0x60>
 8003946:	2c30      	cmp	r4, #48	; 0x30
 8003948:	d0a3      	beq.n	8003892 <_strtol_l.isra.0+0x4a>
 800394a:	230a      	movs	r3, #10
 800394c:	e7ac      	b.n	80038a8 <_strtol_l.isra.0+0x60>
 800394e:	bf00      	nop
 8003950:	0800433d 	.word	0x0800433d

08003954 <strtol>:
 8003954:	4613      	mov	r3, r2
 8003956:	460a      	mov	r2, r1
 8003958:	4601      	mov	r1, r0
 800395a:	4802      	ldr	r0, [pc, #8]	; (8003964 <strtol+0x10>)
 800395c:	6800      	ldr	r0, [r0, #0]
 800395e:	f7ff bf73 	b.w	8003848 <_strtol_l.isra.0>
 8003962:	bf00      	nop
 8003964:	20000010 	.word	0x20000010

08003968 <_vsiprintf_r>:
 8003968:	b500      	push	{lr}
 800396a:	b09b      	sub	sp, #108	; 0x6c
 800396c:	9100      	str	r1, [sp, #0]
 800396e:	9104      	str	r1, [sp, #16]
 8003970:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003974:	9105      	str	r1, [sp, #20]
 8003976:	9102      	str	r1, [sp, #8]
 8003978:	4905      	ldr	r1, [pc, #20]	; (8003990 <_vsiprintf_r+0x28>)
 800397a:	9103      	str	r1, [sp, #12]
 800397c:	4669      	mov	r1, sp
 800397e:	f000 f86f 	bl	8003a60 <_svfiprintf_r>
 8003982:	2200      	movs	r2, #0
 8003984:	9b00      	ldr	r3, [sp, #0]
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	b01b      	add	sp, #108	; 0x6c
 800398a:	f85d fb04 	ldr.w	pc, [sp], #4
 800398e:	bf00      	nop
 8003990:	ffff0208 	.word	0xffff0208

08003994 <vsiprintf>:
 8003994:	4613      	mov	r3, r2
 8003996:	460a      	mov	r2, r1
 8003998:	4601      	mov	r1, r0
 800399a:	4802      	ldr	r0, [pc, #8]	; (80039a4 <vsiprintf+0x10>)
 800399c:	6800      	ldr	r0, [r0, #0]
 800399e:	f7ff bfe3 	b.w	8003968 <_vsiprintf_r>
 80039a2:	bf00      	nop
 80039a4:	20000010 	.word	0x20000010

080039a8 <__ssputs_r>:
 80039a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039ac:	688e      	ldr	r6, [r1, #8]
 80039ae:	4682      	mov	sl, r0
 80039b0:	429e      	cmp	r6, r3
 80039b2:	460c      	mov	r4, r1
 80039b4:	4690      	mov	r8, r2
 80039b6:	461f      	mov	r7, r3
 80039b8:	d838      	bhi.n	8003a2c <__ssputs_r+0x84>
 80039ba:	898a      	ldrh	r2, [r1, #12]
 80039bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039c0:	d032      	beq.n	8003a28 <__ssputs_r+0x80>
 80039c2:	6825      	ldr	r5, [r4, #0]
 80039c4:	6909      	ldr	r1, [r1, #16]
 80039c6:	3301      	adds	r3, #1
 80039c8:	eba5 0901 	sub.w	r9, r5, r1
 80039cc:	6965      	ldr	r5, [r4, #20]
 80039ce:	444b      	add	r3, r9
 80039d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039d8:	106d      	asrs	r5, r5, #1
 80039da:	429d      	cmp	r5, r3
 80039dc:	bf38      	it	cc
 80039de:	461d      	movcc	r5, r3
 80039e0:	0553      	lsls	r3, r2, #21
 80039e2:	d531      	bpl.n	8003a48 <__ssputs_r+0xa0>
 80039e4:	4629      	mov	r1, r5
 80039e6:	f000 fb45 	bl	8004074 <_malloc_r>
 80039ea:	4606      	mov	r6, r0
 80039ec:	b950      	cbnz	r0, 8003a04 <__ssputs_r+0x5c>
 80039ee:	230c      	movs	r3, #12
 80039f0:	f04f 30ff 	mov.w	r0, #4294967295
 80039f4:	f8ca 3000 	str.w	r3, [sl]
 80039f8:	89a3      	ldrh	r3, [r4, #12]
 80039fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039fe:	81a3      	strh	r3, [r4, #12]
 8003a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a04:	464a      	mov	r2, r9
 8003a06:	6921      	ldr	r1, [r4, #16]
 8003a08:	f7ff fed6 	bl	80037b8 <memcpy>
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a16:	81a3      	strh	r3, [r4, #12]
 8003a18:	6126      	str	r6, [r4, #16]
 8003a1a:	444e      	add	r6, r9
 8003a1c:	6026      	str	r6, [r4, #0]
 8003a1e:	463e      	mov	r6, r7
 8003a20:	6165      	str	r5, [r4, #20]
 8003a22:	eba5 0509 	sub.w	r5, r5, r9
 8003a26:	60a5      	str	r5, [r4, #8]
 8003a28:	42be      	cmp	r6, r7
 8003a2a:	d900      	bls.n	8003a2e <__ssputs_r+0x86>
 8003a2c:	463e      	mov	r6, r7
 8003a2e:	4632      	mov	r2, r6
 8003a30:	4641      	mov	r1, r8
 8003a32:	6820      	ldr	r0, [r4, #0]
 8003a34:	f000 fab8 	bl	8003fa8 <memmove>
 8003a38:	68a3      	ldr	r3, [r4, #8]
 8003a3a:	6822      	ldr	r2, [r4, #0]
 8003a3c:	1b9b      	subs	r3, r3, r6
 8003a3e:	4432      	add	r2, r6
 8003a40:	2000      	movs	r0, #0
 8003a42:	60a3      	str	r3, [r4, #8]
 8003a44:	6022      	str	r2, [r4, #0]
 8003a46:	e7db      	b.n	8003a00 <__ssputs_r+0x58>
 8003a48:	462a      	mov	r2, r5
 8003a4a:	f000 fb6d 	bl	8004128 <_realloc_r>
 8003a4e:	4606      	mov	r6, r0
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d1e1      	bne.n	8003a18 <__ssputs_r+0x70>
 8003a54:	4650      	mov	r0, sl
 8003a56:	6921      	ldr	r1, [r4, #16]
 8003a58:	f000 fac0 	bl	8003fdc <_free_r>
 8003a5c:	e7c7      	b.n	80039ee <__ssputs_r+0x46>
	...

08003a60 <_svfiprintf_r>:
 8003a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a64:	4698      	mov	r8, r3
 8003a66:	898b      	ldrh	r3, [r1, #12]
 8003a68:	4607      	mov	r7, r0
 8003a6a:	061b      	lsls	r3, r3, #24
 8003a6c:	460d      	mov	r5, r1
 8003a6e:	4614      	mov	r4, r2
 8003a70:	b09d      	sub	sp, #116	; 0x74
 8003a72:	d50e      	bpl.n	8003a92 <_svfiprintf_r+0x32>
 8003a74:	690b      	ldr	r3, [r1, #16]
 8003a76:	b963      	cbnz	r3, 8003a92 <_svfiprintf_r+0x32>
 8003a78:	2140      	movs	r1, #64	; 0x40
 8003a7a:	f000 fafb 	bl	8004074 <_malloc_r>
 8003a7e:	6028      	str	r0, [r5, #0]
 8003a80:	6128      	str	r0, [r5, #16]
 8003a82:	b920      	cbnz	r0, 8003a8e <_svfiprintf_r+0x2e>
 8003a84:	230c      	movs	r3, #12
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8c:	e0d1      	b.n	8003c32 <_svfiprintf_r+0x1d2>
 8003a8e:	2340      	movs	r3, #64	; 0x40
 8003a90:	616b      	str	r3, [r5, #20]
 8003a92:	2300      	movs	r3, #0
 8003a94:	9309      	str	r3, [sp, #36]	; 0x24
 8003a96:	2320      	movs	r3, #32
 8003a98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a9c:	2330      	movs	r3, #48	; 0x30
 8003a9e:	f04f 0901 	mov.w	r9, #1
 8003aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aa6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c4c <_svfiprintf_r+0x1ec>
 8003aaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003aae:	4623      	mov	r3, r4
 8003ab0:	469a      	mov	sl, r3
 8003ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ab6:	b10a      	cbz	r2, 8003abc <_svfiprintf_r+0x5c>
 8003ab8:	2a25      	cmp	r2, #37	; 0x25
 8003aba:	d1f9      	bne.n	8003ab0 <_svfiprintf_r+0x50>
 8003abc:	ebba 0b04 	subs.w	fp, sl, r4
 8003ac0:	d00b      	beq.n	8003ada <_svfiprintf_r+0x7a>
 8003ac2:	465b      	mov	r3, fp
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	4638      	mov	r0, r7
 8003aca:	f7ff ff6d 	bl	80039a8 <__ssputs_r>
 8003ace:	3001      	adds	r0, #1
 8003ad0:	f000 80aa 	beq.w	8003c28 <_svfiprintf_r+0x1c8>
 8003ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ad6:	445a      	add	r2, fp
 8003ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8003ada:	f89a 3000 	ldrb.w	r3, [sl]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80a2 	beq.w	8003c28 <_svfiprintf_r+0x1c8>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aee:	f10a 0a01 	add.w	sl, sl, #1
 8003af2:	9304      	str	r3, [sp, #16]
 8003af4:	9307      	str	r3, [sp, #28]
 8003af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003afa:	931a      	str	r3, [sp, #104]	; 0x68
 8003afc:	4654      	mov	r4, sl
 8003afe:	2205      	movs	r2, #5
 8003b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b04:	4851      	ldr	r0, [pc, #324]	; (8003c4c <_svfiprintf_r+0x1ec>)
 8003b06:	f000 fa41 	bl	8003f8c <memchr>
 8003b0a:	9a04      	ldr	r2, [sp, #16]
 8003b0c:	b9d8      	cbnz	r0, 8003b46 <_svfiprintf_r+0xe6>
 8003b0e:	06d0      	lsls	r0, r2, #27
 8003b10:	bf44      	itt	mi
 8003b12:	2320      	movmi	r3, #32
 8003b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b18:	0711      	lsls	r1, r2, #28
 8003b1a:	bf44      	itt	mi
 8003b1c:	232b      	movmi	r3, #43	; 0x2b
 8003b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b22:	f89a 3000 	ldrb.w	r3, [sl]
 8003b26:	2b2a      	cmp	r3, #42	; 0x2a
 8003b28:	d015      	beq.n	8003b56 <_svfiprintf_r+0xf6>
 8003b2a:	4654      	mov	r4, sl
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f04f 0c0a 	mov.w	ip, #10
 8003b32:	9a07      	ldr	r2, [sp, #28]
 8003b34:	4621      	mov	r1, r4
 8003b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b3a:	3b30      	subs	r3, #48	; 0x30
 8003b3c:	2b09      	cmp	r3, #9
 8003b3e:	d94e      	bls.n	8003bde <_svfiprintf_r+0x17e>
 8003b40:	b1b0      	cbz	r0, 8003b70 <_svfiprintf_r+0x110>
 8003b42:	9207      	str	r2, [sp, #28]
 8003b44:	e014      	b.n	8003b70 <_svfiprintf_r+0x110>
 8003b46:	eba0 0308 	sub.w	r3, r0, r8
 8003b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	46a2      	mov	sl, r4
 8003b52:	9304      	str	r3, [sp, #16]
 8003b54:	e7d2      	b.n	8003afc <_svfiprintf_r+0x9c>
 8003b56:	9b03      	ldr	r3, [sp, #12]
 8003b58:	1d19      	adds	r1, r3, #4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	9103      	str	r1, [sp, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bfbb      	ittet	lt
 8003b62:	425b      	neglt	r3, r3
 8003b64:	f042 0202 	orrlt.w	r2, r2, #2
 8003b68:	9307      	strge	r3, [sp, #28]
 8003b6a:	9307      	strlt	r3, [sp, #28]
 8003b6c:	bfb8      	it	lt
 8003b6e:	9204      	strlt	r2, [sp, #16]
 8003b70:	7823      	ldrb	r3, [r4, #0]
 8003b72:	2b2e      	cmp	r3, #46	; 0x2e
 8003b74:	d10c      	bne.n	8003b90 <_svfiprintf_r+0x130>
 8003b76:	7863      	ldrb	r3, [r4, #1]
 8003b78:	2b2a      	cmp	r3, #42	; 0x2a
 8003b7a:	d135      	bne.n	8003be8 <_svfiprintf_r+0x188>
 8003b7c:	9b03      	ldr	r3, [sp, #12]
 8003b7e:	3402      	adds	r4, #2
 8003b80:	1d1a      	adds	r2, r3, #4
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	9203      	str	r2, [sp, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bfb8      	it	lt
 8003b8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b8e:	9305      	str	r3, [sp, #20]
 8003b90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c5c <_svfiprintf_r+0x1fc>
 8003b94:	2203      	movs	r2, #3
 8003b96:	4650      	mov	r0, sl
 8003b98:	7821      	ldrb	r1, [r4, #0]
 8003b9a:	f000 f9f7 	bl	8003f8c <memchr>
 8003b9e:	b140      	cbz	r0, 8003bb2 <_svfiprintf_r+0x152>
 8003ba0:	2340      	movs	r3, #64	; 0x40
 8003ba2:	eba0 000a 	sub.w	r0, r0, sl
 8003ba6:	fa03 f000 	lsl.w	r0, r3, r0
 8003baa:	9b04      	ldr	r3, [sp, #16]
 8003bac:	3401      	adds	r4, #1
 8003bae:	4303      	orrs	r3, r0
 8003bb0:	9304      	str	r3, [sp, #16]
 8003bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bb6:	2206      	movs	r2, #6
 8003bb8:	4825      	ldr	r0, [pc, #148]	; (8003c50 <_svfiprintf_r+0x1f0>)
 8003bba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bbe:	f000 f9e5 	bl	8003f8c <memchr>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d038      	beq.n	8003c38 <_svfiprintf_r+0x1d8>
 8003bc6:	4b23      	ldr	r3, [pc, #140]	; (8003c54 <_svfiprintf_r+0x1f4>)
 8003bc8:	bb1b      	cbnz	r3, 8003c12 <_svfiprintf_r+0x1b2>
 8003bca:	9b03      	ldr	r3, [sp, #12]
 8003bcc:	3307      	adds	r3, #7
 8003bce:	f023 0307 	bic.w	r3, r3, #7
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	9303      	str	r3, [sp, #12]
 8003bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bd8:	4433      	add	r3, r6
 8003bda:	9309      	str	r3, [sp, #36]	; 0x24
 8003bdc:	e767      	b.n	8003aae <_svfiprintf_r+0x4e>
 8003bde:	460c      	mov	r4, r1
 8003be0:	2001      	movs	r0, #1
 8003be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003be6:	e7a5      	b.n	8003b34 <_svfiprintf_r+0xd4>
 8003be8:	2300      	movs	r3, #0
 8003bea:	f04f 0c0a 	mov.w	ip, #10
 8003bee:	4619      	mov	r1, r3
 8003bf0:	3401      	adds	r4, #1
 8003bf2:	9305      	str	r3, [sp, #20]
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bfa:	3a30      	subs	r2, #48	; 0x30
 8003bfc:	2a09      	cmp	r2, #9
 8003bfe:	d903      	bls.n	8003c08 <_svfiprintf_r+0x1a8>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0c5      	beq.n	8003b90 <_svfiprintf_r+0x130>
 8003c04:	9105      	str	r1, [sp, #20]
 8003c06:	e7c3      	b.n	8003b90 <_svfiprintf_r+0x130>
 8003c08:	4604      	mov	r4, r0
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c10:	e7f0      	b.n	8003bf4 <_svfiprintf_r+0x194>
 8003c12:	ab03      	add	r3, sp, #12
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	462a      	mov	r2, r5
 8003c18:	4638      	mov	r0, r7
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <_svfiprintf_r+0x1f8>)
 8003c1c:	a904      	add	r1, sp, #16
 8003c1e:	f3af 8000 	nop.w
 8003c22:	1c42      	adds	r2, r0, #1
 8003c24:	4606      	mov	r6, r0
 8003c26:	d1d6      	bne.n	8003bd6 <_svfiprintf_r+0x176>
 8003c28:	89ab      	ldrh	r3, [r5, #12]
 8003c2a:	065b      	lsls	r3, r3, #25
 8003c2c:	f53f af2c 	bmi.w	8003a88 <_svfiprintf_r+0x28>
 8003c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c32:	b01d      	add	sp, #116	; 0x74
 8003c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c38:	ab03      	add	r3, sp, #12
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	462a      	mov	r2, r5
 8003c3e:	4638      	mov	r0, r7
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <_svfiprintf_r+0x1f8>)
 8003c42:	a904      	add	r1, sp, #16
 8003c44:	f000 f87c 	bl	8003d40 <_printf_i>
 8003c48:	e7eb      	b.n	8003c22 <_svfiprintf_r+0x1c2>
 8003c4a:	bf00      	nop
 8003c4c:	0800443d 	.word	0x0800443d
 8003c50:	08004447 	.word	0x08004447
 8003c54:	00000000 	.word	0x00000000
 8003c58:	080039a9 	.word	0x080039a9
 8003c5c:	08004443 	.word	0x08004443

08003c60 <_printf_common>:
 8003c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	4616      	mov	r6, r2
 8003c66:	4699      	mov	r9, r3
 8003c68:	688a      	ldr	r2, [r1, #8]
 8003c6a:	690b      	ldr	r3, [r1, #16]
 8003c6c:	4607      	mov	r7, r0
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	bfb8      	it	lt
 8003c72:	4613      	movlt	r3, r2
 8003c74:	6033      	str	r3, [r6, #0]
 8003c76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c80:	b10a      	cbz	r2, 8003c86 <_printf_common+0x26>
 8003c82:	3301      	adds	r3, #1
 8003c84:	6033      	str	r3, [r6, #0]
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	0699      	lsls	r1, r3, #26
 8003c8a:	bf42      	ittt	mi
 8003c8c:	6833      	ldrmi	r3, [r6, #0]
 8003c8e:	3302      	addmi	r3, #2
 8003c90:	6033      	strmi	r3, [r6, #0]
 8003c92:	6825      	ldr	r5, [r4, #0]
 8003c94:	f015 0506 	ands.w	r5, r5, #6
 8003c98:	d106      	bne.n	8003ca8 <_printf_common+0x48>
 8003c9a:	f104 0a19 	add.w	sl, r4, #25
 8003c9e:	68e3      	ldr	r3, [r4, #12]
 8003ca0:	6832      	ldr	r2, [r6, #0]
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	42ab      	cmp	r3, r5
 8003ca6:	dc28      	bgt.n	8003cfa <_printf_common+0x9a>
 8003ca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cac:	1e13      	subs	r3, r2, #0
 8003cae:	6822      	ldr	r2, [r4, #0]
 8003cb0:	bf18      	it	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	0692      	lsls	r2, r2, #26
 8003cb6:	d42d      	bmi.n	8003d14 <_printf_common+0xb4>
 8003cb8:	4649      	mov	r1, r9
 8003cba:	4638      	mov	r0, r7
 8003cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cc0:	47c0      	blx	r8
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	d020      	beq.n	8003d08 <_printf_common+0xa8>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	68e5      	ldr	r5, [r4, #12]
 8003cca:	f003 0306 	and.w	r3, r3, #6
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	bf18      	it	ne
 8003cd2:	2500      	movne	r5, #0
 8003cd4:	6832      	ldr	r2, [r6, #0]
 8003cd6:	f04f 0600 	mov.w	r6, #0
 8003cda:	68a3      	ldr	r3, [r4, #8]
 8003cdc:	bf08      	it	eq
 8003cde:	1aad      	subeq	r5, r5, r2
 8003ce0:	6922      	ldr	r2, [r4, #16]
 8003ce2:	bf08      	it	eq
 8003ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	bfc4      	itt	gt
 8003cec:	1a9b      	subgt	r3, r3, r2
 8003cee:	18ed      	addgt	r5, r5, r3
 8003cf0:	341a      	adds	r4, #26
 8003cf2:	42b5      	cmp	r5, r6
 8003cf4:	d11a      	bne.n	8003d2c <_printf_common+0xcc>
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	e008      	b.n	8003d0c <_printf_common+0xac>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	4652      	mov	r2, sl
 8003cfe:	4649      	mov	r1, r9
 8003d00:	4638      	mov	r0, r7
 8003d02:	47c0      	blx	r8
 8003d04:	3001      	adds	r0, #1
 8003d06:	d103      	bne.n	8003d10 <_printf_common+0xb0>
 8003d08:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d10:	3501      	adds	r5, #1
 8003d12:	e7c4      	b.n	8003c9e <_printf_common+0x3e>
 8003d14:	2030      	movs	r0, #48	; 0x30
 8003d16:	18e1      	adds	r1, r4, r3
 8003d18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d22:	4422      	add	r2, r4
 8003d24:	3302      	adds	r3, #2
 8003d26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d2a:	e7c5      	b.n	8003cb8 <_printf_common+0x58>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	4622      	mov	r2, r4
 8003d30:	4649      	mov	r1, r9
 8003d32:	4638      	mov	r0, r7
 8003d34:	47c0      	blx	r8
 8003d36:	3001      	adds	r0, #1
 8003d38:	d0e6      	beq.n	8003d08 <_printf_common+0xa8>
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	e7d9      	b.n	8003cf2 <_printf_common+0x92>
	...

08003d40 <_printf_i>:
 8003d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d44:	460c      	mov	r4, r1
 8003d46:	7e27      	ldrb	r7, [r4, #24]
 8003d48:	4691      	mov	r9, r2
 8003d4a:	2f78      	cmp	r7, #120	; 0x78
 8003d4c:	4680      	mov	r8, r0
 8003d4e:	469a      	mov	sl, r3
 8003d50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d56:	d807      	bhi.n	8003d68 <_printf_i+0x28>
 8003d58:	2f62      	cmp	r7, #98	; 0x62
 8003d5a:	d80a      	bhi.n	8003d72 <_printf_i+0x32>
 8003d5c:	2f00      	cmp	r7, #0
 8003d5e:	f000 80d9 	beq.w	8003f14 <_printf_i+0x1d4>
 8003d62:	2f58      	cmp	r7, #88	; 0x58
 8003d64:	f000 80a4 	beq.w	8003eb0 <_printf_i+0x170>
 8003d68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d70:	e03a      	b.n	8003de8 <_printf_i+0xa8>
 8003d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d76:	2b15      	cmp	r3, #21
 8003d78:	d8f6      	bhi.n	8003d68 <_printf_i+0x28>
 8003d7a:	a001      	add	r0, pc, #4	; (adr r0, 8003d80 <_printf_i+0x40>)
 8003d7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003d80:	08003dd9 	.word	0x08003dd9
 8003d84:	08003ded 	.word	0x08003ded
 8003d88:	08003d69 	.word	0x08003d69
 8003d8c:	08003d69 	.word	0x08003d69
 8003d90:	08003d69 	.word	0x08003d69
 8003d94:	08003d69 	.word	0x08003d69
 8003d98:	08003ded 	.word	0x08003ded
 8003d9c:	08003d69 	.word	0x08003d69
 8003da0:	08003d69 	.word	0x08003d69
 8003da4:	08003d69 	.word	0x08003d69
 8003da8:	08003d69 	.word	0x08003d69
 8003dac:	08003efb 	.word	0x08003efb
 8003db0:	08003e1d 	.word	0x08003e1d
 8003db4:	08003edd 	.word	0x08003edd
 8003db8:	08003d69 	.word	0x08003d69
 8003dbc:	08003d69 	.word	0x08003d69
 8003dc0:	08003f1d 	.word	0x08003f1d
 8003dc4:	08003d69 	.word	0x08003d69
 8003dc8:	08003e1d 	.word	0x08003e1d
 8003dcc:	08003d69 	.word	0x08003d69
 8003dd0:	08003d69 	.word	0x08003d69
 8003dd4:	08003ee5 	.word	0x08003ee5
 8003dd8:	680b      	ldr	r3, [r1, #0]
 8003dda:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003dde:	1d1a      	adds	r2, r3, #4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	600a      	str	r2, [r1, #0]
 8003de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0a4      	b.n	8003f36 <_printf_i+0x1f6>
 8003dec:	6825      	ldr	r5, [r4, #0]
 8003dee:	6808      	ldr	r0, [r1, #0]
 8003df0:	062e      	lsls	r6, r5, #24
 8003df2:	f100 0304 	add.w	r3, r0, #4
 8003df6:	d50a      	bpl.n	8003e0e <_printf_i+0xce>
 8003df8:	6805      	ldr	r5, [r0, #0]
 8003dfa:	600b      	str	r3, [r1, #0]
 8003dfc:	2d00      	cmp	r5, #0
 8003dfe:	da03      	bge.n	8003e08 <_printf_i+0xc8>
 8003e00:	232d      	movs	r3, #45	; 0x2d
 8003e02:	426d      	negs	r5, r5
 8003e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e08:	230a      	movs	r3, #10
 8003e0a:	485e      	ldr	r0, [pc, #376]	; (8003f84 <_printf_i+0x244>)
 8003e0c:	e019      	b.n	8003e42 <_printf_i+0x102>
 8003e0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003e12:	6805      	ldr	r5, [r0, #0]
 8003e14:	600b      	str	r3, [r1, #0]
 8003e16:	bf18      	it	ne
 8003e18:	b22d      	sxthne	r5, r5
 8003e1a:	e7ef      	b.n	8003dfc <_printf_i+0xbc>
 8003e1c:	680b      	ldr	r3, [r1, #0]
 8003e1e:	6825      	ldr	r5, [r4, #0]
 8003e20:	1d18      	adds	r0, r3, #4
 8003e22:	6008      	str	r0, [r1, #0]
 8003e24:	0628      	lsls	r0, r5, #24
 8003e26:	d501      	bpl.n	8003e2c <_printf_i+0xec>
 8003e28:	681d      	ldr	r5, [r3, #0]
 8003e2a:	e002      	b.n	8003e32 <_printf_i+0xf2>
 8003e2c:	0669      	lsls	r1, r5, #25
 8003e2e:	d5fb      	bpl.n	8003e28 <_printf_i+0xe8>
 8003e30:	881d      	ldrh	r5, [r3, #0]
 8003e32:	2f6f      	cmp	r7, #111	; 0x6f
 8003e34:	bf0c      	ite	eq
 8003e36:	2308      	moveq	r3, #8
 8003e38:	230a      	movne	r3, #10
 8003e3a:	4852      	ldr	r0, [pc, #328]	; (8003f84 <_printf_i+0x244>)
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e42:	6866      	ldr	r6, [r4, #4]
 8003e44:	2e00      	cmp	r6, #0
 8003e46:	bfa8      	it	ge
 8003e48:	6821      	ldrge	r1, [r4, #0]
 8003e4a:	60a6      	str	r6, [r4, #8]
 8003e4c:	bfa4      	itt	ge
 8003e4e:	f021 0104 	bicge.w	r1, r1, #4
 8003e52:	6021      	strge	r1, [r4, #0]
 8003e54:	b90d      	cbnz	r5, 8003e5a <_printf_i+0x11a>
 8003e56:	2e00      	cmp	r6, #0
 8003e58:	d04d      	beq.n	8003ef6 <_printf_i+0x1b6>
 8003e5a:	4616      	mov	r6, r2
 8003e5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e60:	fb03 5711 	mls	r7, r3, r1, r5
 8003e64:	5dc7      	ldrb	r7, [r0, r7]
 8003e66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e6a:	462f      	mov	r7, r5
 8003e6c:	42bb      	cmp	r3, r7
 8003e6e:	460d      	mov	r5, r1
 8003e70:	d9f4      	bls.n	8003e5c <_printf_i+0x11c>
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d10b      	bne.n	8003e8e <_printf_i+0x14e>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	07df      	lsls	r7, r3, #31
 8003e7a:	d508      	bpl.n	8003e8e <_printf_i+0x14e>
 8003e7c:	6923      	ldr	r3, [r4, #16]
 8003e7e:	6861      	ldr	r1, [r4, #4]
 8003e80:	4299      	cmp	r1, r3
 8003e82:	bfde      	ittt	le
 8003e84:	2330      	movle	r3, #48	; 0x30
 8003e86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e8e:	1b92      	subs	r2, r2, r6
 8003e90:	6122      	str	r2, [r4, #16]
 8003e92:	464b      	mov	r3, r9
 8003e94:	4621      	mov	r1, r4
 8003e96:	4640      	mov	r0, r8
 8003e98:	f8cd a000 	str.w	sl, [sp]
 8003e9c:	aa03      	add	r2, sp, #12
 8003e9e:	f7ff fedf 	bl	8003c60 <_printf_common>
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	d14c      	bne.n	8003f40 <_printf_i+0x200>
 8003ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eaa:	b004      	add	sp, #16
 8003eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb0:	4834      	ldr	r0, [pc, #208]	; (8003f84 <_printf_i+0x244>)
 8003eb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003eb6:	680e      	ldr	r6, [r1, #0]
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ebe:	061f      	lsls	r7, r3, #24
 8003ec0:	600e      	str	r6, [r1, #0]
 8003ec2:	d514      	bpl.n	8003eee <_printf_i+0x1ae>
 8003ec4:	07d9      	lsls	r1, r3, #31
 8003ec6:	bf44      	itt	mi
 8003ec8:	f043 0320 	orrmi.w	r3, r3, #32
 8003ecc:	6023      	strmi	r3, [r4, #0]
 8003ece:	b91d      	cbnz	r5, 8003ed8 <_printf_i+0x198>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	f023 0320 	bic.w	r3, r3, #32
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	2310      	movs	r3, #16
 8003eda:	e7af      	b.n	8003e3c <_printf_i+0xfc>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	f043 0320 	orr.w	r3, r3, #32
 8003ee2:	6023      	str	r3, [r4, #0]
 8003ee4:	2378      	movs	r3, #120	; 0x78
 8003ee6:	4828      	ldr	r0, [pc, #160]	; (8003f88 <_printf_i+0x248>)
 8003ee8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eec:	e7e3      	b.n	8003eb6 <_printf_i+0x176>
 8003eee:	065e      	lsls	r6, r3, #25
 8003ef0:	bf48      	it	mi
 8003ef2:	b2ad      	uxthmi	r5, r5
 8003ef4:	e7e6      	b.n	8003ec4 <_printf_i+0x184>
 8003ef6:	4616      	mov	r6, r2
 8003ef8:	e7bb      	b.n	8003e72 <_printf_i+0x132>
 8003efa:	680b      	ldr	r3, [r1, #0]
 8003efc:	6826      	ldr	r6, [r4, #0]
 8003efe:	1d1d      	adds	r5, r3, #4
 8003f00:	6960      	ldr	r0, [r4, #20]
 8003f02:	600d      	str	r5, [r1, #0]
 8003f04:	0635      	lsls	r5, r6, #24
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	d501      	bpl.n	8003f0e <_printf_i+0x1ce>
 8003f0a:	6018      	str	r0, [r3, #0]
 8003f0c:	e002      	b.n	8003f14 <_printf_i+0x1d4>
 8003f0e:	0671      	lsls	r1, r6, #25
 8003f10:	d5fb      	bpl.n	8003f0a <_printf_i+0x1ca>
 8003f12:	8018      	strh	r0, [r3, #0]
 8003f14:	2300      	movs	r3, #0
 8003f16:	4616      	mov	r6, r2
 8003f18:	6123      	str	r3, [r4, #16]
 8003f1a:	e7ba      	b.n	8003e92 <_printf_i+0x152>
 8003f1c:	680b      	ldr	r3, [r1, #0]
 8003f1e:	1d1a      	adds	r2, r3, #4
 8003f20:	600a      	str	r2, [r1, #0]
 8003f22:	681e      	ldr	r6, [r3, #0]
 8003f24:	2100      	movs	r1, #0
 8003f26:	4630      	mov	r0, r6
 8003f28:	6862      	ldr	r2, [r4, #4]
 8003f2a:	f000 f82f 	bl	8003f8c <memchr>
 8003f2e:	b108      	cbz	r0, 8003f34 <_printf_i+0x1f4>
 8003f30:	1b80      	subs	r0, r0, r6
 8003f32:	6060      	str	r0, [r4, #4]
 8003f34:	6863      	ldr	r3, [r4, #4]
 8003f36:	6123      	str	r3, [r4, #16]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f3e:	e7a8      	b.n	8003e92 <_printf_i+0x152>
 8003f40:	4632      	mov	r2, r6
 8003f42:	4649      	mov	r1, r9
 8003f44:	4640      	mov	r0, r8
 8003f46:	6923      	ldr	r3, [r4, #16]
 8003f48:	47d0      	blx	sl
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d0ab      	beq.n	8003ea6 <_printf_i+0x166>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	079b      	lsls	r3, r3, #30
 8003f52:	d413      	bmi.n	8003f7c <_printf_i+0x23c>
 8003f54:	68e0      	ldr	r0, [r4, #12]
 8003f56:	9b03      	ldr	r3, [sp, #12]
 8003f58:	4298      	cmp	r0, r3
 8003f5a:	bfb8      	it	lt
 8003f5c:	4618      	movlt	r0, r3
 8003f5e:	e7a4      	b.n	8003eaa <_printf_i+0x16a>
 8003f60:	2301      	movs	r3, #1
 8003f62:	4632      	mov	r2, r6
 8003f64:	4649      	mov	r1, r9
 8003f66:	4640      	mov	r0, r8
 8003f68:	47d0      	blx	sl
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d09b      	beq.n	8003ea6 <_printf_i+0x166>
 8003f6e:	3501      	adds	r5, #1
 8003f70:	68e3      	ldr	r3, [r4, #12]
 8003f72:	9903      	ldr	r1, [sp, #12]
 8003f74:	1a5b      	subs	r3, r3, r1
 8003f76:	42ab      	cmp	r3, r5
 8003f78:	dcf2      	bgt.n	8003f60 <_printf_i+0x220>
 8003f7a:	e7eb      	b.n	8003f54 <_printf_i+0x214>
 8003f7c:	2500      	movs	r5, #0
 8003f7e:	f104 0619 	add.w	r6, r4, #25
 8003f82:	e7f5      	b.n	8003f70 <_printf_i+0x230>
 8003f84:	0800444e 	.word	0x0800444e
 8003f88:	0800445f 	.word	0x0800445f

08003f8c <memchr>:
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	b2c9      	uxtb	r1, r1
 8003f92:	4402      	add	r2, r0
 8003f94:	4293      	cmp	r3, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	d101      	bne.n	8003f9e <memchr+0x12>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e003      	b.n	8003fa6 <memchr+0x1a>
 8003f9e:	7804      	ldrb	r4, [r0, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	428c      	cmp	r4, r1
 8003fa4:	d1f6      	bne.n	8003f94 <memchr+0x8>
 8003fa6:	bd10      	pop	{r4, pc}

08003fa8 <memmove>:
 8003fa8:	4288      	cmp	r0, r1
 8003faa:	b510      	push	{r4, lr}
 8003fac:	eb01 0402 	add.w	r4, r1, r2
 8003fb0:	d902      	bls.n	8003fb8 <memmove+0x10>
 8003fb2:	4284      	cmp	r4, r0
 8003fb4:	4623      	mov	r3, r4
 8003fb6:	d807      	bhi.n	8003fc8 <memmove+0x20>
 8003fb8:	1e43      	subs	r3, r0, #1
 8003fba:	42a1      	cmp	r1, r4
 8003fbc:	d008      	beq.n	8003fd0 <memmove+0x28>
 8003fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fc6:	e7f8      	b.n	8003fba <memmove+0x12>
 8003fc8:	4601      	mov	r1, r0
 8003fca:	4402      	add	r2, r0
 8003fcc:	428a      	cmp	r2, r1
 8003fce:	d100      	bne.n	8003fd2 <memmove+0x2a>
 8003fd0:	bd10      	pop	{r4, pc}
 8003fd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fda:	e7f7      	b.n	8003fcc <memmove+0x24>

08003fdc <_free_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	4605      	mov	r5, r0
 8003fe0:	2900      	cmp	r1, #0
 8003fe2:	d043      	beq.n	800406c <_free_r+0x90>
 8003fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fe8:	1f0c      	subs	r4, r1, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bfb8      	it	lt
 8003fee:	18e4      	addlt	r4, r4, r3
 8003ff0:	f000 f8d0 	bl	8004194 <__malloc_lock>
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <_free_r+0x94>)
 8003ff6:	6813      	ldr	r3, [r2, #0]
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	b933      	cbnz	r3, 800400a <_free_r+0x2e>
 8003ffc:	6063      	str	r3, [r4, #4]
 8003ffe:	6014      	str	r4, [r2, #0]
 8004000:	4628      	mov	r0, r5
 8004002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004006:	f000 b8cb 	b.w	80041a0 <__malloc_unlock>
 800400a:	42a3      	cmp	r3, r4
 800400c:	d90a      	bls.n	8004024 <_free_r+0x48>
 800400e:	6821      	ldr	r1, [r4, #0]
 8004010:	1862      	adds	r2, r4, r1
 8004012:	4293      	cmp	r3, r2
 8004014:	bf01      	itttt	eq
 8004016:	681a      	ldreq	r2, [r3, #0]
 8004018:	685b      	ldreq	r3, [r3, #4]
 800401a:	1852      	addeq	r2, r2, r1
 800401c:	6022      	streq	r2, [r4, #0]
 800401e:	6063      	str	r3, [r4, #4]
 8004020:	6004      	str	r4, [r0, #0]
 8004022:	e7ed      	b.n	8004000 <_free_r+0x24>
 8004024:	461a      	mov	r2, r3
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	b10b      	cbz	r3, 800402e <_free_r+0x52>
 800402a:	42a3      	cmp	r3, r4
 800402c:	d9fa      	bls.n	8004024 <_free_r+0x48>
 800402e:	6811      	ldr	r1, [r2, #0]
 8004030:	1850      	adds	r0, r2, r1
 8004032:	42a0      	cmp	r0, r4
 8004034:	d10b      	bne.n	800404e <_free_r+0x72>
 8004036:	6820      	ldr	r0, [r4, #0]
 8004038:	4401      	add	r1, r0
 800403a:	1850      	adds	r0, r2, r1
 800403c:	4283      	cmp	r3, r0
 800403e:	6011      	str	r1, [r2, #0]
 8004040:	d1de      	bne.n	8004000 <_free_r+0x24>
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4401      	add	r1, r0
 8004048:	6011      	str	r1, [r2, #0]
 800404a:	6053      	str	r3, [r2, #4]
 800404c:	e7d8      	b.n	8004000 <_free_r+0x24>
 800404e:	d902      	bls.n	8004056 <_free_r+0x7a>
 8004050:	230c      	movs	r3, #12
 8004052:	602b      	str	r3, [r5, #0]
 8004054:	e7d4      	b.n	8004000 <_free_r+0x24>
 8004056:	6820      	ldr	r0, [r4, #0]
 8004058:	1821      	adds	r1, r4, r0
 800405a:	428b      	cmp	r3, r1
 800405c:	bf01      	itttt	eq
 800405e:	6819      	ldreq	r1, [r3, #0]
 8004060:	685b      	ldreq	r3, [r3, #4]
 8004062:	1809      	addeq	r1, r1, r0
 8004064:	6021      	streq	r1, [r4, #0]
 8004066:	6063      	str	r3, [r4, #4]
 8004068:	6054      	str	r4, [r2, #4]
 800406a:	e7c9      	b.n	8004000 <_free_r+0x24>
 800406c:	bd38      	pop	{r3, r4, r5, pc}
 800406e:	bf00      	nop
 8004070:	200000ac 	.word	0x200000ac

08004074 <_malloc_r>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	1ccd      	adds	r5, r1, #3
 8004078:	f025 0503 	bic.w	r5, r5, #3
 800407c:	3508      	adds	r5, #8
 800407e:	2d0c      	cmp	r5, #12
 8004080:	bf38      	it	cc
 8004082:	250c      	movcc	r5, #12
 8004084:	2d00      	cmp	r5, #0
 8004086:	4606      	mov	r6, r0
 8004088:	db01      	blt.n	800408e <_malloc_r+0x1a>
 800408a:	42a9      	cmp	r1, r5
 800408c:	d903      	bls.n	8004096 <_malloc_r+0x22>
 800408e:	230c      	movs	r3, #12
 8004090:	6033      	str	r3, [r6, #0]
 8004092:	2000      	movs	r0, #0
 8004094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004096:	f000 f87d 	bl	8004194 <__malloc_lock>
 800409a:	4921      	ldr	r1, [pc, #132]	; (8004120 <_malloc_r+0xac>)
 800409c:	680a      	ldr	r2, [r1, #0]
 800409e:	4614      	mov	r4, r2
 80040a0:	b99c      	cbnz	r4, 80040ca <_malloc_r+0x56>
 80040a2:	4f20      	ldr	r7, [pc, #128]	; (8004124 <_malloc_r+0xb0>)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	b923      	cbnz	r3, 80040b2 <_malloc_r+0x3e>
 80040a8:	4621      	mov	r1, r4
 80040aa:	4630      	mov	r0, r6
 80040ac:	f000 f862 	bl	8004174 <_sbrk_r>
 80040b0:	6038      	str	r0, [r7, #0]
 80040b2:	4629      	mov	r1, r5
 80040b4:	4630      	mov	r0, r6
 80040b6:	f000 f85d 	bl	8004174 <_sbrk_r>
 80040ba:	1c43      	adds	r3, r0, #1
 80040bc:	d123      	bne.n	8004106 <_malloc_r+0x92>
 80040be:	230c      	movs	r3, #12
 80040c0:	4630      	mov	r0, r6
 80040c2:	6033      	str	r3, [r6, #0]
 80040c4:	f000 f86c 	bl	80041a0 <__malloc_unlock>
 80040c8:	e7e3      	b.n	8004092 <_malloc_r+0x1e>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	1b5b      	subs	r3, r3, r5
 80040ce:	d417      	bmi.n	8004100 <_malloc_r+0x8c>
 80040d0:	2b0b      	cmp	r3, #11
 80040d2:	d903      	bls.n	80040dc <_malloc_r+0x68>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	441c      	add	r4, r3
 80040d8:	6025      	str	r5, [r4, #0]
 80040da:	e004      	b.n	80040e6 <_malloc_r+0x72>
 80040dc:	6863      	ldr	r3, [r4, #4]
 80040de:	42a2      	cmp	r2, r4
 80040e0:	bf0c      	ite	eq
 80040e2:	600b      	streq	r3, [r1, #0]
 80040e4:	6053      	strne	r3, [r2, #4]
 80040e6:	4630      	mov	r0, r6
 80040e8:	f000 f85a 	bl	80041a0 <__malloc_unlock>
 80040ec:	f104 000b 	add.w	r0, r4, #11
 80040f0:	1d23      	adds	r3, r4, #4
 80040f2:	f020 0007 	bic.w	r0, r0, #7
 80040f6:	1ac2      	subs	r2, r0, r3
 80040f8:	d0cc      	beq.n	8004094 <_malloc_r+0x20>
 80040fa:	1a1b      	subs	r3, r3, r0
 80040fc:	50a3      	str	r3, [r4, r2]
 80040fe:	e7c9      	b.n	8004094 <_malloc_r+0x20>
 8004100:	4622      	mov	r2, r4
 8004102:	6864      	ldr	r4, [r4, #4]
 8004104:	e7cc      	b.n	80040a0 <_malloc_r+0x2c>
 8004106:	1cc4      	adds	r4, r0, #3
 8004108:	f024 0403 	bic.w	r4, r4, #3
 800410c:	42a0      	cmp	r0, r4
 800410e:	d0e3      	beq.n	80040d8 <_malloc_r+0x64>
 8004110:	1a21      	subs	r1, r4, r0
 8004112:	4630      	mov	r0, r6
 8004114:	f000 f82e 	bl	8004174 <_sbrk_r>
 8004118:	3001      	adds	r0, #1
 800411a:	d1dd      	bne.n	80040d8 <_malloc_r+0x64>
 800411c:	e7cf      	b.n	80040be <_malloc_r+0x4a>
 800411e:	bf00      	nop
 8004120:	200000ac 	.word	0x200000ac
 8004124:	200000b0 	.word	0x200000b0

08004128 <_realloc_r>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	4607      	mov	r7, r0
 800412c:	4614      	mov	r4, r2
 800412e:	460e      	mov	r6, r1
 8004130:	b921      	cbnz	r1, 800413c <_realloc_r+0x14>
 8004132:	4611      	mov	r1, r2
 8004134:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004138:	f7ff bf9c 	b.w	8004074 <_malloc_r>
 800413c:	b922      	cbnz	r2, 8004148 <_realloc_r+0x20>
 800413e:	f7ff ff4d 	bl	8003fdc <_free_r>
 8004142:	4625      	mov	r5, r4
 8004144:	4628      	mov	r0, r5
 8004146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004148:	f000 f830 	bl	80041ac <_malloc_usable_size_r>
 800414c:	42a0      	cmp	r0, r4
 800414e:	d20f      	bcs.n	8004170 <_realloc_r+0x48>
 8004150:	4621      	mov	r1, r4
 8004152:	4638      	mov	r0, r7
 8004154:	f7ff ff8e 	bl	8004074 <_malloc_r>
 8004158:	4605      	mov	r5, r0
 800415a:	2800      	cmp	r0, #0
 800415c:	d0f2      	beq.n	8004144 <_realloc_r+0x1c>
 800415e:	4631      	mov	r1, r6
 8004160:	4622      	mov	r2, r4
 8004162:	f7ff fb29 	bl	80037b8 <memcpy>
 8004166:	4631      	mov	r1, r6
 8004168:	4638      	mov	r0, r7
 800416a:	f7ff ff37 	bl	8003fdc <_free_r>
 800416e:	e7e9      	b.n	8004144 <_realloc_r+0x1c>
 8004170:	4635      	mov	r5, r6
 8004172:	e7e7      	b.n	8004144 <_realloc_r+0x1c>

08004174 <_sbrk_r>:
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	2300      	movs	r3, #0
 8004178:	4d05      	ldr	r5, [pc, #20]	; (8004190 <_sbrk_r+0x1c>)
 800417a:	4604      	mov	r4, r0
 800417c:	4608      	mov	r0, r1
 800417e:	602b      	str	r3, [r5, #0]
 8004180:	f7fc ff9c 	bl	80010bc <_sbrk>
 8004184:	1c43      	adds	r3, r0, #1
 8004186:	d102      	bne.n	800418e <_sbrk_r+0x1a>
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	b103      	cbz	r3, 800418e <_sbrk_r+0x1a>
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	bd38      	pop	{r3, r4, r5, pc}
 8004190:	2000279c 	.word	0x2000279c

08004194 <__malloc_lock>:
 8004194:	4801      	ldr	r0, [pc, #4]	; (800419c <__malloc_lock+0x8>)
 8004196:	f000 b811 	b.w	80041bc <__retarget_lock_acquire_recursive>
 800419a:	bf00      	nop
 800419c:	200027a4 	.word	0x200027a4

080041a0 <__malloc_unlock>:
 80041a0:	4801      	ldr	r0, [pc, #4]	; (80041a8 <__malloc_unlock+0x8>)
 80041a2:	f000 b80c 	b.w	80041be <__retarget_lock_release_recursive>
 80041a6:	bf00      	nop
 80041a8:	200027a4 	.word	0x200027a4

080041ac <_malloc_usable_size_r>:
 80041ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b0:	1f18      	subs	r0, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bfbc      	itt	lt
 80041b6:	580b      	ldrlt	r3, [r1, r0]
 80041b8:	18c0      	addlt	r0, r0, r3
 80041ba:	4770      	bx	lr

080041bc <__retarget_lock_acquire_recursive>:
 80041bc:	4770      	bx	lr

080041be <__retarget_lock_release_recursive>:
 80041be:	4770      	bx	lr

080041c0 <_init>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	bf00      	nop
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr

080041cc <_fini>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr
