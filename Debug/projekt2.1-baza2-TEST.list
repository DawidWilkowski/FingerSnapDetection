
projekt2.1-baza2-TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004efc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005298  08005298  000202dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005298  08005298  000202dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005298  08005298  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  080052a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001828  200002e0  0800557c  000202e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001b08  0800557c  00021b08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000935e  00000000  00000000  00020305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd0  00000000  00000000  00029663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002b238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bb5  00000000  00000000  0002c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009638  00000000  00000000  00043e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088671  00000000  00000000  0004d48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5afe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f8  00000000  00000000  000d5b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002e0 	.word	0x200002e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ff4 	.word	0x08004ff4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002e4 	.word	0x200002e4
 800014c:	08004ff4 	.word	0x08004ff4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <send>:


// =============== ZMIENNE ===============
// ====================== USART SEND ======================

void send(char *format, ...) {
 8000a4c:	b40f      	push	{r0, r1, r2, r3}
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b09c      	sub	sp, #112	; 0x70
 8000a52:	af00      	add	r7, sp, #0

	char tmp_s[100];
	va_list arglist;
	va_start(arglist, format);
 8000a54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a58:	603b      	str	r3, [r7, #0]
	vsprintf(tmp_s, format, arglist);
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 fdd9 	bl	8004618 <vsiprintf>
	va_end(arglist);

	uint8_t idx = EmptyTx;
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <send+0xe0>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	for (int i = 0; i < strlen(tmp_s); i++) {
 8000a70:	2300      	movs	r3, #0
 8000a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8000a74:	e00f      	b.n	8000a96 <send+0x4a>
		BUFF_TX[idx] = tmp_s[i];
 8000a76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a7a:	1d39      	adds	r1, r7, #4
 8000a7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000a7e:	440a      	add	r2, r1
 8000a80:	7811      	ldrb	r1, [r2, #0]
 8000a82:	4a2b      	ldr	r2, [pc, #172]	; (8000b30 <send+0xe4>)
 8000a84:	54d1      	strb	r1, [r2, r3]
		idx++;
 8000a86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	for (int i = 0; i < strlen(tmp_s); i++) {
 8000a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a92:	3301      	adds	r3, #1
 8000a94:	66bb      	str	r3, [r7, #104]	; 0x68
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fb63 	bl	8000164 <strlen>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d8e7      	bhi.n	8000a76 <send+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa6:	b672      	cpsid	i
}
 8000aa8:	bf00      	nop
		if (idx >= TX_BUFF_SIZE)
			idx = 0;
	}
	__disable_irq();
	if (BusyTx == EmptyTx 
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <send+0xe8>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <send+0xe0>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d129      	bne.n	8000b0e <send+0xc2>
	&& __HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE) == SET) {
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <send+0xec>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac4:	2b80      	cmp	r3, #128	; 0x80
 8000ac6:	d122      	bne.n	8000b0e <send+0xc2>
		EmptyTx = idx;
 8000ac8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <send+0xe0>)
 8000ad0:	801a      	strh	r2, [r3, #0]
		temp = BUFF_TX[BusyTx];
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <send+0xe8>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <send+0xe4>)
 8000adc:	5c9b      	ldrb	r3, [r3, r2]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <send+0xf0>)
 8000ae2:	701a      	strb	r2, [r3, #0]
		BusyTx++;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <send+0xe8>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	3301      	adds	r3, #1
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <send+0xe8>)
 8000af0:	801a      	strh	r2, [r3, #0]
		if (BusyTx >= TX_BUFF_SIZE)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <send+0xe8>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	2bff      	cmp	r3, #255	; 0xff
 8000afa:	d902      	bls.n	8000b02 <send+0xb6>
			BusyTx = 0;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <send+0xe8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &temp, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	490d      	ldr	r1, [pc, #52]	; (8000b3c <send+0xf0>)
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <send+0xec>)
 8000b08:	f003 f81f 	bl	8003b4a <HAL_UART_Transmit_IT>
 8000b0c:	e004      	b.n	8000b18 <send+0xcc>
	} else {
		EmptyTx = idx;
 8000b0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <send+0xe0>)
 8000b16:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b18:	b662      	cpsie	i
}
 8000b1a:	bf00      	nop
	}
	__enable_irq();
}
 8000b1c:	bf00      	nop
 8000b1e:	3770      	adds	r7, #112	; 0x70
 8000b20:	46bd      	mov	sp, r7
 8000b22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b26:	b004      	add	sp, #16
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000300 	.word	0x20000300
 8000b30:	200009f4 	.word	0x200009f4
 8000b34:	20000302 	.word	0x20000302
 8000b38:	200009b0 	.word	0x200009b0
 8000b3c:	20000824 	.word	0x20000824

08000b40 <HAL_UART_TxCpltCallback>:

// ====================== USART SEND ======================
// ====================== CALLBACK ======================

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <HAL_UART_TxCpltCallback+0x64>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d124      	bne.n	8000b9a <HAL_UART_TxCpltCallback+0x5a>
		if (BusyTx != EmptyTx) {
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_UART_TxCpltCallback+0x68>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_UART_TxCpltCallback+0x6c>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d01c      	beq.n	8000b9a <HAL_UART_TxCpltCallback+0x5a>
			temp = BUFF_TX[BusyTx];
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_UART_TxCpltCallback+0x68>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_UART_TxCpltCallback+0x70>)
 8000b6a:	5c9b      	ldrb	r3, [r3, r2]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_UART_TxCpltCallback+0x74>)
 8000b70:	701a      	strb	r2, [r3, #0]
			BusyTx++;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_UART_TxCpltCallback+0x68>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	3301      	adds	r3, #1
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_UART_TxCpltCallback+0x68>)
 8000b7e:	801a      	strh	r2, [r3, #0]
			if (BusyTx >= TX_BUFF_SIZE)
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_UART_TxCpltCallback+0x68>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	2bff      	cmp	r3, #255	; 0xff
 8000b88:	d902      	bls.n	8000b90 <HAL_UART_TxCpltCallback+0x50>
				BusyTx = 0;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <HAL_UART_TxCpltCallback+0x68>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &temp, 1);
 8000b90:	2201      	movs	r2, #1
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <HAL_UART_TxCpltCallback+0x74>)
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <HAL_UART_TxCpltCallback+0x64>)
 8000b96:	f002 ffd8 	bl	8003b4a <HAL_UART_Transmit_IT>
		}
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200009b0 	.word	0x200009b0
 8000ba8:	20000302 	.word	0x20000302
 8000bac:	20000300 	.word	0x20000300
 8000bb0:	200009f4 	.word	0x200009f4
 8000bb4:	20000824 	.word	0x20000824

08000bb8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <HAL_UART_RxCpltCallback+0x4c>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d10e      	bne.n	8000be6 <HAL_UART_RxCpltCallback+0x2e>
		EmptyRx++;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_UART_RxCpltCallback+0x50>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_UART_RxCpltCallback+0x50>)
 8000bd4:	801a      	strh	r2, [r3, #0]
		if (EmptyRx >= RX_BUFF_SIZE)
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_UART_RxCpltCallback+0x50>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	2bff      	cmp	r3, #255	; 0xff
 8000bde:	d902      	bls.n	8000be6 <HAL_UART_RxCpltCallback+0x2e>
			EmptyRx = 0;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_UART_RxCpltCallback+0x50>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	801a      	strh	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &BUFF_RX[EmptyRx], 1);
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_UART_RxCpltCallback+0x50>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <HAL_UART_RxCpltCallback+0x54>)
 8000bf0:	4413      	add	r3, r2
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <HAL_UART_RxCpltCallback+0x4c>)
 8000bf8:	f002 ffeb 	bl	8003bd2 <HAL_UART_Receive_IT>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200009b0 	.word	0x200009b0
 8000c08:	200002fc 	.word	0x200002fc
 8000c0c:	200003c4 	.word	0x200003c4

08000c10 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc1) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	dataReady = 1;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
	dataIndex = 0;
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	801a      	strh	r2, [r3, #0]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000306 	.word	0x20000306
 8000c34:	20000304 	.word	0x20000304

08000c38 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	dataReady = 1;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_ADC_ConvCpltCallback+0x20>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
	dataIndex = 1023;
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_ADC_ConvCpltCallback+0x24>)
 8000c48:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000c4c:	801a      	strh	r2, [r3, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	20000306 	.word	0x20000306
 8000c5c:	20000304 	.word	0x20000304

08000c60 <analizaKomendy>:

// ====================== CALLBACK ======================

//========== ANALIZA KOMENDY ============
	void analizaKomendy(char cmd[]) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

		if (!strcmp(cmd, "Tryb1")) {
 8000c68:	4931      	ldr	r1, [pc, #196]	; (8000d30 <analizaKomendy+0xd0>)
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fa70 	bl	8000150 <strcmp>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d103      	bne.n	8000c7e <analizaKomendy+0x1e>
			trybPracy = 1;
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <analizaKomendy+0xd4>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
				}
		else {
			errorKomenda();

		}
	}
 8000c7c:	e053      	b.n	8000d26 <analizaKomendy+0xc6>
		} else if (!strcmp(cmd, "Tryb2")) {
 8000c7e:	492e      	ldr	r1, [pc, #184]	; (8000d38 <analizaKomendy+0xd8>)
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fa65 	bl	8000150 <strcmp>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d103      	bne.n	8000c94 <analizaKomendy+0x34>
			trybPracy = 2;
 8000c8c:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <analizaKomendy+0xd4>)
 8000c8e:	2202      	movs	r2, #2
 8000c90:	701a      	strb	r2, [r3, #0]
	}
 8000c92:	e048      	b.n	8000d26 <analizaKomendy+0xc6>
		} else if (!strcmp(cmd, "PokazTryb")) {
 8000c94:	4929      	ldr	r1, [pc, #164]	; (8000d3c <analizaKomendy+0xdc>)
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fa5a 	bl	8000150 <strcmp>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10a      	bne.n	8000cb8 <analizaKomendy+0x58>
			if (trybPracy == 1)
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <analizaKomendy+0xd4>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d102      	bne.n	8000cb2 <analizaKomendy+0x52>
			wyslijTrybPracyJeden();
 8000cac:	f000 f972 	bl	8000f94 <wyslijTrybPracyJeden>
	}
 8000cb0:	e039      	b.n	8000d26 <analizaKomendy+0xc6>
			wyslijTrybPracyDwa();
 8000cb2:	f000 f98d 	bl	8000fd0 <wyslijTrybPracyDwa>
	}
 8000cb6:	e036      	b.n	8000d26 <analizaKomendy+0xc6>
		else if(!strcmp(cmd, "GRANICA")){
 8000cb8:	4921      	ldr	r1, [pc, #132]	; (8000d40 <analizaKomendy+0xe0>)
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fa48 	bl	8000150 <strcmp>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d102      	bne.n	8000ccc <analizaKomendy+0x6c>
			wyslijGranica();
 8000cc6:	f000 f9a1 	bl	800100c <wyslijGranica>
	}
 8000cca:	e02c      	b.n	8000d26 <analizaKomendy+0xc6>
		else if(!strncmp(cmd, "SETGRANICA", 9)) {
 8000ccc:	2209      	movs	r2, #9
 8000cce:	491d      	ldr	r1, [pc, #116]	; (8000d44 <analizaKomendy+0xe4>)
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f003 fbe9 	bl	80044a8 <strncmp>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d122      	bne.n	8000d22 <analizaKomendy+0xc2>
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <analizaKomendy+0xe8>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	461a      	mov	r2, r3
					memcpy(odebranaGranica, &buforRamki[20], 4);
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <analizaKomendy+0xec>)
 8000ce4:	601a      	str	r2, [r3, #0]
					odebranaGranica[4]= '\n';
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <analizaKomendy+0xec>)
 8000ce8:	220a      	movs	r2, #10
 8000cea:	711a      	strb	r2, [r3, #4]
					granica = atoi(odebranaGranica);
 8000cec:	4817      	ldr	r0, [pc, #92]	; (8000d4c <analizaKomendy+0xec>)
 8000cee:	f003 fb77 	bl	80043e0 <atoi>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <analizaKomendy+0xf0>)
 8000cf8:	801a      	strh	r2, [r3, #0]
					if(granica >2000&&granica <4000){
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <analizaKomendy+0xf0>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d04:	d908      	bls.n	8000d18 <analizaKomendy+0xb8>
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <analizaKomendy+0xf0>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d10:	d202      	bcs.n	8000d18 <analizaKomendy+0xb8>
					wyslijGranica();
 8000d12:	f000 f97b 	bl	800100c <wyslijGranica>
	}
 8000d16:	e006      	b.n	8000d26 <analizaKomendy+0xc6>
						granica = 3300;
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <analizaKomendy+0xf0>)
 8000d1a:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000d1e:	801a      	strh	r2, [r3, #0]
	}
 8000d20:	e001      	b.n	8000d26 <analizaKomendy+0xc6>
			errorKomenda();
 8000d22:	f000 f883 	bl	8000e2c <errorKomenda>
	}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	0800500c 	.word	0x0800500c
 8000d34:	20000002 	.word	0x20000002
 8000d38:	08005014 	.word	0x08005014
 8000d3c:	0800501c 	.word	0x0800501c
 8000d40:	08005028 	.word	0x08005028
 8000d44:	08005030 	.word	0x08005030
 8000d48:	200004c4 	.word	0x200004c4
 8000d4c:	200008a8 	.word	0x200008a8
 8000d50:	20000000 	.word	0x20000000

08000d54 <dekoduj>:
//========== ANALIZA KOMENDY ============
//========= DEKODOWANIE ============
	void dekoduj() {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
		if (znak == '1') {
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <dekoduj+0x8c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b31      	cmp	r3, #49	; 0x31
 8000d5e:	d10f      	bne.n	8000d80 <dekoduj+0x2c>
			buforRamki[dlugoscRamki] = '[';
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <dekoduj+0x90>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <dekoduj+0x94>)
 8000d68:	215b      	movs	r1, #91	; 0x5b
 8000d6a:	5499      	strb	r1, [r3, r2]
			dlugoscRamki++;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <dekoduj+0x90>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <dekoduj+0x90>)
 8000d76:	801a      	strh	r2, [r3, #0]
			stan = 1;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <dekoduj+0x98>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
		} else {
			stan = 0;
			errorKodowanie();
		}

	}
 8000d7e:	e02c      	b.n	8000dda <dekoduj+0x86>
		} else if (znak == '2') {
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <dekoduj+0x8c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b32      	cmp	r3, #50	; 0x32
 8000d86:	d10f      	bne.n	8000da8 <dekoduj+0x54>
			buforRamki[dlugoscRamki] = ']';
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <dekoduj+0x90>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <dekoduj+0x94>)
 8000d90:	215d      	movs	r1, #93	; 0x5d
 8000d92:	5499      	strb	r1, [r3, r2]
			dlugoscRamki++;
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <dekoduj+0x90>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <dekoduj+0x90>)
 8000d9e:	801a      	strh	r2, [r3, #0]
			stan = 1;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <dekoduj+0x98>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
	}
 8000da6:	e018      	b.n	8000dda <dekoduj+0x86>
		} else if (znak == '3') {
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <dekoduj+0x8c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b33      	cmp	r3, #51	; 0x33
 8000dae:	d10f      	bne.n	8000dd0 <dekoduj+0x7c>
			buforRamki[dlugoscRamki] = '!';
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <dekoduj+0x90>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <dekoduj+0x94>)
 8000db8:	2121      	movs	r1, #33	; 0x21
 8000dba:	5499      	strb	r1, [r3, r2]
			dlugoscRamki++;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <dekoduj+0x90>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <dekoduj+0x90>)
 8000dc6:	801a      	strh	r2, [r3, #0]
			stan = 1;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <dekoduj+0x98>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	701a      	strb	r2, [r3, #0]
	}
 8000dce:	e004      	b.n	8000dda <dekoduj+0x86>
			stan = 0;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <dekoduj+0x98>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
			errorKodowanie();
 8000dd6:	f000 f847 	bl	8000e68 <errorKodowanie>
	}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000089c 	.word	0x2000089c
 8000de4:	2000030c 	.word	0x2000030c
 8000de8:	200004c4 	.word	0x200004c4
 8000dec:	2000030a 	.word	0x2000030a

08000df0 <errorSumaKontrolna>:
//========= DEKODOWANIE ============
//========= ERROR ========
	void errorSumaKontrolna() {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af02      	add	r7, sp, #8
		sprintf(wiadomosc, "[%s%s%dNieprawidlowaSumaKontrolna]\r\n",device_address,source_address,sumaNadOdb+2724);
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <errorSumaKontrolna+0x28>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f603 23a4 	addw	r3, r3, #2724	; 0xaa4
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <errorSumaKontrolna+0x2c>)
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <errorSumaKontrolna+0x30>)
 8000e04:	4907      	ldr	r1, [pc, #28]	; (8000e24 <errorSumaKontrolna+0x34>)
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <errorSumaKontrolna+0x38>)
 8000e08:	f003 fb2e 	bl	8004468 <siprintf>
		send(wiadomosc);
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <errorSumaKontrolna+0x38>)
 8000e0e:	f7ff fe1d 	bl	8000a4c <send>
	}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000000c 	.word	0x2000000c
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000004 	.word	0x20000004
 8000e24:	0800503c 	.word	0x0800503c
 8000e28:	200008b0 	.word	0x200008b0

08000e2c <errorKomenda>:
	void errorKomenda(){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af02      	add	r7, sp, #8
		sprintf(wiadomosc,"[%s%s%dNiepoprawnaKomenda]\r\n",device_address,source_address,sumaNadOdb+1859);
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <errorKomenda+0x28>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f203 7343 	addw	r3, r3, #1859	; 0x743
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <errorKomenda+0x2c>)
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <errorKomenda+0x30>)
 8000e40:	4907      	ldr	r1, [pc, #28]	; (8000e60 <errorKomenda+0x34>)
 8000e42:	4808      	ldr	r0, [pc, #32]	; (8000e64 <errorKomenda+0x38>)
 8000e44:	f003 fb10 	bl	8004468 <siprintf>
		send(wiadomosc);
 8000e48:	4806      	ldr	r0, [pc, #24]	; (8000e64 <errorKomenda+0x38>)
 8000e4a:	f7ff fdff 	bl	8000a4c <send>
	}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000004 	.word	0x20000004
 8000e60:	08005064 	.word	0x08005064
 8000e64:	200008b0 	.word	0x200008b0

08000e68 <errorKodowanie>:
	void errorKodowanie(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af02      	add	r7, sp, #8
		sprintf(wiadomosc,"[%s%s%dBladKodowania]\r\n",device_address,source_address,sumaNadOdb+1296);
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <errorKodowanie+0x28>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <errorKodowanie+0x2c>)
 8000e7a:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <errorKodowanie+0x30>)
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <errorKodowanie+0x34>)
 8000e7e:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <errorKodowanie+0x38>)
 8000e80:	f003 faf2 	bl	8004468 <siprintf>
		send(wiadomosc);
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <errorKodowanie+0x38>)
 8000e86:	f7ff fde1 	bl	8000a4c <send>
	}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000000c 	.word	0x2000000c
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004
 8000e9c:	08005084 	.word	0x08005084
 8000ea0:	200008b0 	.word	0x200008b0

08000ea4 <start>:
//========== ERROR =======
//========== INFORMACJE ZWROTNE ========
	void start(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af02      	add	r7, sp, #8
		sprintf(wiadomosc,"[%s%s%dRozpoczynamPrace!]\r\n",device_address,source_address,sumaNadOdb+1720);
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <start+0x28>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <start+0x2c>)
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <start+0x30>)
 8000eb8:	4907      	ldr	r1, [pc, #28]	; (8000ed8 <start+0x34>)
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <start+0x38>)
 8000ebc:	f003 fad4 	bl	8004468 <siprintf>
		send(wiadomosc);
 8000ec0:	4806      	ldr	r0, [pc, #24]	; (8000edc <start+0x38>)
 8000ec2:	f7ff fdc3 	bl	8000a4c <send>
	}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000000c 	.word	0x2000000c
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004
 8000ed8:	0800509c 	.word	0x0800509c
 8000edc:	200008b0 	.word	0x200008b0

08000ee0 <wyslijPstrykJeden>:
	void wyslijPstrykJeden(){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af02      	add	r7, sp, #8
		sprintf(wiadomosc,"[%s%s%dPSTRYK1]\r\n",device_address,source_address,sumaNadOdb+542);
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <wyslijPstrykJeden+0x28>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <wyslijPstrykJeden+0x2c>)
 8000ef2:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <wyslijPstrykJeden+0x30>)
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <wyslijPstrykJeden+0x34>)
 8000ef6:	4808      	ldr	r0, [pc, #32]	; (8000f18 <wyslijPstrykJeden+0x38>)
 8000ef8:	f003 fab6 	bl	8004468 <siprintf>
		send(wiadomosc);
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <wyslijPstrykJeden+0x38>)
 8000efe:	f7ff fda5 	bl	8000a4c <send>
	}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	2000000c 	.word	0x2000000c
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000004 	.word	0x20000004
 8000f14:	080050b8 	.word	0x080050b8
 8000f18:	200008b0 	.word	0x200008b0

08000f1c <wyslijPstrykDwa>:
	void wyslijPstrykDwa(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af02      	add	r7, sp, #8
		sprintf(wiadomosc,"[%s%s%dPSTRYK2]\r\n",device_address,source_address,sumaNadOdb+543);
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <wyslijPstrykDwa+0x28>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <wyslijPstrykDwa+0x2c>)
 8000f2e:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <wyslijPstrykDwa+0x30>)
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <wyslijPstrykDwa+0x34>)
 8000f32:	4808      	ldr	r0, [pc, #32]	; (8000f54 <wyslijPstrykDwa+0x38>)
 8000f34:	f003 fa98 	bl	8004468 <siprintf>
		send(wiadomosc);
 8000f38:	4806      	ldr	r0, [pc, #24]	; (8000f54 <wyslijPstrykDwa+0x38>)
 8000f3a:	f7ff fd87 	bl	8000a4c <send>
	}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000000c 	.word	0x2000000c
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004
 8000f50:	080050cc 	.word	0x080050cc
 8000f54:	200008b0 	.word	0x200008b0

08000f58 <odebranoRamke>:
	void odebranoRamke(){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af02      	add	r7, sp, #8
		sprintf(wiadomosc,"[%s%s%dOdebranoRamke]\r\n",device_address,source_address,sumaNadOdb+1306);
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <odebranoRamke+0x28>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f203 531a 	addw	r3, r3, #1306	; 0x51a
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <odebranoRamke+0x2c>)
 8000f6a:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <odebranoRamke+0x30>)
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <odebranoRamke+0x34>)
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <odebranoRamke+0x38>)
 8000f70:	f003 fa7a 	bl	8004468 <siprintf>
		send(wiadomosc);
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <odebranoRamke+0x38>)
 8000f76:	f7ff fd69 	bl	8000a4c <send>
	}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000000c 	.word	0x2000000c
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000004 	.word	0x20000004
 8000f8c:	080050e0 	.word	0x080050e0
 8000f90:	200008b0 	.word	0x200008b0

08000f94 <wyslijTrybPracyJeden>:
	void wyslijTrybPracyJeden(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af02      	add	r7, sp, #8
		sprintf(wiadomosc,"[%s%s%dTryb1PSTRYK]\r\n",device_address,source_address,sumaNadOdb+959);
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <wyslijTrybPracyJeden+0x28>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f203 33bf 	addw	r3, r3, #959	; 0x3bf
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <wyslijTrybPracyJeden+0x2c>)
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <wyslijTrybPracyJeden+0x30>)
 8000fa8:	4907      	ldr	r1, [pc, #28]	; (8000fc8 <wyslijTrybPracyJeden+0x34>)
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <wyslijTrybPracyJeden+0x38>)
 8000fac:	f003 fa5c 	bl	8004468 <siprintf>
		send(wiadomosc);
 8000fb0:	4806      	ldr	r0, [pc, #24]	; (8000fcc <wyslijTrybPracyJeden+0x38>)
 8000fb2:	f7ff fd4b 	bl	8000a4c <send>
	}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000000c 	.word	0x2000000c
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000004 	.word	0x20000004
 8000fc8:	080050f8 	.word	0x080050f8
 8000fcc:	200008b0 	.word	0x200008b0

08000fd0 <wyslijTrybPracyDwa>:
	void wyslijTrybPracyDwa(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af02      	add	r7, sp, #8
		sprintf(wiadomosc,"[%s%s%dTryb2PSTRYK]\r\n",device_address,source_address,sumaNadOdb+960);
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <wyslijTrybPracyDwa+0x28>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <wyslijTrybPracyDwa+0x2c>)
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <wyslijTrybPracyDwa+0x30>)
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <wyslijTrybPracyDwa+0x34>)
 8000fe6:	4808      	ldr	r0, [pc, #32]	; (8001008 <wyslijTrybPracyDwa+0x38>)
 8000fe8:	f003 fa3e 	bl	8004468 <siprintf>
		send(wiadomosc);
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <wyslijTrybPracyDwa+0x38>)
 8000fee:	f7ff fd2d 	bl	8000a4c <send>
	}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000000c 	.word	0x2000000c
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000004 	.word	0x20000004
 8001004:	08005110 	.word	0x08005110
 8001008:	200008b0 	.word	0x200008b0

0800100c <wyslijGranica>:
	void wyslijGranica(){
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af02      	add	r7, sp, #8
	int granicaTablica[4];
	int granicaKopia = granica;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <wyslijGranica+0xa0>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	61fb      	str	r3, [r7, #28]
	int sumaGranicaTablica = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
	for (int j = 3; j>=0; j--){//suma kontrolna z wpisanej granicy
 800101e:	2303      	movs	r3, #3
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e028      	b.n	8001076 <wyslijGranica+0x6a>
	granicaTablica[j] = granicaKopia % 10;// reszta z dzielenia przez 10 => przepisanie int do tablicy
 8001024:	69f9      	ldr	r1, [r7, #28]
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <wyslijGranica+0xa4>)
 8001028:	fb83 2301 	smull	r2, r3, r3, r1
 800102c:	109a      	asrs	r2, r3, #2
 800102e:	17cb      	asrs	r3, r1, #31
 8001030:	1ad2      	subs	r2, r2, r3
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	1aca      	subs	r2, r1, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	f107 0120 	add.w	r1, r7, #32
 8001044:	440b      	add	r3, r1
 8001046:	f843 2c1c 	str.w	r2, [r3, #-28]
	sumaGranicaTablica += granicaTablica[j] + 48;//do ascii
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	f107 0220 	add.w	r2, r7, #32
 8001052:	4413      	add	r3, r2
 8001054:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001058:	3330      	adds	r3, #48	; 0x30
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4413      	add	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
	granicaKopia/=10;
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <wyslijGranica+0xa4>)
 8001064:	fb82 1203 	smull	r1, r2, r2, r3
 8001068:	1092      	asrs	r2, r2, #2
 800106a:	17db      	asrs	r3, r3, #31
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	61fb      	str	r3, [r7, #28]
	for (int j = 3; j>=0; j--){//suma kontrolna z wpisanej granicy
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3b01      	subs	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	dad3      	bge.n	8001024 <wyslijGranica+0x18>
	}
	sprintf(wiadomosc,"[%s%s%dGRANICA%d]\r\n",device_address,source_address,sumaNadOdb+sumaGranicaTablica+501,granica);
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <wyslijGranica+0xa8>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	4413      	add	r3, r2
 8001084:	f203 13f5 	addw	r3, r3, #501	; 0x1f5
 8001088:	4a08      	ldr	r2, [pc, #32]	; (80010ac <wyslijGranica+0xa0>)
 800108a:	8812      	ldrh	r2, [r2, #0]
 800108c:	b292      	uxth	r2, r2
 800108e:	9201      	str	r2, [sp, #4]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <wyslijGranica+0xac>)
 8001094:	4a09      	ldr	r2, [pc, #36]	; (80010bc <wyslijGranica+0xb0>)
 8001096:	490a      	ldr	r1, [pc, #40]	; (80010c0 <wyslijGranica+0xb4>)
 8001098:	480a      	ldr	r0, [pc, #40]	; (80010c4 <wyslijGranica+0xb8>)
 800109a:	f003 f9e5 	bl	8004468 <siprintf>
	send(wiadomosc);
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <wyslijGranica+0xb8>)
 80010a0:	f7ff fcd4 	bl	8000a4c <send>
	}
 80010a4:	bf00      	nop
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000000 	.word	0x20000000
 80010b0:	66666667 	.word	0x66666667
 80010b4:	2000000c 	.word	0x2000000c
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000004 	.word	0x20000004
 80010c0:	08005128 	.word	0x08005128
 80010c4:	200008b0 	.word	0x200008b0

080010c8 <analyseData>:
//========== INFORMACJE ZWROTNE ========
//========== BADANIE PSTRYKNIECIA - Korelacja======
	void analyseData() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
			if (dataIndex == 0) {
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <analyseData+0x60>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10e      	bne.n	80010f6 <analyseData+0x2e>
				for (int i = 0; i < 1023; i++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	e005      	b.n	80010ea <analyseData+0x22>
					analyseStart(i);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f824 	bl	800112c <analyseStart>
				for (int i = 0; i < 1023; i++) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3301      	adds	r3, #1
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80010f0:	4293      	cmp	r3, r2
 80010f2:	ddf4      	ble.n	80010de <analyseData+0x16>
			} else if (dataIndex == 1023) {
				for (int i = 1023; i < 2048; i++) {
					analyseStart(i);
				}
			}
		}
 80010f4:	e014      	b.n	8001120 <analyseData+0x58>
			} else if (dataIndex == 1023) {
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <analyseData+0x60>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001100:	4293      	cmp	r3, r2
 8001102:	d10d      	bne.n	8001120 <analyseData+0x58>
				for (int i = 1023; i < 2048; i++) {
 8001104:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	e005      	b.n	8001118 <analyseData+0x50>
					analyseStart(i);
 800110c:	6838      	ldr	r0, [r7, #0]
 800110e:	f000 f80d 	bl	800112c <analyseStart>
				for (int i = 1023; i < 2048; i++) {
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800111e:	dbf5      	blt.n	800110c <analyseData+0x44>
		}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000304 	.word	0x20000304

0800112c <analyseStart>:
	void analyseStart(int i) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
		if(przekroczonoGranice==0){
 8001134:	4b37      	ldr	r3, [pc, #220]	; (8001214 <analyseStart+0xe8>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d166      	bne.n	800120a <analyseStart+0xde>
		if(BUFF_DATA[i]>granica){
 800113c:	4a36      	ldr	r2, [pc, #216]	; (8001218 <analyseStart+0xec>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b35      	ldr	r3, [pc, #212]	; (800121c <analyseStart+0xf0>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	b29b      	uxth	r3, r3
 800114c:	429a      	cmp	r2, r3
 800114e:	d95c      	bls.n	800120a <analyseStart+0xde>
			przekroczonoGranice=1;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <analyseStart+0xe8>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
			for(int j =i-50;j<i+100;j++){
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3b32      	subs	r3, #50	; 0x32
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e022      	b.n	80011a4 <analyseStart+0x78>
				if(j<0) j = 2048+j;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	da03      	bge.n	800116c <analyseStart+0x40>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800116a:	60fb      	str	r3, [r7, #12]
				if(j>2048) j =0;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001172:	dd01      	ble.n	8001178 <analyseStart+0x4c>
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
				pstrykniecie[count]=BUFF_DATA[j];
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <analyseStart+0xec>)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001180:	b299      	uxth	r1, r3
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <analyseStart+0xf4>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	b29b      	uxth	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <analyseStart+0xf8>)
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				count++;
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <analyseStart+0xf4>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b29b      	uxth	r3, r3
 8001196:	3301      	adds	r3, #1
 8001198:	b29a      	uxth	r2, r3
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <analyseStart+0xf4>)
 800119c:	801a      	strh	r2, [r3, #0]
			for(int j =i-50;j<i+100;j++){
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3301      	adds	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3363      	adds	r3, #99	; 0x63
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	ddd7      	ble.n	800115e <analyseStart+0x32>
				}
			if (wystepujeKorelacja()) {
 80011ae:	f000 f83f 	bl	8001230 <wystepujeKorelacja>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d01f      	beq.n	80011f8 <analyseStart+0xcc>
				przekroczonoGranice=0;
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <analyseStart+0xe8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
				if(trybPracy==1){wyslijPstrykJeden();}
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <analyseStart+0xfc>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d102      	bne.n	80011ce <analyseStart+0xa2>
 80011c8:	f7ff fe8a 	bl	8000ee0 <wyslijPstrykJeden>
 80011cc:	e01a      	b.n	8001204 <analyseStart+0xd8>
				else if (trybPracy==2){
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <analyseStart+0xfc>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d115      	bne.n	8001204 <analyseStart+0xd8>
					iloscPstryk++;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <analyseStart+0x100>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <analyseStart+0x100>)
 80011e2:	701a      	strb	r2, [r3, #0]
					if (iloscPstryk == 2 )
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <analyseStart+0x100>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d10b      	bne.n	8001204 <analyseStart+0xd8>
					{iloscPstryk = 0;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <analyseStart+0x100>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
					wyslijPstrykDwa();}
 80011f2:	f7ff fe93 	bl	8000f1c <wyslijPstrykDwa>
 80011f6:	e005      	b.n	8001204 <analyseStart+0xd8>
					}
				}

				else {
					przekroczonoGranice=0;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <analyseStart+0xe8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
					iloscPstryk = 0;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <analyseStart+0x100>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
				}
			count=0;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <analyseStart+0xf4>)
 8001206:	2200      	movs	r2, #0
 8001208:	801a      	strh	r2, [r3, #0]
	}}}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000314 	.word	0x20000314
 8001218:	20000af4 	.word	0x20000af4
 800121c:	20000000 	.word	0x20000000
 8001220:	20000308 	.word	0x20000308
 8001224:	200005c4 	.word	0x200005c4
 8001228:	20000002 	.word	0x20000002
 800122c:	20000315 	.word	0x20000315

08001230 <wystepujeKorelacja>:
	int wystepujeKorelacja() {
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
		double* wspolczynnik = korelacjaWzajemna();
 8001236:	f000 f827 	bl	8001288 <korelacjaWzajemna>
 800123a:	6038      	str	r0, [r7, #0]

			for (int k = 0; k <=150*2; k++) {
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	e017      	b.n	8001272 <wystepujeKorelacja+0x42>
				if (fabs(wspolczynnik[k]) > 0.50) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	4413      	add	r3, r2
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	4614      	mov	r4, r2
 8001250:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <wystepujeKorelacja+0x54>)
 800125a:	4620      	mov	r0, r4
 800125c:	4629      	mov	r1, r5
 800125e:	f7ff fbd5 	bl	8000a0c <__aeabi_dcmpgt>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <wystepujeKorelacja+0x3c>
					return 1;
 8001268:	2301      	movs	r3, #1
 800126a:	e007      	b.n	800127c <wystepujeKorelacja+0x4c>
			for (int k = 0; k <=150*2; k++) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3301      	adds	r3, #1
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001278:	dde3      	ble.n	8001242 <wystepujeKorelacja+0x12>
				}
			}

			return 0;
 800127a:	2300      	movs	r3, #0
	}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bdb0      	pop	{r4, r5, r7, pc}
 8001284:	3fe00000 	.word	0x3fe00000

08001288 <korelacjaWzajemna>:

	double* korelacjaWzajemna() {
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b099      	sub	sp, #100	; 0x64
 800128c:	af00      	add	r7, sp, #0
		double suma_x = 0.0;
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		double suma_y = 0.0;
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		double srednia_x = 0.0;
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double srednia_y = 0.0;
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double wyr_1, wyr_2, licznik;
		double kw_szereg_x = 0.0;
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		double kw_szereg_y = 0.0;
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		static double korelacja[20];
		int opoznienie, i;
		int opoznienie_max = 10;
 80012d6:	230a      	movs	r3, #10
 80012d8:	617b      	str	r3, [r7, #20]
		//liczenie sumy
		int z;
		for (z = 0; z < ilosc_probek; z++) {
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012de:	e024      	b.n	800132a <korelacjaWzajemna+0xa2>
			suma_x += wzor_pstrykniecia[z];
 80012e0:	4a97      	ldr	r2, [pc, #604]	; (8001540 <korelacjaWzajemna+0x2b8>)
 80012e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f895 	bl	8000418 <__aeabi_i2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80012f6:	f7fe ff43 	bl	8000180 <__adddf3>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			suma_y += pstrykniecie[z];
 8001302:	4a90      	ldr	r2, [pc, #576]	; (8001544 <korelacjaWzajemna+0x2bc>)
 8001304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f884 	bl	8000418 <__aeabi_i2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001318:	f7fe ff32 	bl	8000180 <__adddf3>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		for (z = 0; z < ilosc_probek; z++) {
 8001324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001326:	3301      	adds	r3, #1
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	2b95      	cmp	r3, #149	; 0x95
 800132e:	ddd7      	ble.n	80012e0 <korelacjaWzajemna+0x58>
		}
		//srednia
		srednia_x = suma_x / ilosc_probek;
 8001330:	a381      	add	r3, pc, #516	; (adr r3, 8001538 <korelacjaWzajemna+0x2b0>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800133a:	f7ff fa01 	bl	8000740 <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	e9c7 2308 	strd	r2, r3, [r7, #32]
		srednia_y = suma_y / ilosc_probek;
 8001346:	a37c      	add	r3, pc, #496	; (adr r3, 8001538 <korelacjaWzajemna+0x2b0>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001350:	f7ff f9f6 	bl	8000740 <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	e9c7 2306 	strd	r2, r3, [r7, #24]
		//korelacja
		for (opoznienie = -opoznienie_max; opoznienie <= opoznienie_max; opoznienie++) {
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	425b      	negs	r3, r3
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
 8001362:	e0dc      	b.n	800151e <korelacjaWzajemna+0x296>
			//od -10 do 10
			licznik = 0;
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			kw_szereg_x = 0;
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			kw_szereg_y = 0;
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			for (i = 0; i < ilosc_probek; i++) {
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
 800138c:	e0a4      	b.n	80014d8 <korelacjaWzajemna+0x250>

				int j = i - opoznienie;
 800138e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	613b      	str	r3, [r7, #16]
				if (j < 0 || j >= ilosc_probek) {
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db02      	blt.n	80013a2 <korelacjaWzajemna+0x11a>
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	2b95      	cmp	r3, #149	; 0x95
 80013a0:	dd49      	ble.n	8001436 <korelacjaWzajemna+0x1ae>
					wyr_1 = (wzor_pstrykniecia[i] - srednia_x);
 80013a2:	4a67      	ldr	r2, [pc, #412]	; (8001540 <korelacjaWzajemna+0x2b8>)
 80013a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f834 	bl	8000418 <__aeabi_i2d>
 80013b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013b4:	f7fe fee2 	bl	800017c <__aeabi_dsub>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
					wyr_2 = (srednia_y-srednia_y);//zakładamy że wartosci spoza zakresu przyjmuja wartosc srednia
 80013c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013c8:	f7fe fed8 	bl	800017c <__aeabi_dsub>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	e9c7 2300 	strd	r2, r3, [r7]
					licznik += wyr_1 * wyr_2;
 80013d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013dc:	f7ff f886 	bl	80004ec <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80013e8:	f7fe feca 	bl	8000180 <__adddf3>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
					kw_szereg_x += wyr_1 * wyr_1;
 80013f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013fc:	f7ff f876 	bl	80004ec <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001408:	f7fe feba 	bl	8000180 <__adddf3>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
					kw_szereg_y += wyr_2 * wyr_2;
 8001414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800141c:	f7ff f866 	bl	80004ec <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001428:	f7fe feaa 	bl	8000180 <__adddf3>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001434:	e04d      	b.n	80014d2 <korelacjaWzajemna+0x24a>
				}
				else {
					wyr_1 = (wzor_pstrykniecia[i] - srednia_x);
 8001436:	4a42      	ldr	r2, [pc, #264]	; (8001540 <korelacjaWzajemna+0x2b8>)
 8001438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe ffea 	bl	8000418 <__aeabi_i2d>
 8001444:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001448:	f7fe fe98 	bl	800017c <__aeabi_dsub>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	e9c7 2302 	strd	r2, r3, [r7, #8]
					wyr_2 = (pstrykniecie[j] - srednia_y);
 8001454:	4a3b      	ldr	r2, [pc, #236]	; (8001544 <korelacjaWzajemna+0x2bc>)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe ffdb 	bl	8000418 <__aeabi_i2d>
 8001462:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001466:	f7fe fe89 	bl	800017c <__aeabi_dsub>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9c7 2300 	strd	r2, r3, [r7]
					licznik += wyr_1 * wyr_2;
 8001472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001476:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800147a:	f7ff f837 	bl	80004ec <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001486:	f7fe fe7b 	bl	8000180 <__adddf3>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
					kw_szereg_x += wyr_1 * wyr_1;
 8001492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001496:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800149a:	f7ff f827 	bl	80004ec <__aeabi_dmul>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80014a6:	f7fe fe6b 	bl	8000180 <__adddf3>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
					kw_szereg_y += wyr_2 * wyr_2;
 80014b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014ba:	f7ff f817 	bl	80004ec <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80014c6:	f7fe fe5b 	bl	8000180 <__adddf3>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			for (i = 0; i < ilosc_probek; i++) {
 80014d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d4:	3301      	adds	r3, #1
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
 80014d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014da:	2b95      	cmp	r3, #149	; 0x95
 80014dc:	f77f af57 	ble.w	800138e <korelacjaWzajemna+0x106>
				}

			}

			korelacja[opoznienie + opoznienie_max] = licznik / sqrt(kw_szereg_x * kw_szereg_y);
 80014e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80014e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80014e8:	f7ff f800 	bl	80004ec <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f003 fca6 	bl	8004e44 <sqrt>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014fe:	6979      	ldr	r1, [r7, #20]
 8001500:	1844      	adds	r4, r0, r1
 8001502:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001506:	f7ff f91b 	bl	8000740 <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	480e      	ldr	r0, [pc, #56]	; (8001548 <korelacjaWzajemna+0x2c0>)
 8001510:	00e1      	lsls	r1, r4, #3
 8001512:	4401      	add	r1, r0
 8001514:	e9c1 2300 	strd	r2, r3, [r1]
		for (opoznienie = -opoznienie_max; opoznienie <= opoznienie_max; opoznienie++) {
 8001518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151a:	3301      	adds	r3, #1
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
 800151e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	429a      	cmp	r2, r3
 8001524:	f77f af1e 	ble.w	8001364 <korelacjaWzajemna+0xdc>
		}

		return korelacja;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <korelacjaWzajemna+0x2c0>)
	}
 800152a:	4618      	mov	r0, r3
 800152c:	3764      	adds	r7, #100	; 0x64
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	bf00      	nop
 8001534:	f3af 8000 	nop.w
 8001538:	00000000 	.word	0x00000000
 800153c:	4062c000 	.word	0x4062c000
 8001540:	20000010 	.word	0x20000010
 8001544:	200005c4 	.word	0x200005c4
 8001548:	20000318 	.word	0x20000318

0800154c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001552:	f000 fc57 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001556:	f000 f97d 	bl	8001854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155a:	f000 fa59 	bl	8001a10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800155e:	f000 fa0f 	bl	8001980 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001562:	f000 fa37 	bl	80019d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001566:	f000 f9cd 	bl	8001904 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) BUFF_DATA, 2048);
 800156a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800156e:	49a4      	ldr	r1, [pc, #656]	; (8001800 <main+0x2b4>)
 8001570:	48a4      	ldr	r0, [pc, #656]	; (8001804 <main+0x2b8>)
 8001572:	f000 fd81 	bl	8002078 <HAL_ADC_Start_DMA>
		HAL_UART_Receive_IT(&huart2, &BUFF_RX[EmptyRx], 1);
 8001576:	4ba4      	ldr	r3, [pc, #656]	; (8001808 <main+0x2bc>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	4ba3      	ldr	r3, [pc, #652]	; (800180c <main+0x2c0>)
 8001580:	4413      	add	r3, r2
 8001582:	2201      	movs	r2, #1
 8001584:	4619      	mov	r1, r3
 8001586:	48a2      	ldr	r0, [pc, #648]	; (8001810 <main+0x2c4>)
 8001588:	f002 fb23 	bl	8003bd2 <HAL_UART_Receive_IT>
		start();
 800158c:	f7ff fc8a 	bl	8000ea4 <start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
		 while (1) {
			 if (dataReady) {
 8001590:	4ba0      	ldr	r3, [pc, #640]	; (8001814 <main+0x2c8>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <main+0x58>
			 				dataReady = 0;
 800159a:	4b9e      	ldr	r3, [pc, #632]	; (8001814 <main+0x2c8>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
			 				analyseData();
 80015a0:	f7ff fd92 	bl	80010c8 <analyseData>
			 			}

			if (BusyRx != EmptyRx) {
 80015a4:	4b9c      	ldr	r3, [pc, #624]	; (8001818 <main+0x2cc>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b97      	ldr	r3, [pc, #604]	; (8001808 <main+0x2bc>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d0ed      	beq.n	8001590 <main+0x44>
				znak = BUFF_RX[BusyRx];//Przepisanie z bufora
 80015b4:	4b98      	ldr	r3, [pc, #608]	; (8001818 <main+0x2cc>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b93      	ldr	r3, [pc, #588]	; (800180c <main+0x2c0>)
 80015be:	5c9b      	ldrb	r3, [r3, r2]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b96      	ldr	r3, [pc, #600]	; (800181c <main+0x2d0>)
 80015c4:	701a      	strb	r2, [r3, #0]
				BusyRx++;
 80015c6:	4b94      	ldr	r3, [pc, #592]	; (8001818 <main+0x2cc>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	3301      	adds	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b91      	ldr	r3, [pc, #580]	; (8001818 <main+0x2cc>)
 80015d2:	801a      	strh	r2, [r3, #0]
				if (BusyRx >= RX_BUFF_SIZE) BusyRx = 0;
 80015d4:	4b90      	ldr	r3, [pc, #576]	; (8001818 <main+0x2cc>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	2bff      	cmp	r3, #255	; 0xff
 80015dc:	d902      	bls.n	80015e4 <main+0x98>
 80015de:	4b8e      	ldr	r3, [pc, #568]	; (8001818 <main+0x2cc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]
				if (znak == '[')
 80015e4:	4b8d      	ldr	r3, [pc, #564]	; (800181c <main+0x2d0>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b5b      	cmp	r3, #91	; 0x5b
 80015ea:	d106      	bne.n	80015fa <main+0xae>
					{
					stan = 1;
 80015ec:	4b8c      	ldr	r3, [pc, #560]	; (8001820 <main+0x2d4>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
					dlugoscRamki = 0;
 80015f2:	4b8c      	ldr	r3, [pc, #560]	; (8001824 <main+0x2d8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	e7ca      	b.n	8001590 <main+0x44>
					}
				else if (stan == 1) // stan 1 - odnaleziono początek ramki
 80015fa:	4b89      	ldr	r3, [pc, #548]	; (8001820 <main+0x2d4>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	f040 80f1 	bne.w	80017e6 <main+0x29a>
					{

					if (znak == '!') stan = 2; //stan 2 - znak wymaga odkodowania
 8001604:	4b85      	ldr	r3, [pc, #532]	; (800181c <main+0x2d0>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b21      	cmp	r3, #33	; 0x21
 800160a:	d103      	bne.n	8001614 <main+0xc8>
 800160c:	4b84      	ldr	r3, [pc, #528]	; (8001820 <main+0x2d4>)
 800160e:	2202      	movs	r2, #2
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e7bd      	b.n	8001590 <main+0x44>
					 else if (znak == ']')
 8001614:	4b81      	ldr	r3, [pc, #516]	; (800181c <main+0x2d0>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b5d      	cmp	r3, #93	; 0x5d
 800161a:	f040 80cb 	bne.w	80017b4 <main+0x268>
					{
						buforRamki[dlugoscRamki] = '\0';
 800161e:	4b81      	ldr	r3, [pc, #516]	; (8001824 <main+0x2d8>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	4b80      	ldr	r3, [pc, #512]	; (8001828 <main+0x2dc>)
 8001626:	2100      	movs	r1, #0
 8001628:	5499      	strb	r1, [r3, r2]

						if (dlugoscRamki >= 10) // podano więcej znaków, niż minimalna ilość znaków w ramce
 800162a:	4b7e      	ldr	r3, [pc, #504]	; (8001824 <main+0x2d8>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	2b09      	cmp	r3, #9
 8001630:	f240 80b9 	bls.w	80017a6 <main+0x25a>
							{

							memcpy(source_address, &buforRamki[0], 3);
 8001634:	4b7d      	ldr	r3, [pc, #500]	; (800182c <main+0x2e0>)
 8001636:	4a7c      	ldr	r2, [pc, #496]	; (8001828 <main+0x2dc>)
 8001638:	8811      	ldrh	r1, [r2, #0]
 800163a:	7892      	ldrb	r2, [r2, #2]
 800163c:	8019      	strh	r1, [r3, #0]
 800163e:	709a      	strb	r2, [r3, #2]
							memcpy(destination_address, &buforRamki[3], 3);
 8001640:	2203      	movs	r2, #3
 8001642:	497b      	ldr	r1, [pc, #492]	; (8001830 <main+0x2e4>)
 8001644:	487b      	ldr	r0, [pc, #492]	; (8001834 <main+0x2e8>)
 8001646:	f002 fef9 	bl	800443c <memcpy>
 800164a:	4b77      	ldr	r3, [pc, #476]	; (8001828 <main+0x2dc>)
 800164c:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8001650:	461a      	mov	r2, r3
							memcpy(suma_kontrolna, &buforRamki[6], 4);
 8001652:	4b79      	ldr	r3, [pc, #484]	; (8001838 <main+0x2ec>)
 8001654:	601a      	str	r2, [r3, #0]

							source_address[3] = '\0';
 8001656:	4b75      	ldr	r3, [pc, #468]	; (800182c <main+0x2e0>)
 8001658:	2200      	movs	r2, #0
 800165a:	70da      	strb	r2, [r3, #3]
							destination_address[3] = '\0';
 800165c:	4b75      	ldr	r3, [pc, #468]	; (8001834 <main+0x2e8>)
 800165e:	2200      	movs	r2, #0
 8001660:	70da      	strb	r2, [r3, #3]
							suma_kontrolna[4] = '\0';
 8001662:	4b75      	ldr	r3, [pc, #468]	; (8001838 <main+0x2ec>)
 8001664:	2200      	movs	r2, #0
 8001666:	711a      	strb	r2, [r3, #4]

							podana_suma_kontrolna = atoi(suma_kontrolna);// jak bedzie jakas bledna wartosc podana to nie przejdzie
 8001668:	4873      	ldr	r0, [pc, #460]	; (8001838 <main+0x2ec>)
 800166a:	f002 feb9 	bl	80043e0 <atoi>
 800166e:	4603      	mov	r3, r0
 8001670:	4a72      	ldr	r2, [pc, #456]	; (800183c <main+0x2f0>)
 8001672:	6013      	str	r3, [r2, #0]

							cmdLength = dlugoscRamki - 10;
 8001674:	4b6b      	ldr	r3, [pc, #428]	; (8001824 <main+0x2d8>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	3b0a      	subs	r3, #10
 800167a:	4a71      	ldr	r2, [pc, #452]	; (8001840 <main+0x2f4>)
 800167c:	6013      	str	r3, [r2, #0]
							if (strncmp(device_address, destination_address, 3) == 0) //jesli poprawny odbiorca
 800167e:	2203      	movs	r2, #3
 8001680:	496c      	ldr	r1, [pc, #432]	; (8001834 <main+0x2e8>)
 8001682:	4870      	ldr	r0, [pc, #448]	; (8001844 <main+0x2f8>)
 8001684:	f002 ff10 	bl	80044a8 <strncmp>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 808b 	bne.w	80017a6 <main+0x25a>
									{
 8001690:	466b      	mov	r3, sp
 8001692:	461d      	mov	r5, r3
									char cmd[cmdLength + 1];
 8001694:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <main+0x2f4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	1c5c      	adds	r4, r3, #1
 800169a:	1e63      	subs	r3, r4, #1
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	4623      	mov	r3, r4
 80016a0:	4618      	mov	r0, r3
 80016a2:	f04f 0100 	mov.w	r1, #0
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	00cb      	lsls	r3, r1, #3
 80016b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016b4:	00c2      	lsls	r2, r0, #3
 80016b6:	4623      	mov	r3, r4
 80016b8:	4618      	mov	r0, r3
 80016ba:	f04f 0100 	mov.w	r1, #0
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	00cb      	lsls	r3, r1, #3
 80016c8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016cc:	00c2      	lsls	r2, r0, #3
 80016ce:	4623      	mov	r3, r4
 80016d0:	3307      	adds	r3, #7
 80016d2:	08db      	lsrs	r3, r3, #3
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	ebad 0d03 	sub.w	sp, sp, r3
 80016da:	466b      	mov	r3, sp
 80016dc:	3300      	adds	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
									memcpy(cmd, &buforRamki[10], cmdLength);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a57      	ldr	r2, [pc, #348]	; (8001840 <main+0x2f4>)
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	4958      	ldr	r1, [pc, #352]	; (8001848 <main+0x2fc>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 fea7 	bl	800443c <memcpy>
									cmd[cmdLength] = '\0';
 80016ee:	4b54      	ldr	r3, [pc, #336]	; (8001840 <main+0x2f4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	2100      	movs	r1, #0
 80016f6:	54d1      	strb	r1, [r2, r3]

									for (int i = 0; i < 3; i++) suma_wyliczona +=(int) source_address[i];
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	e00d      	b.n	800171a <main+0x1ce>
 80016fe:	4a4b      	ldr	r2, [pc, #300]	; (800182c <main+0x2e0>)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b50      	ldr	r3, [pc, #320]	; (800184c <main+0x300>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	4413      	add	r3, r2
 800170e:	b29a      	uxth	r2, r3
 8001710:	4b4e      	ldr	r3, [pc, #312]	; (800184c <main+0x300>)
 8001712:	801a      	strh	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3301      	adds	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b02      	cmp	r3, #2
 800171e:	ddee      	ble.n	80016fe <main+0x1b2>
									for (int i = 0; i < 3; i++) suma_wyliczona +=(int) destination_address[i];
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	e00d      	b.n	8001742 <main+0x1f6>
 8001726:	4a43      	ldr	r2, [pc, #268]	; (8001834 <main+0x2e8>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b46      	ldr	r3, [pc, #280]	; (800184c <main+0x300>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	4413      	add	r3, r2
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b44      	ldr	r3, [pc, #272]	; (800184c <main+0x300>)
 800173a:	801a      	strh	r2, [r3, #0]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	3301      	adds	r3, #1
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b02      	cmp	r3, #2
 8001746:	ddee      	ble.n	8001726 <main+0x1da>
									sumaNadOdb = suma_wyliczona;// suma z nadawcy + odbiorcy
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <main+0x300>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b40      	ldr	r3, [pc, #256]	; (8001850 <main+0x304>)
 8001750:	601a      	str	r2, [r3, #0]
									for (int i = 0; i <= cmdLength; i++) suma_wyliczona += (int) cmd[i];
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e00d      	b.n	8001774 <main+0x228>
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b3a      	ldr	r3, [pc, #232]	; (800184c <main+0x300>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	4413      	add	r3, r2
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <main+0x300>)
 800176c:	801a      	strh	r2, [r3, #0]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	4b32      	ldr	r3, [pc, #200]	; (8001840 <main+0x2f4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	429a      	cmp	r2, r3
 800177c:	ddec      	ble.n	8001758 <main+0x20c>

									if (podana_suma_kontrolna == suma_wyliczona) // jeżeli komenda została przysłana
 800177e:	4b33      	ldr	r3, [pc, #204]	; (800184c <main+0x300>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <main+0x2f0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d106      	bne.n	800179a <main+0x24e>
											{
										odebranoRamke();
 800178c:	f7ff fbe4 	bl	8000f58 <odebranoRamke>
										analizaKomendy(cmd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fa64 	bl	8000c60 <analizaKomendy>
 8001798:	e001      	b.n	800179e <main+0x252>
									} else {
										 errorSumaKontrolna();
 800179a:	f7ff fb29 	bl	8000df0 <errorSumaKontrolna>
									}

									suma_wyliczona = 0;
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <main+0x300>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	801a      	strh	r2, [r3, #0]
 80017a4:	46ad      	mov	sp, r5

							}
						}

						stan = 0;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <main+0x2d4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
						dlugoscRamki = 0;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <main+0x2d8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	801a      	strh	r2, [r3, #0]
 80017b2:	e6ed      	b.n	8001590 <main+0x44>
					}
					 else
					{
						buforRamki[dlugoscRamki] = znak; // zapisuje znak do bufora ramki
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <main+0x2d8>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <main+0x2d0>)
 80017bc:	7819      	ldrb	r1, [r3, #0]
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <main+0x2dc>)
 80017c0:	5499      	strb	r1, [r3, r2]
						dlugoscRamki++;
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <main+0x2d8>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <main+0x2d8>)
 80017cc:	801a      	strh	r2, [r3, #0]
						if (dlugoscRamki > (62)) {
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <main+0x2d8>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	2b3e      	cmp	r3, #62	; 0x3e
 80017d4:	f67f aedc 	bls.w	8001590 <main+0x44>
							dlugoscRamki = 0;
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <main+0x2d8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	801a      	strh	r2, [r3, #0]
							stan = 0; //stan - 0 - stan poszukiwania nowego znaku rozpoczecia ramki '['
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <main+0x2d4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
							break;
 80017e4:	e007      	b.n	80017f6 <main+0x2aa>
						}
					}
				} else if (stan == 2)
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <main+0x2d4>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	f47f aed0 	bne.w	8001590 <main+0x44>
				{
					dekoduj();
 80017f0:	f7ff fab0 	bl	8000d54 <dekoduj>
			 if (dataReady) {
 80017f4:	e6cc      	b.n	8001590 <main+0x44>
 80017f6:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		}
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001800:	20000af4 	.word	0x20000af4
 8001804:	20000828 	.word	0x20000828
 8001808:	200002fc 	.word	0x200002fc
 800180c:	200003c4 	.word	0x200003c4
 8001810:	200009b0 	.word	0x200009b0
 8001814:	20000306 	.word	0x20000306
 8001818:	200002fe 	.word	0x200002fe
 800181c:	2000089c 	.word	0x2000089c
 8001820:	2000030a 	.word	0x2000030a
 8001824:	2000030c 	.word	0x2000030c
 8001828:	200004c4 	.word	0x200004c4
 800182c:	20000008 	.word	0x20000008
 8001830:	200004c7 	.word	0x200004c7
 8001834:	2000081c 	.word	0x2000081c
 8001838:	200008a0 	.word	0x200008a0
 800183c:	20000310 	.word	0x20000310
 8001840:	20000820 	.word	0x20000820
 8001844:	20000004 	.word	0x20000004
 8001848:	200004ce 	.word	0x200004ce
 800184c:	2000030e 	.word	0x2000030e
 8001850:	2000000c 	.word	0x2000000c

08001854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b094      	sub	sp, #80	; 0x50
 8001858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800185e:	2228      	movs	r2, #40	; 0x28
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f002 fdf8 	bl	8004458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001884:	2302      	movs	r3, #2
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001888:	2301      	movs	r3, #1
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800188c:	2310      	movs	r3, #16
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001890:	2302      	movs	r3, #2
 8001892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001894:	2300      	movs	r3, #0
 8001896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001898:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800189c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800189e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 fc34 	bl	8003110 <HAL_RCC_OscConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80018ae:	f000 f91d 	bl	8001aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b2:	230f      	movs	r3, #15
 80018b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b6:	2302      	movs	r3, #2
 80018b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80018ba:	2390      	movs	r3, #144	; 0x90
 80018bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	2101      	movs	r1, #1
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 fe9d 	bl	8003610 <HAL_RCC_ClockConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80018dc:	f000 f906 	bl	8001aec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018e0:	2302      	movs	r3, #2
 80018e2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80018e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018e8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 f829 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80018f8:	f000 f8f8 	bl	8001aec <Error_Handler>
  }
}
 80018fc:	bf00      	nop
 80018fe:	3750      	adds	r7, #80	; 0x50
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <MX_ADC1_Init+0x74>)
 8001916:	4a19      	ldr	r2, [pc, #100]	; (800197c <MX_ADC1_Init+0x78>)
 8001918:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <MX_ADC1_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <MX_ADC1_Init+0x74>)
 8001922:	2201      	movs	r2, #1
 8001924:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_ADC1_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <MX_ADC1_Init+0x74>)
 800192e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001932:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <MX_ADC1_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_ADC1_Init+0x74>)
 800193c:	2201      	movs	r2, #1
 800193e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <MX_ADC1_Init+0x74>)
 8001942:	f000 fac1 	bl	8001ec8 <HAL_ADC_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800194c:	f000 f8ce 	bl	8001aec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001954:	2301      	movs	r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001958:	2304      	movs	r3, #4
 800195a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_ADC1_Init+0x74>)
 8001962:	f000 fc71 	bl	8002248 <HAL_ADC_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800196c:	f000 f8be 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000828 	.word	0x20000828
 800197c:	40012400 	.word	0x40012400

08001980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <MX_USART2_UART_Init+0x50>)
 8001988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 800198c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 80019b8:	f002 f87a 	bl	8003ab0 <HAL_UART_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019c2:	f000 f893 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200009b0 	.word	0x200009b0
 80019d0:	40004400 	.word	0x40004400

080019d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_DMA_Init+0x38>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <MX_DMA_Init+0x38>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6153      	str	r3, [r2, #20]
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_DMA_Init+0x38>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	200b      	movs	r0, #11
 80019f8:	f000 fef7 	bl	80027ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019fc:	200b      	movs	r0, #11
 80019fe:	f000 ff10 	bl	8002822 <HAL_NVIC_EnableIRQ>

}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000

08001a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <MX_GPIO_Init+0xcc>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a2c      	ldr	r2, [pc, #176]	; (8001adc <MX_GPIO_Init+0xcc>)
 8001a2a:	f043 0310 	orr.w	r3, r3, #16
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <MX_GPIO_Init+0xcc>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <MX_GPIO_Init+0xcc>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a26      	ldr	r2, [pc, #152]	; (8001adc <MX_GPIO_Init+0xcc>)
 8001a42:	f043 0320 	orr.w	r3, r3, #32
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b24      	ldr	r3, [pc, #144]	; (8001adc <MX_GPIO_Init+0xcc>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <MX_GPIO_Init+0xcc>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a20      	ldr	r2, [pc, #128]	; (8001adc <MX_GPIO_Init+0xcc>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <MX_GPIO_Init+0xcc>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <MX_GPIO_Init+0xcc>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <MX_GPIO_Init+0xcc>)
 8001a72:	f043 0308 	orr.w	r3, r3, #8
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MX_GPIO_Init+0xcc>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2120      	movs	r1, #32
 8001a88:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <MX_GPIO_Init+0xd0>)
 8001a8a:	f001 fb07 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <MX_GPIO_Init+0xd4>)
 8001a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <MX_GPIO_Init+0xd8>)
 8001aa4:	f001 f976 	bl	8002d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4619      	mov	r1, r3
 8001abe:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <MX_GPIO_Init+0xd0>)
 8001ac0:	f001 f968 	bl	8002d94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2028      	movs	r0, #40	; 0x28
 8001aca:	f000 fe8e 	bl	80027ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ace:	2028      	movs	r0, #40	; 0x28
 8001ad0:	f000 fea7 	bl	8002822 <HAL_NVIC_EnableIRQ>

}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010800 	.word	0x40010800
 8001ae4:	10110000 	.word	0x10110000
 8001ae8:	40011000 	.word	0x40011000

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8001af4:	e7fe      	b.n	8001af4 <Error_Handler+0x8>
	...

08001af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6193      	str	r3, [r2, #24]
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_MspInit+0x60>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_MspInit+0x60>)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000

08001b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <HAL_ADC_MspInit+0xbc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d149      	bne.n	8001c10 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b7c:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <HAL_ADC_MspInit+0xc0>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a26      	ldr	r2, [pc, #152]	; (8001c1c <HAL_ADC_MspInit+0xc0>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <HAL_ADC_MspInit+0xc0>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_ADC_MspInit+0xc0>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a20      	ldr	r2, [pc, #128]	; (8001c1c <HAL_ADC_MspInit+0xc0>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <HAL_ADC_MspInit+0xc0>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bac:	2301      	movs	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4819      	ldr	r0, [pc, #100]	; (8001c20 <HAL_ADC_MspInit+0xc4>)
 8001bbc:	f001 f8ea 	bl	8002d94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_ADC_MspInit+0xc8>)
 8001bc2:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_ADC_MspInit+0xcc>)
 8001bc4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_ADC_MspInit+0xc8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_ADC_MspInit+0xc8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_ADC_MspInit+0xc8>)
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_ADC_MspInit+0xc8>)
 8001bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bde:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_ADC_MspInit+0xc8>)
 8001be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_ADC_MspInit+0xc8>)
 8001bea:	2220      	movs	r2, #32
 8001bec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_ADC_MspInit+0xc8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bf4:	480b      	ldr	r0, [pc, #44]	; (8001c24 <HAL_ADC_MspInit+0xc8>)
 8001bf6:	f000 fe2f 	bl	8002858 <HAL_DMA_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001c00:	f7ff ff74 	bl	8001aec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_ADC_MspInit+0xc8>)
 8001c08:	621a      	str	r2, [r3, #32]
 8001c0a:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_ADC_MspInit+0xc8>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40012400 	.word	0x40012400
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010800 	.word	0x40010800
 8001c24:	20000858 	.word	0x20000858
 8001c28:	40020008 	.word	0x40020008

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_UART_MspInit+0x80>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d12b      	bne.n	8001ca4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_UART_MspInit+0x84>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <HAL_UART_MspInit+0x84>)
 8001c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c56:	61d3      	str	r3, [r2, #28]
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_UART_MspInit+0x84>)
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_UART_MspInit+0x84>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_UART_MspInit+0x84>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_UART_MspInit+0x84>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c7c:	230c      	movs	r3, #12
 8001c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2302      	movs	r3, #2
 8001c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c90:	f001 f880 	bl	8002d94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	2026      	movs	r0, #38	; 0x26
 8001c9a:	f000 fda6 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c9e:	2026      	movs	r0, #38	; 0x26
 8001ca0:	f000 fdbf 	bl	8002822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40004400 	.word	0x40004400
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010800 	.word	0x40010800

08001cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <NMI_Handler+0x4>

08001cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <MemManage_Handler+0x4>

08001cca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cce:	e7fe      	b.n	8001cce <BusFault_Handler+0x4>

08001cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <UsageFault_Handler+0x4>

08001cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfe:	f000 f8c7 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <DMA1_Channel1_IRQHandler+0x10>)
 8001d0e:	f000 ff0d 	bl	8002b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000858 	.word	0x20000858

08001d1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <USART2_IRQHandler+0x10>)
 8001d22:	f001 ff87 	bl	8003c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200009b0 	.word	0x200009b0

08001d30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d38:	f001 f9c8 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <_sbrk+0x5c>)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <_sbrk+0x60>)
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <_sbrk+0x64>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <_sbrk+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d207      	bcs.n	8001d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d70:	f002 fb3a 	bl	80043e8 <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e009      	b.n	8001d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <_sbrk+0x64>)
 8001d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20005000 	.word	0x20005000
 8001da0:	00000400 	.word	0x00000400
 8001da4:	200003b8 	.word	0x200003b8
 8001da8:	20001b08 	.word	0x20001b08

08001dac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db8:	480c      	ldr	r0, [pc, #48]	; (8001dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dba:	490d      	ldr	r1, [pc, #52]	; (8001df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd0:	4c0a      	ldr	r4, [pc, #40]	; (8001dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dde:	f7ff ffe5 	bl	8001dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de2:	f002 fb07 	bl	80043f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de6:	f7ff fbb1 	bl	800154c <main>
  bx lr
 8001dea:	4770      	bx	lr
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8001df4:	080052a0 	.word	0x080052a0
  ldr r2, =_sbss
 8001df8:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8001dfc:	20001b08 	.word	0x20001b08

08001e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC1_2_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_Init+0x28>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_Init+0x28>)
 8001e0e:	f043 0310 	orr.w	r3, r3, #16
 8001e12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 fcdd 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 f808 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f7ff fe6a 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40022000 	.word	0x40022000

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fcf5 	bl	800283e <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f000 fcbd 	bl	80027ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000268 	.word	0x20000268
 8001e88:	20000270 	.word	0x20000270
 8001e8c:	2000026c 	.word	0x2000026c

08001e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_IncTick+0x1c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_IncTick+0x20>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <HAL_IncTick+0x20>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	20000270 	.word	0x20000270
 8001eb0:	20001af4 	.word	0x20001af4

08001eb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b02      	ldr	r3, [pc, #8]	; (8001ec4 <HAL_GetTick+0x10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20001af4 	.word	0x20001af4

08001ec8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e0be      	b.n	8002068 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fe28 	bl	8001b5c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 faed 	bl	80024ec <ADC_ConversionStop_Disable>
 8001f12:	4603      	mov	r3, r0
 8001f14:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f040 8099 	bne.w	8002056 <HAL_ADC_Init+0x18e>
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 8095 	bne.w	8002056 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f34:	f023 0302 	bic.w	r3, r3, #2
 8001f38:	f043 0202 	orr.w	r2, r3, #2
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7b1b      	ldrb	r3, [r3, #12]
 8001f4e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f50:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f60:	d003      	beq.n	8001f6a <HAL_ADC_Init+0xa2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d102      	bne.n	8001f70 <HAL_ADC_Init+0xa8>
 8001f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f6e:	e000      	b.n	8001f72 <HAL_ADC_Init+0xaa>
 8001f70:	2300      	movs	r3, #0
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7d1b      	ldrb	r3, [r3, #20]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d119      	bne.n	8001fb4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7b1b      	ldrb	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	035a      	lsls	r2, r3, #13
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f043 0220 	orr.w	r2, r3, #32
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_ADC_Init+0x1a8>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe4:	d003      	beq.n	8001fee <HAL_ADC_Init+0x126>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d104      	bne.n	8001ff8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	051b      	lsls	r3, r3, #20
 8001ff6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	430a      	orrs	r2, r1
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_ADC_Init+0x1ac>)
 8002014:	4013      	ands	r3, r2
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	429a      	cmp	r2, r3
 800201a:	d10b      	bne.n	8002034 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002032:	e018      	b.n	8002066 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	f023 0312 	bic.w	r3, r3, #18
 800203c:	f043 0210 	orr.w	r2, r3, #16
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	f043 0201 	orr.w	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002054:	e007      	b.n	8002066 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	f043 0210 	orr.w	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	ffe1f7fd 	.word	0xffe1f7fd
 8002074:	ff1f0efe 	.word	0xff1f0efe

08002078 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a64      	ldr	r2, [pc, #400]	; (8002220 <HAL_ADC_Start_DMA+0x1a8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d004      	beq.n	800209c <HAL_ADC_Start_DMA+0x24>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a63      	ldr	r2, [pc, #396]	; (8002224 <HAL_ADC_Start_DMA+0x1ac>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d106      	bne.n	80020aa <HAL_ADC_Start_DMA+0x32>
 800209c:	4b60      	ldr	r3, [pc, #384]	; (8002220 <HAL_ADC_Start_DMA+0x1a8>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f040 80b3 	bne.w	8002210 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_Start_DMA+0x40>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e0ae      	b.n	8002216 <HAL_ADC_Start_DMA+0x19e>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f9b9 	bl	8002438 <ADC_Enable>
 80020c6:	4603      	mov	r3, r0
 80020c8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 809a 	bne.w	8002206 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a4e      	ldr	r2, [pc, #312]	; (8002224 <HAL_ADC_Start_DMA+0x1ac>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_Start_DMA+0x84>
 80020f0:	4b4b      	ldr	r3, [pc, #300]	; (8002220 <HAL_ADC_Start_DMA+0x1a8>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d115      	bne.n	8002128 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002112:	2b00      	cmp	r3, #0
 8002114:	d026      	beq.n	8002164 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800211e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002126:	e01d      	b.n	8002164 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a39      	ldr	r2, [pc, #228]	; (8002220 <HAL_ADC_Start_DMA+0x1a8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d004      	beq.n	8002148 <HAL_ADC_Start_DMA+0xd0>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a38      	ldr	r2, [pc, #224]	; (8002224 <HAL_ADC_Start_DMA+0x1ac>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d10d      	bne.n	8002164 <HAL_ADC_Start_DMA+0xec>
 8002148:	4b35      	ldr	r3, [pc, #212]	; (8002220 <HAL_ADC_Start_DMA+0x1a8>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800215c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f023 0206 	bic.w	r2, r3, #6
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
 800217c:	e002      	b.n	8002184 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <HAL_ADC_Start_DMA+0x1b0>)
 8002192:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_ADC_Start_DMA+0x1b4>)
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a23      	ldr	r2, [pc, #140]	; (8002230 <HAL_ADC_Start_DMA+0x1b8>)
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0202 	mvn.w	r2, #2
 80021ac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021bc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a18      	ldr	r0, [r3, #32]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	334c      	adds	r3, #76	; 0x4c
 80021c8:	4619      	mov	r1, r3
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f000 fb9d 	bl	800290c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021e0:	d108      	bne.n	80021f4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021f0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80021f2:	e00f      	b.n	8002214 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002202:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002204:	e006      	b.n	8002214 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800220e:	e001      	b.n	8002214 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002214:	7dfb      	ldrb	r3, [r7, #23]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40012400 	.word	0x40012400
 8002224:	40012800 	.word	0x40012800
 8002228:	0800256f 	.word	0x0800256f
 800222c:	080025eb 	.word	0x080025eb
 8002230:	08002607 	.word	0x08002607

08002234 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
	...

08002248 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x20>
 8002264:	2302      	movs	r3, #2
 8002266:	e0dc      	b.n	8002422 <HAL_ADC_ConfigChannel+0x1da>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b06      	cmp	r3, #6
 8002276:	d81c      	bhi.n	80022b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	3b05      	subs	r3, #5
 800228a:	221f      	movs	r2, #31
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	4019      	ands	r1, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b05      	subs	r3, #5
 80022a4:	fa00 f203 	lsl.w	r2, r0, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	635a      	str	r2, [r3, #52]	; 0x34
 80022b0:	e03c      	b.n	800232c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b0c      	cmp	r3, #12
 80022b8:	d81c      	bhi.n	80022f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	3b23      	subs	r3, #35	; 0x23
 80022cc:	221f      	movs	r2, #31
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	4019      	ands	r1, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	3b23      	subs	r3, #35	; 0x23
 80022e6:	fa00 f203 	lsl.w	r2, r0, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
 80022f2:	e01b      	b.n	800232c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	3b41      	subs	r3, #65	; 0x41
 8002306:	221f      	movs	r2, #31
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	4019      	ands	r1, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	3b41      	subs	r3, #65	; 0x41
 8002320:	fa00 f203 	lsl.w	r2, r0, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b09      	cmp	r3, #9
 8002332:	d91c      	bls.n	800236e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68d9      	ldr	r1, [r3, #12]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	3b1e      	subs	r3, #30
 8002346:	2207      	movs	r2, #7
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	4019      	ands	r1, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6898      	ldr	r0, [r3, #8]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	3b1e      	subs	r3, #30
 8002360:	fa00 f203 	lsl.w	r2, r0, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	e019      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6919      	ldr	r1, [r3, #16]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	2207      	movs	r2, #7
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	4019      	ands	r1, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6898      	ldr	r0, [r3, #8]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	fa00 f203 	lsl.w	r2, r0, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d003      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023ae:	2b11      	cmp	r3, #17
 80023b0:	d132      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <HAL_ADC_ConfigChannel+0x1e4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d125      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d126      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d11a      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_ADC_ConfigChannel+0x1e8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a13      	ldr	r2, [pc, #76]	; (8002434 <HAL_ADC_ConfigChannel+0x1ec>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	0c9a      	lsrs	r2, r3, #18
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023f8:	e002      	b.n	8002400 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f9      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x1b2>
 8002406:	e007      	b.n	8002418 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	f043 0220 	orr.w	r2, r3, #32
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	40012400 	.word	0x40012400
 8002430:	20000268 	.word	0x20000268
 8002434:	431bde83 	.word	0x431bde83

08002438 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d040      	beq.n	80024d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002466:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <ADC_Enable+0xac>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1f      	ldr	r2, [pc, #124]	; (80024e8 <ADC_Enable+0xb0>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	0c9b      	lsrs	r3, r3, #18
 8002472:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002474:	e002      	b.n	800247c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3b01      	subs	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002482:	f7ff fd17 	bl	8001eb4 <HAL_GetTick>
 8002486:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002488:	e01f      	b.n	80024ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800248a:	f7ff fd13 	bl	8001eb4 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d918      	bls.n	80024ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d011      	beq.n	80024ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e007      	b.n	80024da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d1d8      	bne.n	800248a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000268 	.word	0x20000268
 80024e8:	431bde83 	.word	0x431bde83

080024ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d12e      	bne.n	8002564 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002516:	f7ff fccd 	bl	8001eb4 <HAL_GetTick>
 800251a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800251c:	e01b      	b.n	8002556 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800251e:	f7ff fcc9 	bl	8001eb4 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d914      	bls.n	8002556 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10d      	bne.n	8002556 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	f043 0210 	orr.w	r2, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e007      	b.n	8002566 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	d0dc      	beq.n	800251e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002584:	2b00      	cmp	r3, #0
 8002586:	d127      	bne.n	80025d8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800259e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025a2:	d115      	bne.n	80025d0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d111      	bne.n	80025d0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7fe fb31 	bl	8000c38 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80025d6:	e004      	b.n	80025e2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7fe fb09 	bl	8000c10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	f043 0204 	orr.w	r2, r3, #4
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fe01 	bl	8002234 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0b      	blt.n	80026ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4906      	ldr	r1, [pc, #24]	; (80026d4 <__NVIC_EnableIRQ+0x34>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	; (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
         );
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a0:	d301      	bcc.n	80027a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00f      	b.n	80027c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <SysTick_Config+0x40>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ae:	210f      	movs	r1, #15
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f7ff ff90 	bl	80026d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <SysTick_Config+0x40>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <SysTick_Config+0x40>)
 80027c0:	2207      	movs	r2, #7
 80027c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	e000e010 	.word	0xe000e010

080027d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff2d 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027fc:	f7ff ff42 	bl	8002684 <__NVIC_GetPriorityGrouping>
 8002800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	6978      	ldr	r0, [r7, #20]
 8002808:	f7ff ff90 	bl	800272c <NVIC_EncodePriority>
 800280c:	4602      	mov	r2, r0
 800280e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff5f 	bl	80026d8 <__NVIC_SetPriority>
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff35 	bl	80026a0 <__NVIC_EnableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ffa2 	bl	8002790 <SysTick_Config>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e043      	b.n	80028f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	4b22      	ldr	r3, [pc, #136]	; (8002900 <HAL_DMA_Init+0xa8>)
 8002876:	4413      	add	r3, r2
 8002878:	4a22      	ldr	r2, [pc, #136]	; (8002904 <HAL_DMA_Init+0xac>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	009a      	lsls	r2, r3, #2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <HAL_DMA_Init+0xb0>)
 800288a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	bffdfff8 	.word	0xbffdfff8
 8002904:	cccccccd 	.word	0xcccccccd
 8002908:	40020000 	.word	0x40020000

0800290c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_DMA_Start_IT+0x20>
 8002928:	2302      	movs	r3, #2
 800292a:	e04a      	b.n	80029c2 <HAL_DMA_Start_IT+0xb6>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800293a:	2b01      	cmp	r3, #1
 800293c:	d13a      	bne.n	80029b4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2202      	movs	r2, #2
 8002942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f9e8 	bl	8002d38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 020e 	orr.w	r2, r2, #14
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e00f      	b.n	80029a2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0204 	bic.w	r2, r2, #4
 8002990:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 020a 	orr.w	r2, r2, #10
 80029a0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e005      	b.n	80029c0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
 80029be:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d008      	beq.n	80029f2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2204      	movs	r2, #4
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e020      	b.n	8002a34 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 020e 	bic.w	r2, r2, #14
 8002a00:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d005      	beq.n	8002a62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e051      	b.n	8002b06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 020e 	bic.w	r2, r2, #14
 8002a70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <HAL_DMA_Abort_IT+0xd0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d029      	beq.n	8002ae0 <HAL_DMA_Abort_IT+0xa0>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <HAL_DMA_Abort_IT+0xd4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d022      	beq.n	8002adc <HAL_DMA_Abort_IT+0x9c>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <HAL_DMA_Abort_IT+0xd8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d01a      	beq.n	8002ad6 <HAL_DMA_Abort_IT+0x96>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <HAL_DMA_Abort_IT+0xdc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d012      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x90>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <HAL_DMA_Abort_IT+0xe0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00a      	beq.n	8002aca <HAL_DMA_Abort_IT+0x8a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <HAL_DMA_Abort_IT+0xe4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d102      	bne.n	8002ac4 <HAL_DMA_Abort_IT+0x84>
 8002abe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ac2:	e00e      	b.n	8002ae2 <HAL_DMA_Abort_IT+0xa2>
 8002ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac8:	e00b      	b.n	8002ae2 <HAL_DMA_Abort_IT+0xa2>
 8002aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ace:	e008      	b.n	8002ae2 <HAL_DMA_Abort_IT+0xa2>
 8002ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad4:	e005      	b.n	8002ae2 <HAL_DMA_Abort_IT+0xa2>
 8002ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ada:	e002      	b.n	8002ae2 <HAL_DMA_Abort_IT+0xa2>
 8002adc:	2310      	movs	r3, #16
 8002ade:	e000      	b.n	8002ae2 <HAL_DMA_Abort_IT+0xa2>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <HAL_DMA_Abort_IT+0xe8>)
 8002ae4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
    } 
  }
  return status;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40020008 	.word	0x40020008
 8002b14:	4002001c 	.word	0x4002001c
 8002b18:	40020030 	.word	0x40020030
 8002b1c:	40020044 	.word	0x40020044
 8002b20:	40020058 	.word	0x40020058
 8002b24:	4002006c 	.word	0x4002006c
 8002b28:	40020000 	.word	0x40020000

08002b2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	2204      	movs	r2, #4
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d04f      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0xc8>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d04a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a66      	ldr	r2, [pc, #408]	; (8002d1c <HAL_DMA_IRQHandler+0x1f0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d029      	beq.n	8002bda <HAL_DMA_IRQHandler+0xae>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a65      	ldr	r2, [pc, #404]	; (8002d20 <HAL_DMA_IRQHandler+0x1f4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d022      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xaa>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a63      	ldr	r2, [pc, #396]	; (8002d24 <HAL_DMA_IRQHandler+0x1f8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d01a      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xa4>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a62      	ldr	r2, [pc, #392]	; (8002d28 <HAL_DMA_IRQHandler+0x1fc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d012      	beq.n	8002bca <HAL_DMA_IRQHandler+0x9e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a60      	ldr	r2, [pc, #384]	; (8002d2c <HAL_DMA_IRQHandler+0x200>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00a      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x98>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a5f      	ldr	r2, [pc, #380]	; (8002d30 <HAL_DMA_IRQHandler+0x204>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d102      	bne.n	8002bbe <HAL_DMA_IRQHandler+0x92>
 8002bb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bbc:	e00e      	b.n	8002bdc <HAL_DMA_IRQHandler+0xb0>
 8002bbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bc2:	e00b      	b.n	8002bdc <HAL_DMA_IRQHandler+0xb0>
 8002bc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bc8:	e008      	b.n	8002bdc <HAL_DMA_IRQHandler+0xb0>
 8002bca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bce:	e005      	b.n	8002bdc <HAL_DMA_IRQHandler+0xb0>
 8002bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd4:	e002      	b.n	8002bdc <HAL_DMA_IRQHandler+0xb0>
 8002bd6:	2340      	movs	r3, #64	; 0x40
 8002bd8:	e000      	b.n	8002bdc <HAL_DMA_IRQHandler+0xb0>
 8002bda:	2304      	movs	r3, #4
 8002bdc:	4a55      	ldr	r2, [pc, #340]	; (8002d34 <HAL_DMA_IRQHandler+0x208>)
 8002bde:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8094 	beq.w	8002d12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002bf2:	e08e      	b.n	8002d12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d056      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x186>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d051      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10b      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 020a 	bic.w	r2, r2, #10
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a38      	ldr	r2, [pc, #224]	; (8002d1c <HAL_DMA_IRQHandler+0x1f0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d029      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x166>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a37      	ldr	r2, [pc, #220]	; (8002d20 <HAL_DMA_IRQHandler+0x1f4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x162>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a35      	ldr	r2, [pc, #212]	; (8002d24 <HAL_DMA_IRQHandler+0x1f8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01a      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x15c>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a34      	ldr	r2, [pc, #208]	; (8002d28 <HAL_DMA_IRQHandler+0x1fc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d012      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x156>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a32      	ldr	r2, [pc, #200]	; (8002d2c <HAL_DMA_IRQHandler+0x200>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00a      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x150>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a31      	ldr	r2, [pc, #196]	; (8002d30 <HAL_DMA_IRQHandler+0x204>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d102      	bne.n	8002c76 <HAL_DMA_IRQHandler+0x14a>
 8002c70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c74:	e00e      	b.n	8002c94 <HAL_DMA_IRQHandler+0x168>
 8002c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c7a:	e00b      	b.n	8002c94 <HAL_DMA_IRQHandler+0x168>
 8002c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c80:	e008      	b.n	8002c94 <HAL_DMA_IRQHandler+0x168>
 8002c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c86:	e005      	b.n	8002c94 <HAL_DMA_IRQHandler+0x168>
 8002c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c8c:	e002      	b.n	8002c94 <HAL_DMA_IRQHandler+0x168>
 8002c8e:	2320      	movs	r3, #32
 8002c90:	e000      	b.n	8002c94 <HAL_DMA_IRQHandler+0x168>
 8002c92:	2302      	movs	r3, #2
 8002c94:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <HAL_DMA_IRQHandler+0x208>)
 8002c96:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d034      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cb0:	e02f      	b.n	8002d12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d028      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x1e8>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d023      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 020e 	bic.w	r2, r2, #14
 8002cda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
    }
  }
  return;
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
}
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40020008 	.word	0x40020008
 8002d20:	4002001c 	.word	0x4002001c
 8002d24:	40020030 	.word	0x40020030
 8002d28:	40020044 	.word	0x40020044
 8002d2c:	40020058 	.word	0x40020058
 8002d30:	4002006c 	.word	0x4002006c
 8002d34:	40020000 	.word	0x40020000

08002d38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f202 	lsl.w	r2, r1, r2
 8002d54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d108      	bne.n	8002d78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d76:	e007      	b.n	8002d88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	60da      	str	r2, [r3, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b08b      	sub	sp, #44	; 0x2c
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da6:	e169      	b.n	800307c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002da8:	2201      	movs	r2, #1
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	f040 8158 	bne.w	8003076 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4a9a      	ldr	r2, [pc, #616]	; (8003034 <HAL_GPIO_Init+0x2a0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d05e      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002dd0:	4a98      	ldr	r2, [pc, #608]	; (8003034 <HAL_GPIO_Init+0x2a0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d875      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002dd6:	4a98      	ldr	r2, [pc, #608]	; (8003038 <HAL_GPIO_Init+0x2a4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d058      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002ddc:	4a96      	ldr	r2, [pc, #600]	; (8003038 <HAL_GPIO_Init+0x2a4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d86f      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002de2:	4a96      	ldr	r2, [pc, #600]	; (800303c <HAL_GPIO_Init+0x2a8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d052      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002de8:	4a94      	ldr	r2, [pc, #592]	; (800303c <HAL_GPIO_Init+0x2a8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d869      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002dee:	4a94      	ldr	r2, [pc, #592]	; (8003040 <HAL_GPIO_Init+0x2ac>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d04c      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002df4:	4a92      	ldr	r2, [pc, #584]	; (8003040 <HAL_GPIO_Init+0x2ac>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d863      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002dfa:	4a92      	ldr	r2, [pc, #584]	; (8003044 <HAL_GPIO_Init+0x2b0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d046      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002e00:	4a90      	ldr	r2, [pc, #576]	; (8003044 <HAL_GPIO_Init+0x2b0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d85d      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002e06:	2b12      	cmp	r3, #18
 8002e08:	d82a      	bhi.n	8002e60 <HAL_GPIO_Init+0xcc>
 8002e0a:	2b12      	cmp	r3, #18
 8002e0c:	d859      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <HAL_GPIO_Init+0x80>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e8f 	.word	0x08002e8f
 8002e18:	08002e69 	.word	0x08002e69
 8002e1c:	08002e7b 	.word	0x08002e7b
 8002e20:	08002ebd 	.word	0x08002ebd
 8002e24:	08002ec3 	.word	0x08002ec3
 8002e28:	08002ec3 	.word	0x08002ec3
 8002e2c:	08002ec3 	.word	0x08002ec3
 8002e30:	08002ec3 	.word	0x08002ec3
 8002e34:	08002ec3 	.word	0x08002ec3
 8002e38:	08002ec3 	.word	0x08002ec3
 8002e3c:	08002ec3 	.word	0x08002ec3
 8002e40:	08002ec3 	.word	0x08002ec3
 8002e44:	08002ec3 	.word	0x08002ec3
 8002e48:	08002ec3 	.word	0x08002ec3
 8002e4c:	08002ec3 	.word	0x08002ec3
 8002e50:	08002ec3 	.word	0x08002ec3
 8002e54:	08002ec3 	.word	0x08002ec3
 8002e58:	08002e71 	.word	0x08002e71
 8002e5c:	08002e85 	.word	0x08002e85
 8002e60:	4a79      	ldr	r2, [pc, #484]	; (8003048 <HAL_GPIO_Init+0x2b4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e66:	e02c      	b.n	8002ec2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	623b      	str	r3, [r7, #32]
          break;
 8002e6e:	e029      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	3304      	adds	r3, #4
 8002e76:	623b      	str	r3, [r7, #32]
          break;
 8002e78:	e024      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	623b      	str	r3, [r7, #32]
          break;
 8002e82:	e01f      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	623b      	str	r3, [r7, #32]
          break;
 8002e8c:	e01a      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e96:	2304      	movs	r3, #4
 8002e98:	623b      	str	r3, [r7, #32]
          break;
 8002e9a:	e013      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	611a      	str	r2, [r3, #16]
          break;
 8002eae:	e009      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	615a      	str	r2, [r3, #20]
          break;
 8002eba:	e003      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	623b      	str	r3, [r7, #32]
          break;
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          break;
 8002ec2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2bff      	cmp	r3, #255	; 0xff
 8002ec8:	d801      	bhi.n	8002ece <HAL_GPIO_Init+0x13a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	e001      	b.n	8002ed2 <HAL_GPIO_Init+0x13e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2bff      	cmp	r3, #255	; 0xff
 8002ed8:	d802      	bhi.n	8002ee0 <HAL_GPIO_Init+0x14c>
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	e002      	b.n	8002ee6 <HAL_GPIO_Init+0x152>
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	3b08      	subs	r3, #8
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	210f      	movs	r1, #15
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	6a39      	ldr	r1, [r7, #32]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	431a      	orrs	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80b1 	beq.w	8003076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f14:	4b4d      	ldr	r3, [pc, #308]	; (800304c <HAL_GPIO_Init+0x2b8>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4a4c      	ldr	r2, [pc, #304]	; (800304c <HAL_GPIO_Init+0x2b8>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6193      	str	r3, [r2, #24]
 8002f20:	4b4a      	ldr	r3, [pc, #296]	; (800304c <HAL_GPIO_Init+0x2b8>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f2c:	4a48      	ldr	r2, [pc, #288]	; (8003050 <HAL_GPIO_Init+0x2bc>)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	3302      	adds	r3, #2
 8002f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	220f      	movs	r2, #15
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a40      	ldr	r2, [pc, #256]	; (8003054 <HAL_GPIO_Init+0x2c0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <HAL_GPIO_Init+0x1ec>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a3f      	ldr	r2, [pc, #252]	; (8003058 <HAL_GPIO_Init+0x2c4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00d      	beq.n	8002f7c <HAL_GPIO_Init+0x1e8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3e      	ldr	r2, [pc, #248]	; (800305c <HAL_GPIO_Init+0x2c8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d007      	beq.n	8002f78 <HAL_GPIO_Init+0x1e4>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a3d      	ldr	r2, [pc, #244]	; (8003060 <HAL_GPIO_Init+0x2cc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d101      	bne.n	8002f74 <HAL_GPIO_Init+0x1e0>
 8002f70:	2303      	movs	r3, #3
 8002f72:	e006      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f74:	2304      	movs	r3, #4
 8002f76:	e004      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e002      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f80:	2300      	movs	r3, #0
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	f002 0203 	and.w	r2, r2, #3
 8002f88:	0092      	lsls	r2, r2, #2
 8002f8a:	4093      	lsls	r3, r2
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f92:	492f      	ldr	r1, [pc, #188]	; (8003050 <HAL_GPIO_Init+0x2bc>)
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	3302      	adds	r3, #2
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	492c      	ldr	r1, [pc, #176]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fba:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	4928      	ldr	r1, [pc, #160]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fd4:	4b23      	ldr	r3, [pc, #140]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4922      	ldr	r1, [pc, #136]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	e006      	b.n	8002ff0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	491e      	ldr	r1, [pc, #120]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d006      	beq.n	800300a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	4918      	ldr	r1, [pc, #96]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]
 8003008:	e006      	b.n	8003018 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	43db      	mvns	r3, r3
 8003012:	4914      	ldr	r1, [pc, #80]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8003014:	4013      	ands	r3, r2
 8003016:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d021      	beq.n	8003068 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	490e      	ldr	r1, [pc, #56]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	60cb      	str	r3, [r1, #12]
 8003030:	e021      	b.n	8003076 <HAL_GPIO_Init+0x2e2>
 8003032:	bf00      	nop
 8003034:	10320000 	.word	0x10320000
 8003038:	10310000 	.word	0x10310000
 800303c:	10220000 	.word	0x10220000
 8003040:	10210000 	.word	0x10210000
 8003044:	10120000 	.word	0x10120000
 8003048:	10110000 	.word	0x10110000
 800304c:	40021000 	.word	0x40021000
 8003050:	40010000 	.word	0x40010000
 8003054:	40010800 	.word	0x40010800
 8003058:	40010c00 	.word	0x40010c00
 800305c:	40011000 	.word	0x40011000
 8003060:	40011400 	.word	0x40011400
 8003064:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_GPIO_Init+0x304>)
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	43db      	mvns	r3, r3
 8003070:	4909      	ldr	r1, [pc, #36]	; (8003098 <HAL_GPIO_Init+0x304>)
 8003072:	4013      	ands	r3, r2
 8003074:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	3301      	adds	r3, #1
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	f47f ae8e 	bne.w	8002da8 <HAL_GPIO_Init+0x14>
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	372c      	adds	r7, #44	; 0x2c
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40010400 	.word	0x40010400

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	611a      	str	r2, [r3, #16]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030e2:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f806 	bl	80030fc <HAL_GPIO_EXTI_Callback>
  }
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40010400 	.word	0x40010400

080030fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e26c      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8087 	beq.w	800323e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003130:	4b92      	ldr	r3, [pc, #584]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b04      	cmp	r3, #4
 800313a:	d00c      	beq.n	8003156 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800313c:	4b8f      	ldr	r3, [pc, #572]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d112      	bne.n	800316e <HAL_RCC_OscConfig+0x5e>
 8003148:	4b8c      	ldr	r3, [pc, #560]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003154:	d10b      	bne.n	800316e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003156:	4b89      	ldr	r3, [pc, #548]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d06c      	beq.n	800323c <HAL_RCC_OscConfig+0x12c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d168      	bne.n	800323c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e246      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x76>
 8003178:	4b80      	ldr	r3, [pc, #512]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a7f      	ldr	r2, [pc, #508]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800317e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e02e      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x98>
 800318e:	4b7b      	ldr	r3, [pc, #492]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7a      	ldr	r2, [pc, #488]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b78      	ldr	r3, [pc, #480]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a77      	ldr	r2, [pc, #476]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0xbc>
 80031b2:	4b72      	ldr	r3, [pc, #456]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a71      	ldr	r2, [pc, #452]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b6f      	ldr	r3, [pc, #444]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6e      	ldr	r2, [pc, #440]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 80031cc:	4b6b      	ldr	r3, [pc, #428]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a6a      	ldr	r2, [pc, #424]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b68      	ldr	r3, [pc, #416]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a67      	ldr	r2, [pc, #412]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fe62 	bl	8001eb4 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fe fe5e 	bl	8001eb4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1fa      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	4b5d      	ldr	r3, [pc, #372]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xe4>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fe4e 	bl	8001eb4 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7fe fe4a 	bl	8001eb4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e1e6      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	4b53      	ldr	r3, [pc, #332]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x10c>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d063      	beq.n	8003312 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800324a:	4b4c      	ldr	r3, [pc, #304]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003256:	4b49      	ldr	r3, [pc, #292]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b08      	cmp	r3, #8
 8003260:	d11c      	bne.n	800329c <HAL_RCC_OscConfig+0x18c>
 8003262:	4b46      	ldr	r3, [pc, #280]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	4b43      	ldr	r3, [pc, #268]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x176>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e1ba      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b3d      	ldr	r3, [pc, #244]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4939      	ldr	r1, [pc, #228]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	e03a      	b.n	8003312 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a4:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fe fe03 	bl	8001eb4 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fe fdff 	bl	8001eb4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e19b      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4b2a      	ldr	r3, [pc, #168]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4927      	ldr	r1, [pc, #156]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e015      	b.n	8003312 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e6:	4b26      	ldr	r3, [pc, #152]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fde2 	bl	8001eb4 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f4:	f7fe fdde 	bl	8001eb4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e17a      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d03a      	beq.n	8003394 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d019      	beq.n	800335a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332c:	f7fe fdc2 	bl	8001eb4 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003334:	f7fe fdbe 	bl	8001eb4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e15a      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003352:	2001      	movs	r0, #1
 8003354:	f000 fad8 	bl	8003908 <RCC_Delay>
 8003358:	e01c      	b.n	8003394 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003360:	f7fe fda8 	bl	8001eb4 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003366:	e00f      	b.n	8003388 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003368:	f7fe fda4 	bl	8001eb4 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d908      	bls.n	8003388 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e140      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	42420000 	.word	0x42420000
 8003384:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	4b9e      	ldr	r3, [pc, #632]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e9      	bne.n	8003368 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80a6 	beq.w	80034ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a6:	4b97      	ldr	r3, [pc, #604]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	4b94      	ldr	r3, [pc, #592]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4a93      	ldr	r2, [pc, #588]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	61d3      	str	r3, [r2, #28]
 80033be:	4b91      	ldr	r3, [pc, #580]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b8e      	ldr	r3, [pc, #568]	; (8003608 <HAL_RCC_OscConfig+0x4f8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b8b      	ldr	r3, [pc, #556]	; (8003608 <HAL_RCC_OscConfig+0x4f8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a8a      	ldr	r2, [pc, #552]	; (8003608 <HAL_RCC_OscConfig+0x4f8>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fe fd65 	bl	8001eb4 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fe fd61 	bl	8001eb4 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	; 0x64
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e0fd      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b81      	ldr	r3, [pc, #516]	; (8003608 <HAL_RCC_OscConfig+0x4f8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x312>
 8003414:	4b7b      	ldr	r3, [pc, #492]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a7a      	ldr	r2, [pc, #488]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	e02d      	b.n	800347e <HAL_RCC_OscConfig+0x36e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x334>
 800342a:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	4a75      	ldr	r2, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6213      	str	r3, [r2, #32]
 8003436:	4b73      	ldr	r3, [pc, #460]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4a72      	ldr	r2, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	6213      	str	r3, [r2, #32]
 8003442:	e01c      	b.n	800347e <HAL_RCC_OscConfig+0x36e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d10c      	bne.n	8003466 <HAL_RCC_OscConfig+0x356>
 800344c:	4b6d      	ldr	r3, [pc, #436]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4a6c      	ldr	r2, [pc, #432]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6213      	str	r3, [r2, #32]
 8003458:	4b6a      	ldr	r3, [pc, #424]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4a69      	ldr	r2, [pc, #420]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6213      	str	r3, [r2, #32]
 8003464:	e00b      	b.n	800347e <HAL_RCC_OscConfig+0x36e>
 8003466:	4b67      	ldr	r3, [pc, #412]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4a66      	ldr	r2, [pc, #408]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	6213      	str	r3, [r2, #32]
 8003472:	4b64      	ldr	r3, [pc, #400]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4a63      	ldr	r2, [pc, #396]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d015      	beq.n	80034b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003486:	f7fe fd15 	bl	8001eb4 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe fd11 	bl	8001eb4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0ab      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	4b57      	ldr	r3, [pc, #348]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ee      	beq.n	800348e <HAL_RCC_OscConfig+0x37e>
 80034b0:	e014      	b.n	80034dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fe fcff 	bl	8001eb4 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe fcfb 	bl	8001eb4 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e095      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d0:	4b4c      	ldr	r3, [pc, #304]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ee      	bne.n	80034ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b48      	ldr	r3, [pc, #288]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	4a47      	ldr	r2, [pc, #284]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8081 	beq.w	80035fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f8:	4b42      	ldr	r3, [pc, #264]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d061      	beq.n	80035c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d146      	bne.n	800359a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350c:	4b3f      	ldr	r3, [pc, #252]	; (800360c <HAL_RCC_OscConfig+0x4fc>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fe fccf 	bl	8001eb4 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351a:	f7fe fccb 	bl	8001eb4 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e067      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352c:	4b35      	ldr	r3, [pc, #212]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d108      	bne.n	8003554 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	492d      	ldr	r1, [pc, #180]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003554:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a19      	ldr	r1, [r3, #32]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	430b      	orrs	r3, r1
 8003566:	4927      	ldr	r1, [pc, #156]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800356c:	4b27      	ldr	r3, [pc, #156]	; (800360c <HAL_RCC_OscConfig+0x4fc>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fe fc9f 	bl	8001eb4 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357a:	f7fe fc9b 	bl	8001eb4 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e037      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800358c:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x46a>
 8003598:	e02f      	b.n	80035fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_RCC_OscConfig+0x4fc>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe fc88 	bl	8001eb4 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe fc84 	bl	8001eb4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e020      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x498>
 80035c6:	e018      	b.n	80035fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e013      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	40007000 	.word	0x40007000
 800360c:	42420060 	.word	0x42420060

08003610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0d0      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d910      	bls.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b67      	ldr	r3, [pc, #412]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4965      	ldr	r1, [pc, #404]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0b8      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800366c:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a58      	ldr	r2, [pc, #352]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003676:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a52      	ldr	r2, [pc, #328]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800368e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	494d      	ldr	r1, [pc, #308]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d040      	beq.n	8003730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d115      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e07f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e073      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06b      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ee:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f023 0203 	bic.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4936      	ldr	r1, [pc, #216]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003700:	f7fe fbd8 	bl	8001eb4 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fe fbd4 	bl	8001eb4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e053      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 020c 	and.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	429a      	cmp	r2, r3
 800372e:	d1eb      	bne.n	8003708 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d210      	bcs.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 0207 	bic.w	r2, r3, #7
 8003746:	4922      	ldr	r1, [pc, #136]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e032      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4916      	ldr	r1, [pc, #88]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	490e      	ldr	r1, [pc, #56]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800379e:	f000 f821 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	490a      	ldr	r1, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	5ccb      	ldrb	r3, [r1, r3]
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	4a09      	ldr	r2, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1cc>)
 80037b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ba:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1d0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fb36 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40021000 	.word	0x40021000
 80037d8:	0800514c 	.word	0x0800514c
 80037dc:	20000268 	.word	0x20000268
 80037e0:	2000026c 	.word	0x2000026c

080037e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e4:	b490      	push	{r4, r7}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037ea:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037ec:	1d3c      	adds	r4, r7, #4
 80037ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037f4:	f240 2301 	movw	r3, #513	; 0x201
 80037f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b04      	cmp	r3, #4
 800381c:	d002      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x40>
 800381e:	2b08      	cmp	r3, #8
 8003820:	d003      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x46>
 8003822:	e02d      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003826:	623b      	str	r3, [r7, #32]
      break;
 8003828:	e02d      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	0c9b      	lsrs	r3, r3, #18
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003836:	4413      	add	r3, r2
 8003838:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800383c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d013      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <HAL_RCC_GetSysClockFreq+0xb4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	0c5b      	lsrs	r3, r3, #17
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003856:	4413      	add	r3, r2
 8003858:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800385c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	4a0e      	ldr	r2, [pc, #56]	; (800389c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003862:	fb02 f203 	mul.w	r2, r2, r3
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	e004      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003874:	fb02 f303 	mul.w	r3, r2, r3
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	623b      	str	r3, [r7, #32]
      break;
 800387e:	e002      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003882:	623b      	str	r3, [r7, #32]
      break;
 8003884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003886:	6a3b      	ldr	r3, [r7, #32]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3728      	adds	r7, #40	; 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bc90      	pop	{r4, r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	0800513c 	.word	0x0800513c
 8003898:	40021000 	.word	0x40021000
 800389c:	007a1200 	.word	0x007a1200
 80038a0:	003d0900 	.word	0x003d0900

080038a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a8:	4b02      	ldr	r3, [pc, #8]	; (80038b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	20000268 	.word	0x20000268

080038b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038bc:	f7ff fff2 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4903      	ldr	r1, [pc, #12]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	0800515c 	.word	0x0800515c

080038e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038e4:	f7ff ffde 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	0adb      	lsrs	r3, r3, #11
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4903      	ldr	r1, [pc, #12]	; (8003904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40021000 	.word	0x40021000
 8003904:	0800515c 	.word	0x0800515c

08003908 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <RCC_Delay+0x34>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <RCC_Delay+0x38>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	0a5b      	lsrs	r3, r3, #9
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003924:	bf00      	nop
  }
  while (Delay --);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1e5a      	subs	r2, r3, #1
 800392a:	60fa      	str	r2, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f9      	bne.n	8003924 <RCC_Delay+0x1c>
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr
 800393c:	20000268 	.word	0x20000268
 8003940:	10624dd3 	.word	0x10624dd3

08003944 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d07d      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003960:	2300      	movs	r3, #0
 8003962:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003964:	4b4f      	ldr	r3, [pc, #316]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10d      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003970:	4b4c      	ldr	r3, [pc, #304]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	4a4b      	ldr	r2, [pc, #300]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397a:	61d3      	str	r3, [r2, #28]
 800397c:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003988:	2301      	movs	r3, #1
 800398a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	4b46      	ldr	r3, [pc, #280]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d118      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003998:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a42      	ldr	r2, [pc, #264]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800399e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a4:	f7fe fa86 	bl	8001eb4 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039aa:	e008      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ac:	f7fe fa82 	bl	8001eb4 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e06d      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	4b3a      	ldr	r3, [pc, #232]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ca:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d02e      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d027      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e8:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039f2:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039f8:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039fe:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d014      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0e:	f7fe fa51 	bl	8001eb4 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a14:	e00a      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a16:	f7fe fa4d 	bl	8001eb4 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e036      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ee      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4917      	ldr	r1, [pc, #92]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d105      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a50:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a68:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	490b      	ldr	r1, [pc, #44]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	4904      	ldr	r1, [pc, #16]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40007000 	.word	0x40007000
 8003aac:	42420440 	.word	0x42420440

08003ab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e03f      	b.n	8003b42 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fe f8a8 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2224      	movs	r2, #36	; 0x24
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fbe5 	bl	80042c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	4613      	mov	r3, r2
 8003b56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d130      	bne.n	8003bc6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_UART_Transmit_IT+0x26>
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e029      	b.n	8003bc8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_UART_Transmit_IT+0x38>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e022      	b.n	8003bc8 <HAL_UART_Transmit_IT+0x7e>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	88fa      	ldrh	r2, [r7, #6]
 8003b94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	88fa      	ldrh	r2, [r7, #6]
 8003b9a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2221      	movs	r2, #33	; 0x21
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bc0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e000      	b.n	8003bc8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
  }
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d11d      	bne.n	8003c28 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_UART_Receive_IT+0x26>
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e016      	b.n	8003c2a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Receive_IT+0x38>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e00f      	b.n	8003c2a <HAL_UART_Receive_IT+0x58>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f9c6 	bl	8003fb0 <UART_Start_Receive_IT>
 8003c24:	4603      	mov	r3, r0
 8003c26:	e000      	b.n	8003c2a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10d      	bne.n	8003c86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_UART_IRQHandler+0x52>
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fa76 	bl	8004170 <UART_Receive_IT>
      return;
 8003c84:	e17b      	b.n	8003f7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80b1 	beq.w	8003df0 <HAL_UART_IRQHandler+0x1bc>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d105      	bne.n	8003ca4 <HAL_UART_IRQHandler+0x70>
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80a6 	beq.w	8003df0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x90>
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f043 0201 	orr.w	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_UART_IRQHandler+0xb0>
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	f043 0202 	orr.w	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_UART_IRQHandler+0xd0>
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f043 0204 	orr.w	r2, r3, #4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00f      	beq.n	8003d2e <HAL_UART_IRQHandler+0xfa>
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <HAL_UART_IRQHandler+0xee>
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f043 0208 	orr.w	r2, r3, #8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 811e 	beq.w	8003f74 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <HAL_UART_IRQHandler+0x11e>
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fa0f 	bl	8004170 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <HAL_UART_IRQHandler+0x146>
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d031      	beq.n	8003dde <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f951 	bl	8004022 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d023      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d013      	beq.n	8003dce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	4a76      	ldr	r2, [pc, #472]	; (8003f84 <HAL_UART_IRQHandler+0x350>)
 8003dac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fe44 	bl	8002a40 <HAL_DMA_Abort_IT>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	e00e      	b.n	8003dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f8da 	bl	8003f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	e00a      	b.n	8003dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8d6 	bl	8003f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	e006      	b.n	8003dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8d2 	bl	8003f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dea:	e0c3      	b.n	8003f74 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	bf00      	nop
    return;
 8003dee:	e0c1      	b.n	8003f74 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	f040 80a1 	bne.w	8003f3c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 809b 	beq.w	8003f3c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8095 	beq.w	8003f3c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d04e      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003e40:	8a3b      	ldrh	r3, [r7, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8098 	beq.w	8003f78 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e4c:	8a3a      	ldrh	r2, [r7, #16]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	f080 8092 	bcs.w	8003f78 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8a3a      	ldrh	r2, [r7, #16]
 8003e58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d02b      	beq.n	8003ebc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e72:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e92:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0210 	bic.w	r2, r2, #16
 8003eb0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fd87 	bl	80029ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f864 	bl	8003f9a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ed2:	e051      	b.n	8003f78 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d047      	beq.n	8003f7c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003eec:	8a7b      	ldrh	r3, [r7, #18]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d044      	beq.n	8003f7c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f00:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0210 	bic.w	r2, r2, #16
 8003f2e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f30:	8a7b      	ldrh	r3, [r7, #18]
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f830 	bl	8003f9a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f3a:	e01f      	b.n	8003f7c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d008      	beq.n	8003f58 <HAL_UART_IRQHandler+0x324>
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8a6 	bl	80040a2 <UART_Transmit_IT>
    return;
 8003f56:	e012      	b.n	8003f7e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00d      	beq.n	8003f7e <HAL_UART_IRQHandler+0x34a>
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f8e7 	bl	8004140 <UART_EndTransmit_IT>
    return;
 8003f72:	e004      	b.n	8003f7e <HAL_UART_IRQHandler+0x34a>
    return;
 8003f74:	bf00      	nop
 8003f76:	e002      	b.n	8003f7e <HAL_UART_IRQHandler+0x34a>
      return;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_UART_IRQHandler+0x34a>
      return;
 8003f7c:	bf00      	nop
  }
}
 8003f7e:	3728      	adds	r7, #40	; 0x28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	0800407b 	.word	0x0800407b

08003f88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr

08003f9a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	88fa      	ldrh	r2, [r7, #6]
 8003fce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2222      	movs	r2, #34	; 0x22
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0220 	orr.w	r2, r2, #32
 8004014:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004038:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0210 	bic.w	r2, r2, #16
 8004060:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff ff77 	bl	8003f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b21      	cmp	r3, #33	; 0x21
 80040b4:	d13e      	bne.n	8004134 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040be:	d114      	bne.n	80040ea <UART_Transmit_IT+0x48>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d110      	bne.n	80040ea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	1c9a      	adds	r2, r3, #2
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	621a      	str	r2, [r3, #32]
 80040e8:	e008      	b.n	80040fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	1c59      	adds	r1, r3, #1
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6211      	str	r1, [r2, #32]
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29b      	uxth	r3, r3
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4619      	mov	r1, r3
 800410a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10f      	bne.n	8004130 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800411e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800412e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e000      	b.n	8004136 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004156:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fc fced 	bl	8000b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b22      	cmp	r3, #34	; 0x22
 8004182:	f040 8099 	bne.w	80042b8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418e:	d117      	bne.n	80041c0 <UART_Receive_IT+0x50>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d113      	bne.n	80041c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	1c9a      	adds	r2, r3, #2
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	629a      	str	r2, [r3, #40]	; 0x28
 80041be:	e026      	b.n	800420e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d2:	d007      	beq.n	80041e4 <UART_Receive_IT+0x74>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <UART_Receive_IT+0x82>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d106      	bne.n	80041f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e008      	b.n	8004204 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29b      	uxth	r3, r3
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4619      	mov	r1, r3
 800421c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800421e:	2b00      	cmp	r3, #0
 8004220:	d148      	bne.n	80042b4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0220 	bic.w	r2, r2, #32
 8004230:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004240:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695a      	ldr	r2, [r3, #20]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0201 	bic.w	r2, r2, #1
 8004250:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	2b01      	cmp	r3, #1
 8004260:	d123      	bne.n	80042aa <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0210 	bic.w	r2, r2, #16
 8004276:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b10      	cmp	r3, #16
 8004284:	d10a      	bne.n	800429c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042a0:	4619      	mov	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff fe79 	bl	8003f9a <HAL_UARTEx_RxEventCallback>
 80042a8:	e002      	b.n	80042b0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fc fc84 	bl	8000bb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e002      	b.n	80042ba <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e000      	b.n	80042ba <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
  }
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042fe:	f023 030c 	bic.w	r3, r3, #12
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	430b      	orrs	r3, r1
 800430a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2c      	ldr	r2, [pc, #176]	; (80043d8 <UART_SetConfig+0x114>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d103      	bne.n	8004334 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800432c:	f7ff fad8 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	e002      	b.n	800433a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004334:	f7ff fac0 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 8004338:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	009a      	lsls	r2, r3, #2
 8004344:	441a      	add	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004350:	4a22      	ldr	r2, [pc, #136]	; (80043dc <UART_SetConfig+0x118>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	0119      	lsls	r1, r3, #4
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	009a      	lsls	r2, r3, #2
 8004364:	441a      	add	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004370:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <UART_SetConfig+0x118>)
 8004372:	fba3 0302 	umull	r0, r3, r3, r2
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2064      	movs	r0, #100	; 0x64
 800437a:	fb00 f303 	mul.w	r3, r0, r3
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	3332      	adds	r3, #50	; 0x32
 8004384:	4a15      	ldr	r2, [pc, #84]	; (80043dc <UART_SetConfig+0x118>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004390:	4419      	add	r1, r3
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	009a      	lsls	r2, r3, #2
 800439c:	441a      	add	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <UART_SetConfig+0x118>)
 80043aa:	fba3 0302 	umull	r0, r3, r3, r2
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	2064      	movs	r0, #100	; 0x64
 80043b2:	fb00 f303 	mul.w	r3, r0, r3
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	3332      	adds	r3, #50	; 0x32
 80043bc:	4a07      	ldr	r2, [pc, #28]	; (80043dc <UART_SetConfig+0x118>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	f003 020f 	and.w	r2, r3, #15
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	440a      	add	r2, r1
 80043ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40013800 	.word	0x40013800
 80043dc:	51eb851f 	.word	0x51eb851f

080043e0 <atoi>:
 80043e0:	220a      	movs	r2, #10
 80043e2:	2100      	movs	r1, #0
 80043e4:	f000 b8f8 	b.w	80045d8 <strtol>

080043e8 <__errno>:
 80043e8:	4b01      	ldr	r3, [pc, #4]	; (80043f0 <__errno+0x8>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000274 	.word	0x20000274

080043f4 <__libc_init_array>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	2600      	movs	r6, #0
 80043f8:	4d0c      	ldr	r5, [pc, #48]	; (800442c <__libc_init_array+0x38>)
 80043fa:	4c0d      	ldr	r4, [pc, #52]	; (8004430 <__libc_init_array+0x3c>)
 80043fc:	1b64      	subs	r4, r4, r5
 80043fe:	10a4      	asrs	r4, r4, #2
 8004400:	42a6      	cmp	r6, r4
 8004402:	d109      	bne.n	8004418 <__libc_init_array+0x24>
 8004404:	f000 fdf6 	bl	8004ff4 <_init>
 8004408:	2600      	movs	r6, #0
 800440a:	4d0a      	ldr	r5, [pc, #40]	; (8004434 <__libc_init_array+0x40>)
 800440c:	4c0a      	ldr	r4, [pc, #40]	; (8004438 <__libc_init_array+0x44>)
 800440e:	1b64      	subs	r4, r4, r5
 8004410:	10a4      	asrs	r4, r4, #2
 8004412:	42a6      	cmp	r6, r4
 8004414:	d105      	bne.n	8004422 <__libc_init_array+0x2e>
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	f855 3b04 	ldr.w	r3, [r5], #4
 800441c:	4798      	blx	r3
 800441e:	3601      	adds	r6, #1
 8004420:	e7ee      	b.n	8004400 <__libc_init_array+0xc>
 8004422:	f855 3b04 	ldr.w	r3, [r5], #4
 8004426:	4798      	blx	r3
 8004428:	3601      	adds	r6, #1
 800442a:	e7f2      	b.n	8004412 <__libc_init_array+0x1e>
 800442c:	08005298 	.word	0x08005298
 8004430:	08005298 	.word	0x08005298
 8004434:	08005298 	.word	0x08005298
 8004438:	0800529c 	.word	0x0800529c

0800443c <memcpy>:
 800443c:	440a      	add	r2, r1
 800443e:	4291      	cmp	r1, r2
 8004440:	f100 33ff 	add.w	r3, r0, #4294967295
 8004444:	d100      	bne.n	8004448 <memcpy+0xc>
 8004446:	4770      	bx	lr
 8004448:	b510      	push	{r4, lr}
 800444a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800444e:	4291      	cmp	r1, r2
 8004450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004454:	d1f9      	bne.n	800444a <memcpy+0xe>
 8004456:	bd10      	pop	{r4, pc}

08004458 <memset>:
 8004458:	4603      	mov	r3, r0
 800445a:	4402      	add	r2, r0
 800445c:	4293      	cmp	r3, r2
 800445e:	d100      	bne.n	8004462 <memset+0xa>
 8004460:	4770      	bx	lr
 8004462:	f803 1b01 	strb.w	r1, [r3], #1
 8004466:	e7f9      	b.n	800445c <memset+0x4>

08004468 <siprintf>:
 8004468:	b40e      	push	{r1, r2, r3}
 800446a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800446e:	b500      	push	{lr}
 8004470:	b09c      	sub	sp, #112	; 0x70
 8004472:	ab1d      	add	r3, sp, #116	; 0x74
 8004474:	9002      	str	r0, [sp, #8]
 8004476:	9006      	str	r0, [sp, #24]
 8004478:	9107      	str	r1, [sp, #28]
 800447a:	9104      	str	r1, [sp, #16]
 800447c:	4808      	ldr	r0, [pc, #32]	; (80044a0 <siprintf+0x38>)
 800447e:	4909      	ldr	r1, [pc, #36]	; (80044a4 <siprintf+0x3c>)
 8004480:	f853 2b04 	ldr.w	r2, [r3], #4
 8004484:	9105      	str	r1, [sp, #20]
 8004486:	6800      	ldr	r0, [r0, #0]
 8004488:	a902      	add	r1, sp, #8
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	f000 f92a 	bl	80046e4 <_svfiprintf_r>
 8004490:	2200      	movs	r2, #0
 8004492:	9b02      	ldr	r3, [sp, #8]
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	b01c      	add	sp, #112	; 0x70
 8004498:	f85d eb04 	ldr.w	lr, [sp], #4
 800449c:	b003      	add	sp, #12
 800449e:	4770      	bx	lr
 80044a0:	20000274 	.word	0x20000274
 80044a4:	ffff0208 	.word	0xffff0208

080044a8 <strncmp>:
 80044a8:	b510      	push	{r4, lr}
 80044aa:	b16a      	cbz	r2, 80044c8 <strncmp+0x20>
 80044ac:	3901      	subs	r1, #1
 80044ae:	1884      	adds	r4, r0, r2
 80044b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80044b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d103      	bne.n	80044c4 <strncmp+0x1c>
 80044bc:	42a0      	cmp	r0, r4
 80044be:	d001      	beq.n	80044c4 <strncmp+0x1c>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f5      	bne.n	80044b0 <strncmp+0x8>
 80044c4:	1a98      	subs	r0, r3, r2
 80044c6:	bd10      	pop	{r4, pc}
 80044c8:	4610      	mov	r0, r2
 80044ca:	e7fc      	b.n	80044c6 <strncmp+0x1e>

080044cc <_strtol_l.isra.0>:
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d2:	4686      	mov	lr, r0
 80044d4:	d001      	beq.n	80044da <_strtol_l.isra.0+0xe>
 80044d6:	2b24      	cmp	r3, #36	; 0x24
 80044d8:	d906      	bls.n	80044e8 <_strtol_l.isra.0+0x1c>
 80044da:	f7ff ff85 	bl	80043e8 <__errno>
 80044de:	2316      	movs	r3, #22
 80044e0:	6003      	str	r3, [r0, #0]
 80044e2:	2000      	movs	r0, #0
 80044e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e8:	468c      	mov	ip, r1
 80044ea:	4e3a      	ldr	r6, [pc, #232]	; (80045d4 <_strtol_l.isra.0+0x108>)
 80044ec:	4660      	mov	r0, ip
 80044ee:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80044f2:	5da5      	ldrb	r5, [r4, r6]
 80044f4:	f015 0508 	ands.w	r5, r5, #8
 80044f8:	d1f8      	bne.n	80044ec <_strtol_l.isra.0+0x20>
 80044fa:	2c2d      	cmp	r4, #45	; 0x2d
 80044fc:	d133      	bne.n	8004566 <_strtol_l.isra.0+0x9a>
 80044fe:	f04f 0801 	mov.w	r8, #1
 8004502:	f89c 4000 	ldrb.w	r4, [ip]
 8004506:	f100 0c02 	add.w	ip, r0, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d05d      	beq.n	80045ca <_strtol_l.isra.0+0xfe>
 800450e:	2b10      	cmp	r3, #16
 8004510:	d10c      	bne.n	800452c <_strtol_l.isra.0+0x60>
 8004512:	2c30      	cmp	r4, #48	; 0x30
 8004514:	d10a      	bne.n	800452c <_strtol_l.isra.0+0x60>
 8004516:	f89c 0000 	ldrb.w	r0, [ip]
 800451a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800451e:	2858      	cmp	r0, #88	; 0x58
 8004520:	d14e      	bne.n	80045c0 <_strtol_l.isra.0+0xf4>
 8004522:	2310      	movs	r3, #16
 8004524:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004528:	f10c 0c02 	add.w	ip, ip, #2
 800452c:	2500      	movs	r5, #0
 800452e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004532:	3f01      	subs	r7, #1
 8004534:	fbb7 f9f3 	udiv	r9, r7, r3
 8004538:	4628      	mov	r0, r5
 800453a:	fb03 7a19 	mls	sl, r3, r9, r7
 800453e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004542:	2e09      	cmp	r6, #9
 8004544:	d818      	bhi.n	8004578 <_strtol_l.isra.0+0xac>
 8004546:	4634      	mov	r4, r6
 8004548:	42a3      	cmp	r3, r4
 800454a:	dd24      	ble.n	8004596 <_strtol_l.isra.0+0xca>
 800454c:	2d00      	cmp	r5, #0
 800454e:	db1f      	blt.n	8004590 <_strtol_l.isra.0+0xc4>
 8004550:	4581      	cmp	r9, r0
 8004552:	d31d      	bcc.n	8004590 <_strtol_l.isra.0+0xc4>
 8004554:	d101      	bne.n	800455a <_strtol_l.isra.0+0x8e>
 8004556:	45a2      	cmp	sl, r4
 8004558:	db1a      	blt.n	8004590 <_strtol_l.isra.0+0xc4>
 800455a:	2501      	movs	r5, #1
 800455c:	fb00 4003 	mla	r0, r0, r3, r4
 8004560:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004564:	e7eb      	b.n	800453e <_strtol_l.isra.0+0x72>
 8004566:	2c2b      	cmp	r4, #43	; 0x2b
 8004568:	bf08      	it	eq
 800456a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800456e:	46a8      	mov	r8, r5
 8004570:	bf08      	it	eq
 8004572:	f100 0c02 	addeq.w	ip, r0, #2
 8004576:	e7c8      	b.n	800450a <_strtol_l.isra.0+0x3e>
 8004578:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800457c:	2e19      	cmp	r6, #25
 800457e:	d801      	bhi.n	8004584 <_strtol_l.isra.0+0xb8>
 8004580:	3c37      	subs	r4, #55	; 0x37
 8004582:	e7e1      	b.n	8004548 <_strtol_l.isra.0+0x7c>
 8004584:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004588:	2e19      	cmp	r6, #25
 800458a:	d804      	bhi.n	8004596 <_strtol_l.isra.0+0xca>
 800458c:	3c57      	subs	r4, #87	; 0x57
 800458e:	e7db      	b.n	8004548 <_strtol_l.isra.0+0x7c>
 8004590:	f04f 35ff 	mov.w	r5, #4294967295
 8004594:	e7e4      	b.n	8004560 <_strtol_l.isra.0+0x94>
 8004596:	2d00      	cmp	r5, #0
 8004598:	da08      	bge.n	80045ac <_strtol_l.isra.0+0xe0>
 800459a:	2322      	movs	r3, #34	; 0x22
 800459c:	4638      	mov	r0, r7
 800459e:	f8ce 3000 	str.w	r3, [lr]
 80045a2:	2a00      	cmp	r2, #0
 80045a4:	d09e      	beq.n	80044e4 <_strtol_l.isra.0+0x18>
 80045a6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80045aa:	e007      	b.n	80045bc <_strtol_l.isra.0+0xf0>
 80045ac:	f1b8 0f00 	cmp.w	r8, #0
 80045b0:	d000      	beq.n	80045b4 <_strtol_l.isra.0+0xe8>
 80045b2:	4240      	negs	r0, r0
 80045b4:	2a00      	cmp	r2, #0
 80045b6:	d095      	beq.n	80044e4 <_strtol_l.isra.0+0x18>
 80045b8:	2d00      	cmp	r5, #0
 80045ba:	d1f4      	bne.n	80045a6 <_strtol_l.isra.0+0xda>
 80045bc:	6011      	str	r1, [r2, #0]
 80045be:	e791      	b.n	80044e4 <_strtol_l.isra.0+0x18>
 80045c0:	2430      	movs	r4, #48	; 0x30
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1b2      	bne.n	800452c <_strtol_l.isra.0+0x60>
 80045c6:	2308      	movs	r3, #8
 80045c8:	e7b0      	b.n	800452c <_strtol_l.isra.0+0x60>
 80045ca:	2c30      	cmp	r4, #48	; 0x30
 80045cc:	d0a3      	beq.n	8004516 <_strtol_l.isra.0+0x4a>
 80045ce:	230a      	movs	r3, #10
 80045d0:	e7ac      	b.n	800452c <_strtol_l.isra.0+0x60>
 80045d2:	bf00      	nop
 80045d4:	08005165 	.word	0x08005165

080045d8 <strtol>:
 80045d8:	4613      	mov	r3, r2
 80045da:	460a      	mov	r2, r1
 80045dc:	4601      	mov	r1, r0
 80045de:	4802      	ldr	r0, [pc, #8]	; (80045e8 <strtol+0x10>)
 80045e0:	6800      	ldr	r0, [r0, #0]
 80045e2:	f7ff bf73 	b.w	80044cc <_strtol_l.isra.0>
 80045e6:	bf00      	nop
 80045e8:	20000274 	.word	0x20000274

080045ec <_vsiprintf_r>:
 80045ec:	b500      	push	{lr}
 80045ee:	b09b      	sub	sp, #108	; 0x6c
 80045f0:	9100      	str	r1, [sp, #0]
 80045f2:	9104      	str	r1, [sp, #16]
 80045f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045f8:	9105      	str	r1, [sp, #20]
 80045fa:	9102      	str	r1, [sp, #8]
 80045fc:	4905      	ldr	r1, [pc, #20]	; (8004614 <_vsiprintf_r+0x28>)
 80045fe:	9103      	str	r1, [sp, #12]
 8004600:	4669      	mov	r1, sp
 8004602:	f000 f86f 	bl	80046e4 <_svfiprintf_r>
 8004606:	2200      	movs	r2, #0
 8004608:	9b00      	ldr	r3, [sp, #0]
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	b01b      	add	sp, #108	; 0x6c
 800460e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004612:	bf00      	nop
 8004614:	ffff0208 	.word	0xffff0208

08004618 <vsiprintf>:
 8004618:	4613      	mov	r3, r2
 800461a:	460a      	mov	r2, r1
 800461c:	4601      	mov	r1, r0
 800461e:	4802      	ldr	r0, [pc, #8]	; (8004628 <vsiprintf+0x10>)
 8004620:	6800      	ldr	r0, [r0, #0]
 8004622:	f7ff bfe3 	b.w	80045ec <_vsiprintf_r>
 8004626:	bf00      	nop
 8004628:	20000274 	.word	0x20000274

0800462c <__ssputs_r>:
 800462c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004630:	688e      	ldr	r6, [r1, #8]
 8004632:	4682      	mov	sl, r0
 8004634:	429e      	cmp	r6, r3
 8004636:	460c      	mov	r4, r1
 8004638:	4690      	mov	r8, r2
 800463a:	461f      	mov	r7, r3
 800463c:	d838      	bhi.n	80046b0 <__ssputs_r+0x84>
 800463e:	898a      	ldrh	r2, [r1, #12]
 8004640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004644:	d032      	beq.n	80046ac <__ssputs_r+0x80>
 8004646:	6825      	ldr	r5, [r4, #0]
 8004648:	6909      	ldr	r1, [r1, #16]
 800464a:	3301      	adds	r3, #1
 800464c:	eba5 0901 	sub.w	r9, r5, r1
 8004650:	6965      	ldr	r5, [r4, #20]
 8004652:	444b      	add	r3, r9
 8004654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004658:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800465c:	106d      	asrs	r5, r5, #1
 800465e:	429d      	cmp	r5, r3
 8004660:	bf38      	it	cc
 8004662:	461d      	movcc	r5, r3
 8004664:	0553      	lsls	r3, r2, #21
 8004666:	d531      	bpl.n	80046cc <__ssputs_r+0xa0>
 8004668:	4629      	mov	r1, r5
 800466a:	f000 fb45 	bl	8004cf8 <_malloc_r>
 800466e:	4606      	mov	r6, r0
 8004670:	b950      	cbnz	r0, 8004688 <__ssputs_r+0x5c>
 8004672:	230c      	movs	r3, #12
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	f8ca 3000 	str.w	r3, [sl]
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004682:	81a3      	strh	r3, [r4, #12]
 8004684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004688:	464a      	mov	r2, r9
 800468a:	6921      	ldr	r1, [r4, #16]
 800468c:	f7ff fed6 	bl	800443c <memcpy>
 8004690:	89a3      	ldrh	r3, [r4, #12]
 8004692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469a:	81a3      	strh	r3, [r4, #12]
 800469c:	6126      	str	r6, [r4, #16]
 800469e:	444e      	add	r6, r9
 80046a0:	6026      	str	r6, [r4, #0]
 80046a2:	463e      	mov	r6, r7
 80046a4:	6165      	str	r5, [r4, #20]
 80046a6:	eba5 0509 	sub.w	r5, r5, r9
 80046aa:	60a5      	str	r5, [r4, #8]
 80046ac:	42be      	cmp	r6, r7
 80046ae:	d900      	bls.n	80046b2 <__ssputs_r+0x86>
 80046b0:	463e      	mov	r6, r7
 80046b2:	4632      	mov	r2, r6
 80046b4:	4641      	mov	r1, r8
 80046b6:	6820      	ldr	r0, [r4, #0]
 80046b8:	f000 fab8 	bl	8004c2c <memmove>
 80046bc:	68a3      	ldr	r3, [r4, #8]
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	1b9b      	subs	r3, r3, r6
 80046c2:	4432      	add	r2, r6
 80046c4:	2000      	movs	r0, #0
 80046c6:	60a3      	str	r3, [r4, #8]
 80046c8:	6022      	str	r2, [r4, #0]
 80046ca:	e7db      	b.n	8004684 <__ssputs_r+0x58>
 80046cc:	462a      	mov	r2, r5
 80046ce:	f000 fb6d 	bl	8004dac <_realloc_r>
 80046d2:	4606      	mov	r6, r0
 80046d4:	2800      	cmp	r0, #0
 80046d6:	d1e1      	bne.n	800469c <__ssputs_r+0x70>
 80046d8:	4650      	mov	r0, sl
 80046da:	6921      	ldr	r1, [r4, #16]
 80046dc:	f000 fac0 	bl	8004c60 <_free_r>
 80046e0:	e7c7      	b.n	8004672 <__ssputs_r+0x46>
	...

080046e4 <_svfiprintf_r>:
 80046e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e8:	4698      	mov	r8, r3
 80046ea:	898b      	ldrh	r3, [r1, #12]
 80046ec:	4607      	mov	r7, r0
 80046ee:	061b      	lsls	r3, r3, #24
 80046f0:	460d      	mov	r5, r1
 80046f2:	4614      	mov	r4, r2
 80046f4:	b09d      	sub	sp, #116	; 0x74
 80046f6:	d50e      	bpl.n	8004716 <_svfiprintf_r+0x32>
 80046f8:	690b      	ldr	r3, [r1, #16]
 80046fa:	b963      	cbnz	r3, 8004716 <_svfiprintf_r+0x32>
 80046fc:	2140      	movs	r1, #64	; 0x40
 80046fe:	f000 fafb 	bl	8004cf8 <_malloc_r>
 8004702:	6028      	str	r0, [r5, #0]
 8004704:	6128      	str	r0, [r5, #16]
 8004706:	b920      	cbnz	r0, 8004712 <_svfiprintf_r+0x2e>
 8004708:	230c      	movs	r3, #12
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	f04f 30ff 	mov.w	r0, #4294967295
 8004710:	e0d1      	b.n	80048b6 <_svfiprintf_r+0x1d2>
 8004712:	2340      	movs	r3, #64	; 0x40
 8004714:	616b      	str	r3, [r5, #20]
 8004716:	2300      	movs	r3, #0
 8004718:	9309      	str	r3, [sp, #36]	; 0x24
 800471a:	2320      	movs	r3, #32
 800471c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004720:	2330      	movs	r3, #48	; 0x30
 8004722:	f04f 0901 	mov.w	r9, #1
 8004726:	f8cd 800c 	str.w	r8, [sp, #12]
 800472a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048d0 <_svfiprintf_r+0x1ec>
 800472e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004732:	4623      	mov	r3, r4
 8004734:	469a      	mov	sl, r3
 8004736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800473a:	b10a      	cbz	r2, 8004740 <_svfiprintf_r+0x5c>
 800473c:	2a25      	cmp	r2, #37	; 0x25
 800473e:	d1f9      	bne.n	8004734 <_svfiprintf_r+0x50>
 8004740:	ebba 0b04 	subs.w	fp, sl, r4
 8004744:	d00b      	beq.n	800475e <_svfiprintf_r+0x7a>
 8004746:	465b      	mov	r3, fp
 8004748:	4622      	mov	r2, r4
 800474a:	4629      	mov	r1, r5
 800474c:	4638      	mov	r0, r7
 800474e:	f7ff ff6d 	bl	800462c <__ssputs_r>
 8004752:	3001      	adds	r0, #1
 8004754:	f000 80aa 	beq.w	80048ac <_svfiprintf_r+0x1c8>
 8004758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800475a:	445a      	add	r2, fp
 800475c:	9209      	str	r2, [sp, #36]	; 0x24
 800475e:	f89a 3000 	ldrb.w	r3, [sl]
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 80a2 	beq.w	80048ac <_svfiprintf_r+0x1c8>
 8004768:	2300      	movs	r3, #0
 800476a:	f04f 32ff 	mov.w	r2, #4294967295
 800476e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004772:	f10a 0a01 	add.w	sl, sl, #1
 8004776:	9304      	str	r3, [sp, #16]
 8004778:	9307      	str	r3, [sp, #28]
 800477a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800477e:	931a      	str	r3, [sp, #104]	; 0x68
 8004780:	4654      	mov	r4, sl
 8004782:	2205      	movs	r2, #5
 8004784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004788:	4851      	ldr	r0, [pc, #324]	; (80048d0 <_svfiprintf_r+0x1ec>)
 800478a:	f000 fa41 	bl	8004c10 <memchr>
 800478e:	9a04      	ldr	r2, [sp, #16]
 8004790:	b9d8      	cbnz	r0, 80047ca <_svfiprintf_r+0xe6>
 8004792:	06d0      	lsls	r0, r2, #27
 8004794:	bf44      	itt	mi
 8004796:	2320      	movmi	r3, #32
 8004798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800479c:	0711      	lsls	r1, r2, #28
 800479e:	bf44      	itt	mi
 80047a0:	232b      	movmi	r3, #43	; 0x2b
 80047a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047a6:	f89a 3000 	ldrb.w	r3, [sl]
 80047aa:	2b2a      	cmp	r3, #42	; 0x2a
 80047ac:	d015      	beq.n	80047da <_svfiprintf_r+0xf6>
 80047ae:	4654      	mov	r4, sl
 80047b0:	2000      	movs	r0, #0
 80047b2:	f04f 0c0a 	mov.w	ip, #10
 80047b6:	9a07      	ldr	r2, [sp, #28]
 80047b8:	4621      	mov	r1, r4
 80047ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047be:	3b30      	subs	r3, #48	; 0x30
 80047c0:	2b09      	cmp	r3, #9
 80047c2:	d94e      	bls.n	8004862 <_svfiprintf_r+0x17e>
 80047c4:	b1b0      	cbz	r0, 80047f4 <_svfiprintf_r+0x110>
 80047c6:	9207      	str	r2, [sp, #28]
 80047c8:	e014      	b.n	80047f4 <_svfiprintf_r+0x110>
 80047ca:	eba0 0308 	sub.w	r3, r0, r8
 80047ce:	fa09 f303 	lsl.w	r3, r9, r3
 80047d2:	4313      	orrs	r3, r2
 80047d4:	46a2      	mov	sl, r4
 80047d6:	9304      	str	r3, [sp, #16]
 80047d8:	e7d2      	b.n	8004780 <_svfiprintf_r+0x9c>
 80047da:	9b03      	ldr	r3, [sp, #12]
 80047dc:	1d19      	adds	r1, r3, #4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	9103      	str	r1, [sp, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	bfbb      	ittet	lt
 80047e6:	425b      	neglt	r3, r3
 80047e8:	f042 0202 	orrlt.w	r2, r2, #2
 80047ec:	9307      	strge	r3, [sp, #28]
 80047ee:	9307      	strlt	r3, [sp, #28]
 80047f0:	bfb8      	it	lt
 80047f2:	9204      	strlt	r2, [sp, #16]
 80047f4:	7823      	ldrb	r3, [r4, #0]
 80047f6:	2b2e      	cmp	r3, #46	; 0x2e
 80047f8:	d10c      	bne.n	8004814 <_svfiprintf_r+0x130>
 80047fa:	7863      	ldrb	r3, [r4, #1]
 80047fc:	2b2a      	cmp	r3, #42	; 0x2a
 80047fe:	d135      	bne.n	800486c <_svfiprintf_r+0x188>
 8004800:	9b03      	ldr	r3, [sp, #12]
 8004802:	3402      	adds	r4, #2
 8004804:	1d1a      	adds	r2, r3, #4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	9203      	str	r2, [sp, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	bfb8      	it	lt
 800480e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004812:	9305      	str	r3, [sp, #20]
 8004814:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048e0 <_svfiprintf_r+0x1fc>
 8004818:	2203      	movs	r2, #3
 800481a:	4650      	mov	r0, sl
 800481c:	7821      	ldrb	r1, [r4, #0]
 800481e:	f000 f9f7 	bl	8004c10 <memchr>
 8004822:	b140      	cbz	r0, 8004836 <_svfiprintf_r+0x152>
 8004824:	2340      	movs	r3, #64	; 0x40
 8004826:	eba0 000a 	sub.w	r0, r0, sl
 800482a:	fa03 f000 	lsl.w	r0, r3, r0
 800482e:	9b04      	ldr	r3, [sp, #16]
 8004830:	3401      	adds	r4, #1
 8004832:	4303      	orrs	r3, r0
 8004834:	9304      	str	r3, [sp, #16]
 8004836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800483a:	2206      	movs	r2, #6
 800483c:	4825      	ldr	r0, [pc, #148]	; (80048d4 <_svfiprintf_r+0x1f0>)
 800483e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004842:	f000 f9e5 	bl	8004c10 <memchr>
 8004846:	2800      	cmp	r0, #0
 8004848:	d038      	beq.n	80048bc <_svfiprintf_r+0x1d8>
 800484a:	4b23      	ldr	r3, [pc, #140]	; (80048d8 <_svfiprintf_r+0x1f4>)
 800484c:	bb1b      	cbnz	r3, 8004896 <_svfiprintf_r+0x1b2>
 800484e:	9b03      	ldr	r3, [sp, #12]
 8004850:	3307      	adds	r3, #7
 8004852:	f023 0307 	bic.w	r3, r3, #7
 8004856:	3308      	adds	r3, #8
 8004858:	9303      	str	r3, [sp, #12]
 800485a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800485c:	4433      	add	r3, r6
 800485e:	9309      	str	r3, [sp, #36]	; 0x24
 8004860:	e767      	b.n	8004732 <_svfiprintf_r+0x4e>
 8004862:	460c      	mov	r4, r1
 8004864:	2001      	movs	r0, #1
 8004866:	fb0c 3202 	mla	r2, ip, r2, r3
 800486a:	e7a5      	b.n	80047b8 <_svfiprintf_r+0xd4>
 800486c:	2300      	movs	r3, #0
 800486e:	f04f 0c0a 	mov.w	ip, #10
 8004872:	4619      	mov	r1, r3
 8004874:	3401      	adds	r4, #1
 8004876:	9305      	str	r3, [sp, #20]
 8004878:	4620      	mov	r0, r4
 800487a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800487e:	3a30      	subs	r2, #48	; 0x30
 8004880:	2a09      	cmp	r2, #9
 8004882:	d903      	bls.n	800488c <_svfiprintf_r+0x1a8>
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0c5      	beq.n	8004814 <_svfiprintf_r+0x130>
 8004888:	9105      	str	r1, [sp, #20]
 800488a:	e7c3      	b.n	8004814 <_svfiprintf_r+0x130>
 800488c:	4604      	mov	r4, r0
 800488e:	2301      	movs	r3, #1
 8004890:	fb0c 2101 	mla	r1, ip, r1, r2
 8004894:	e7f0      	b.n	8004878 <_svfiprintf_r+0x194>
 8004896:	ab03      	add	r3, sp, #12
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	462a      	mov	r2, r5
 800489c:	4638      	mov	r0, r7
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <_svfiprintf_r+0x1f8>)
 80048a0:	a904      	add	r1, sp, #16
 80048a2:	f3af 8000 	nop.w
 80048a6:	1c42      	adds	r2, r0, #1
 80048a8:	4606      	mov	r6, r0
 80048aa:	d1d6      	bne.n	800485a <_svfiprintf_r+0x176>
 80048ac:	89ab      	ldrh	r3, [r5, #12]
 80048ae:	065b      	lsls	r3, r3, #25
 80048b0:	f53f af2c 	bmi.w	800470c <_svfiprintf_r+0x28>
 80048b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048b6:	b01d      	add	sp, #116	; 0x74
 80048b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048bc:	ab03      	add	r3, sp, #12
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	462a      	mov	r2, r5
 80048c2:	4638      	mov	r0, r7
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <_svfiprintf_r+0x1f8>)
 80048c6:	a904      	add	r1, sp, #16
 80048c8:	f000 f87c 	bl	80049c4 <_printf_i>
 80048cc:	e7eb      	b.n	80048a6 <_svfiprintf_r+0x1c2>
 80048ce:	bf00      	nop
 80048d0:	08005265 	.word	0x08005265
 80048d4:	0800526f 	.word	0x0800526f
 80048d8:	00000000 	.word	0x00000000
 80048dc:	0800462d 	.word	0x0800462d
 80048e0:	0800526b 	.word	0x0800526b

080048e4 <_printf_common>:
 80048e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e8:	4616      	mov	r6, r2
 80048ea:	4699      	mov	r9, r3
 80048ec:	688a      	ldr	r2, [r1, #8]
 80048ee:	690b      	ldr	r3, [r1, #16]
 80048f0:	4607      	mov	r7, r0
 80048f2:	4293      	cmp	r3, r2
 80048f4:	bfb8      	it	lt
 80048f6:	4613      	movlt	r3, r2
 80048f8:	6033      	str	r3, [r6, #0]
 80048fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048fe:	460c      	mov	r4, r1
 8004900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004904:	b10a      	cbz	r2, 800490a <_printf_common+0x26>
 8004906:	3301      	adds	r3, #1
 8004908:	6033      	str	r3, [r6, #0]
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	0699      	lsls	r1, r3, #26
 800490e:	bf42      	ittt	mi
 8004910:	6833      	ldrmi	r3, [r6, #0]
 8004912:	3302      	addmi	r3, #2
 8004914:	6033      	strmi	r3, [r6, #0]
 8004916:	6825      	ldr	r5, [r4, #0]
 8004918:	f015 0506 	ands.w	r5, r5, #6
 800491c:	d106      	bne.n	800492c <_printf_common+0x48>
 800491e:	f104 0a19 	add.w	sl, r4, #25
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	6832      	ldr	r2, [r6, #0]
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	42ab      	cmp	r3, r5
 800492a:	dc28      	bgt.n	800497e <_printf_common+0x9a>
 800492c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004930:	1e13      	subs	r3, r2, #0
 8004932:	6822      	ldr	r2, [r4, #0]
 8004934:	bf18      	it	ne
 8004936:	2301      	movne	r3, #1
 8004938:	0692      	lsls	r2, r2, #26
 800493a:	d42d      	bmi.n	8004998 <_printf_common+0xb4>
 800493c:	4649      	mov	r1, r9
 800493e:	4638      	mov	r0, r7
 8004940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004944:	47c0      	blx	r8
 8004946:	3001      	adds	r0, #1
 8004948:	d020      	beq.n	800498c <_printf_common+0xa8>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	68e5      	ldr	r5, [r4, #12]
 800494e:	f003 0306 	and.w	r3, r3, #6
 8004952:	2b04      	cmp	r3, #4
 8004954:	bf18      	it	ne
 8004956:	2500      	movne	r5, #0
 8004958:	6832      	ldr	r2, [r6, #0]
 800495a:	f04f 0600 	mov.w	r6, #0
 800495e:	68a3      	ldr	r3, [r4, #8]
 8004960:	bf08      	it	eq
 8004962:	1aad      	subeq	r5, r5, r2
 8004964:	6922      	ldr	r2, [r4, #16]
 8004966:	bf08      	it	eq
 8004968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800496c:	4293      	cmp	r3, r2
 800496e:	bfc4      	itt	gt
 8004970:	1a9b      	subgt	r3, r3, r2
 8004972:	18ed      	addgt	r5, r5, r3
 8004974:	341a      	adds	r4, #26
 8004976:	42b5      	cmp	r5, r6
 8004978:	d11a      	bne.n	80049b0 <_printf_common+0xcc>
 800497a:	2000      	movs	r0, #0
 800497c:	e008      	b.n	8004990 <_printf_common+0xac>
 800497e:	2301      	movs	r3, #1
 8004980:	4652      	mov	r2, sl
 8004982:	4649      	mov	r1, r9
 8004984:	4638      	mov	r0, r7
 8004986:	47c0      	blx	r8
 8004988:	3001      	adds	r0, #1
 800498a:	d103      	bne.n	8004994 <_printf_common+0xb0>
 800498c:	f04f 30ff 	mov.w	r0, #4294967295
 8004990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004994:	3501      	adds	r5, #1
 8004996:	e7c4      	b.n	8004922 <_printf_common+0x3e>
 8004998:	2030      	movs	r0, #48	; 0x30
 800499a:	18e1      	adds	r1, r4, r3
 800499c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049a6:	4422      	add	r2, r4
 80049a8:	3302      	adds	r3, #2
 80049aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049ae:	e7c5      	b.n	800493c <_printf_common+0x58>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4622      	mov	r2, r4
 80049b4:	4649      	mov	r1, r9
 80049b6:	4638      	mov	r0, r7
 80049b8:	47c0      	blx	r8
 80049ba:	3001      	adds	r0, #1
 80049bc:	d0e6      	beq.n	800498c <_printf_common+0xa8>
 80049be:	3601      	adds	r6, #1
 80049c0:	e7d9      	b.n	8004976 <_printf_common+0x92>
	...

080049c4 <_printf_i>:
 80049c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049c8:	460c      	mov	r4, r1
 80049ca:	7e27      	ldrb	r7, [r4, #24]
 80049cc:	4691      	mov	r9, r2
 80049ce:	2f78      	cmp	r7, #120	; 0x78
 80049d0:	4680      	mov	r8, r0
 80049d2:	469a      	mov	sl, r3
 80049d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049da:	d807      	bhi.n	80049ec <_printf_i+0x28>
 80049dc:	2f62      	cmp	r7, #98	; 0x62
 80049de:	d80a      	bhi.n	80049f6 <_printf_i+0x32>
 80049e0:	2f00      	cmp	r7, #0
 80049e2:	f000 80d9 	beq.w	8004b98 <_printf_i+0x1d4>
 80049e6:	2f58      	cmp	r7, #88	; 0x58
 80049e8:	f000 80a4 	beq.w	8004b34 <_printf_i+0x170>
 80049ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049f4:	e03a      	b.n	8004a6c <_printf_i+0xa8>
 80049f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049fa:	2b15      	cmp	r3, #21
 80049fc:	d8f6      	bhi.n	80049ec <_printf_i+0x28>
 80049fe:	a001      	add	r0, pc, #4	; (adr r0, 8004a04 <_printf_i+0x40>)
 8004a00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a04:	08004a5d 	.word	0x08004a5d
 8004a08:	08004a71 	.word	0x08004a71
 8004a0c:	080049ed 	.word	0x080049ed
 8004a10:	080049ed 	.word	0x080049ed
 8004a14:	080049ed 	.word	0x080049ed
 8004a18:	080049ed 	.word	0x080049ed
 8004a1c:	08004a71 	.word	0x08004a71
 8004a20:	080049ed 	.word	0x080049ed
 8004a24:	080049ed 	.word	0x080049ed
 8004a28:	080049ed 	.word	0x080049ed
 8004a2c:	080049ed 	.word	0x080049ed
 8004a30:	08004b7f 	.word	0x08004b7f
 8004a34:	08004aa1 	.word	0x08004aa1
 8004a38:	08004b61 	.word	0x08004b61
 8004a3c:	080049ed 	.word	0x080049ed
 8004a40:	080049ed 	.word	0x080049ed
 8004a44:	08004ba1 	.word	0x08004ba1
 8004a48:	080049ed 	.word	0x080049ed
 8004a4c:	08004aa1 	.word	0x08004aa1
 8004a50:	080049ed 	.word	0x080049ed
 8004a54:	080049ed 	.word	0x080049ed
 8004a58:	08004b69 	.word	0x08004b69
 8004a5c:	680b      	ldr	r3, [r1, #0]
 8004a5e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a62:	1d1a      	adds	r2, r3, #4
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	600a      	str	r2, [r1, #0]
 8004a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0a4      	b.n	8004bba <_printf_i+0x1f6>
 8004a70:	6825      	ldr	r5, [r4, #0]
 8004a72:	6808      	ldr	r0, [r1, #0]
 8004a74:	062e      	lsls	r6, r5, #24
 8004a76:	f100 0304 	add.w	r3, r0, #4
 8004a7a:	d50a      	bpl.n	8004a92 <_printf_i+0xce>
 8004a7c:	6805      	ldr	r5, [r0, #0]
 8004a7e:	600b      	str	r3, [r1, #0]
 8004a80:	2d00      	cmp	r5, #0
 8004a82:	da03      	bge.n	8004a8c <_printf_i+0xc8>
 8004a84:	232d      	movs	r3, #45	; 0x2d
 8004a86:	426d      	negs	r5, r5
 8004a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a8c:	230a      	movs	r3, #10
 8004a8e:	485e      	ldr	r0, [pc, #376]	; (8004c08 <_printf_i+0x244>)
 8004a90:	e019      	b.n	8004ac6 <_printf_i+0x102>
 8004a92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a96:	6805      	ldr	r5, [r0, #0]
 8004a98:	600b      	str	r3, [r1, #0]
 8004a9a:	bf18      	it	ne
 8004a9c:	b22d      	sxthne	r5, r5
 8004a9e:	e7ef      	b.n	8004a80 <_printf_i+0xbc>
 8004aa0:	680b      	ldr	r3, [r1, #0]
 8004aa2:	6825      	ldr	r5, [r4, #0]
 8004aa4:	1d18      	adds	r0, r3, #4
 8004aa6:	6008      	str	r0, [r1, #0]
 8004aa8:	0628      	lsls	r0, r5, #24
 8004aaa:	d501      	bpl.n	8004ab0 <_printf_i+0xec>
 8004aac:	681d      	ldr	r5, [r3, #0]
 8004aae:	e002      	b.n	8004ab6 <_printf_i+0xf2>
 8004ab0:	0669      	lsls	r1, r5, #25
 8004ab2:	d5fb      	bpl.n	8004aac <_printf_i+0xe8>
 8004ab4:	881d      	ldrh	r5, [r3, #0]
 8004ab6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ab8:	bf0c      	ite	eq
 8004aba:	2308      	moveq	r3, #8
 8004abc:	230a      	movne	r3, #10
 8004abe:	4852      	ldr	r0, [pc, #328]	; (8004c08 <_printf_i+0x244>)
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ac6:	6866      	ldr	r6, [r4, #4]
 8004ac8:	2e00      	cmp	r6, #0
 8004aca:	bfa8      	it	ge
 8004acc:	6821      	ldrge	r1, [r4, #0]
 8004ace:	60a6      	str	r6, [r4, #8]
 8004ad0:	bfa4      	itt	ge
 8004ad2:	f021 0104 	bicge.w	r1, r1, #4
 8004ad6:	6021      	strge	r1, [r4, #0]
 8004ad8:	b90d      	cbnz	r5, 8004ade <_printf_i+0x11a>
 8004ada:	2e00      	cmp	r6, #0
 8004adc:	d04d      	beq.n	8004b7a <_printf_i+0x1b6>
 8004ade:	4616      	mov	r6, r2
 8004ae0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ae4:	fb03 5711 	mls	r7, r3, r1, r5
 8004ae8:	5dc7      	ldrb	r7, [r0, r7]
 8004aea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004aee:	462f      	mov	r7, r5
 8004af0:	42bb      	cmp	r3, r7
 8004af2:	460d      	mov	r5, r1
 8004af4:	d9f4      	bls.n	8004ae0 <_printf_i+0x11c>
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d10b      	bne.n	8004b12 <_printf_i+0x14e>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	07df      	lsls	r7, r3, #31
 8004afe:	d508      	bpl.n	8004b12 <_printf_i+0x14e>
 8004b00:	6923      	ldr	r3, [r4, #16]
 8004b02:	6861      	ldr	r1, [r4, #4]
 8004b04:	4299      	cmp	r1, r3
 8004b06:	bfde      	ittt	le
 8004b08:	2330      	movle	r3, #48	; 0x30
 8004b0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b12:	1b92      	subs	r2, r2, r6
 8004b14:	6122      	str	r2, [r4, #16]
 8004b16:	464b      	mov	r3, r9
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	f8cd a000 	str.w	sl, [sp]
 8004b20:	aa03      	add	r2, sp, #12
 8004b22:	f7ff fedf 	bl	80048e4 <_printf_common>
 8004b26:	3001      	adds	r0, #1
 8004b28:	d14c      	bne.n	8004bc4 <_printf_i+0x200>
 8004b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2e:	b004      	add	sp, #16
 8004b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b34:	4834      	ldr	r0, [pc, #208]	; (8004c08 <_printf_i+0x244>)
 8004b36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b3a:	680e      	ldr	r6, [r1, #0]
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b42:	061f      	lsls	r7, r3, #24
 8004b44:	600e      	str	r6, [r1, #0]
 8004b46:	d514      	bpl.n	8004b72 <_printf_i+0x1ae>
 8004b48:	07d9      	lsls	r1, r3, #31
 8004b4a:	bf44      	itt	mi
 8004b4c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b50:	6023      	strmi	r3, [r4, #0]
 8004b52:	b91d      	cbnz	r5, 8004b5c <_printf_i+0x198>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f023 0320 	bic.w	r3, r3, #32
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	2310      	movs	r3, #16
 8004b5e:	e7af      	b.n	8004ac0 <_printf_i+0xfc>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	f043 0320 	orr.w	r3, r3, #32
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	2378      	movs	r3, #120	; 0x78
 8004b6a:	4828      	ldr	r0, [pc, #160]	; (8004c0c <_printf_i+0x248>)
 8004b6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b70:	e7e3      	b.n	8004b3a <_printf_i+0x176>
 8004b72:	065e      	lsls	r6, r3, #25
 8004b74:	bf48      	it	mi
 8004b76:	b2ad      	uxthmi	r5, r5
 8004b78:	e7e6      	b.n	8004b48 <_printf_i+0x184>
 8004b7a:	4616      	mov	r6, r2
 8004b7c:	e7bb      	b.n	8004af6 <_printf_i+0x132>
 8004b7e:	680b      	ldr	r3, [r1, #0]
 8004b80:	6826      	ldr	r6, [r4, #0]
 8004b82:	1d1d      	adds	r5, r3, #4
 8004b84:	6960      	ldr	r0, [r4, #20]
 8004b86:	600d      	str	r5, [r1, #0]
 8004b88:	0635      	lsls	r5, r6, #24
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	d501      	bpl.n	8004b92 <_printf_i+0x1ce>
 8004b8e:	6018      	str	r0, [r3, #0]
 8004b90:	e002      	b.n	8004b98 <_printf_i+0x1d4>
 8004b92:	0671      	lsls	r1, r6, #25
 8004b94:	d5fb      	bpl.n	8004b8e <_printf_i+0x1ca>
 8004b96:	8018      	strh	r0, [r3, #0]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4616      	mov	r6, r2
 8004b9c:	6123      	str	r3, [r4, #16]
 8004b9e:	e7ba      	b.n	8004b16 <_printf_i+0x152>
 8004ba0:	680b      	ldr	r3, [r1, #0]
 8004ba2:	1d1a      	adds	r2, r3, #4
 8004ba4:	600a      	str	r2, [r1, #0]
 8004ba6:	681e      	ldr	r6, [r3, #0]
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4630      	mov	r0, r6
 8004bac:	6862      	ldr	r2, [r4, #4]
 8004bae:	f000 f82f 	bl	8004c10 <memchr>
 8004bb2:	b108      	cbz	r0, 8004bb8 <_printf_i+0x1f4>
 8004bb4:	1b80      	subs	r0, r0, r6
 8004bb6:	6060      	str	r0, [r4, #4]
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	6123      	str	r3, [r4, #16]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bc2:	e7a8      	b.n	8004b16 <_printf_i+0x152>
 8004bc4:	4632      	mov	r2, r6
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4640      	mov	r0, r8
 8004bca:	6923      	ldr	r3, [r4, #16]
 8004bcc:	47d0      	blx	sl
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d0ab      	beq.n	8004b2a <_printf_i+0x166>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	079b      	lsls	r3, r3, #30
 8004bd6:	d413      	bmi.n	8004c00 <_printf_i+0x23c>
 8004bd8:	68e0      	ldr	r0, [r4, #12]
 8004bda:	9b03      	ldr	r3, [sp, #12]
 8004bdc:	4298      	cmp	r0, r3
 8004bde:	bfb8      	it	lt
 8004be0:	4618      	movlt	r0, r3
 8004be2:	e7a4      	b.n	8004b2e <_printf_i+0x16a>
 8004be4:	2301      	movs	r3, #1
 8004be6:	4632      	mov	r2, r6
 8004be8:	4649      	mov	r1, r9
 8004bea:	4640      	mov	r0, r8
 8004bec:	47d0      	blx	sl
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d09b      	beq.n	8004b2a <_printf_i+0x166>
 8004bf2:	3501      	adds	r5, #1
 8004bf4:	68e3      	ldr	r3, [r4, #12]
 8004bf6:	9903      	ldr	r1, [sp, #12]
 8004bf8:	1a5b      	subs	r3, r3, r1
 8004bfa:	42ab      	cmp	r3, r5
 8004bfc:	dcf2      	bgt.n	8004be4 <_printf_i+0x220>
 8004bfe:	e7eb      	b.n	8004bd8 <_printf_i+0x214>
 8004c00:	2500      	movs	r5, #0
 8004c02:	f104 0619 	add.w	r6, r4, #25
 8004c06:	e7f5      	b.n	8004bf4 <_printf_i+0x230>
 8004c08:	08005276 	.word	0x08005276
 8004c0c:	08005287 	.word	0x08005287

08004c10 <memchr>:
 8004c10:	4603      	mov	r3, r0
 8004c12:	b510      	push	{r4, lr}
 8004c14:	b2c9      	uxtb	r1, r1
 8004c16:	4402      	add	r2, r0
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	d101      	bne.n	8004c22 <memchr+0x12>
 8004c1e:	2000      	movs	r0, #0
 8004c20:	e003      	b.n	8004c2a <memchr+0x1a>
 8004c22:	7804      	ldrb	r4, [r0, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	428c      	cmp	r4, r1
 8004c28:	d1f6      	bne.n	8004c18 <memchr+0x8>
 8004c2a:	bd10      	pop	{r4, pc}

08004c2c <memmove>:
 8004c2c:	4288      	cmp	r0, r1
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	eb01 0402 	add.w	r4, r1, r2
 8004c34:	d902      	bls.n	8004c3c <memmove+0x10>
 8004c36:	4284      	cmp	r4, r0
 8004c38:	4623      	mov	r3, r4
 8004c3a:	d807      	bhi.n	8004c4c <memmove+0x20>
 8004c3c:	1e43      	subs	r3, r0, #1
 8004c3e:	42a1      	cmp	r1, r4
 8004c40:	d008      	beq.n	8004c54 <memmove+0x28>
 8004c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c4a:	e7f8      	b.n	8004c3e <memmove+0x12>
 8004c4c:	4601      	mov	r1, r0
 8004c4e:	4402      	add	r2, r0
 8004c50:	428a      	cmp	r2, r1
 8004c52:	d100      	bne.n	8004c56 <memmove+0x2a>
 8004c54:	bd10      	pop	{r4, pc}
 8004c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c5e:	e7f7      	b.n	8004c50 <memmove+0x24>

08004c60 <_free_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4605      	mov	r5, r0
 8004c64:	2900      	cmp	r1, #0
 8004c66:	d043      	beq.n	8004cf0 <_free_r+0x90>
 8004c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c6c:	1f0c      	subs	r4, r1, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bfb8      	it	lt
 8004c72:	18e4      	addlt	r4, r4, r3
 8004c74:	f000 f8d0 	bl	8004e18 <__malloc_lock>
 8004c78:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <_free_r+0x94>)
 8004c7a:	6813      	ldr	r3, [r2, #0]
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	b933      	cbnz	r3, 8004c8e <_free_r+0x2e>
 8004c80:	6063      	str	r3, [r4, #4]
 8004c82:	6014      	str	r4, [r2, #0]
 8004c84:	4628      	mov	r0, r5
 8004c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c8a:	f000 b8cb 	b.w	8004e24 <__malloc_unlock>
 8004c8e:	42a3      	cmp	r3, r4
 8004c90:	d90a      	bls.n	8004ca8 <_free_r+0x48>
 8004c92:	6821      	ldr	r1, [r4, #0]
 8004c94:	1862      	adds	r2, r4, r1
 8004c96:	4293      	cmp	r3, r2
 8004c98:	bf01      	itttt	eq
 8004c9a:	681a      	ldreq	r2, [r3, #0]
 8004c9c:	685b      	ldreq	r3, [r3, #4]
 8004c9e:	1852      	addeq	r2, r2, r1
 8004ca0:	6022      	streq	r2, [r4, #0]
 8004ca2:	6063      	str	r3, [r4, #4]
 8004ca4:	6004      	str	r4, [r0, #0]
 8004ca6:	e7ed      	b.n	8004c84 <_free_r+0x24>
 8004ca8:	461a      	mov	r2, r3
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	b10b      	cbz	r3, 8004cb2 <_free_r+0x52>
 8004cae:	42a3      	cmp	r3, r4
 8004cb0:	d9fa      	bls.n	8004ca8 <_free_r+0x48>
 8004cb2:	6811      	ldr	r1, [r2, #0]
 8004cb4:	1850      	adds	r0, r2, r1
 8004cb6:	42a0      	cmp	r0, r4
 8004cb8:	d10b      	bne.n	8004cd2 <_free_r+0x72>
 8004cba:	6820      	ldr	r0, [r4, #0]
 8004cbc:	4401      	add	r1, r0
 8004cbe:	1850      	adds	r0, r2, r1
 8004cc0:	4283      	cmp	r3, r0
 8004cc2:	6011      	str	r1, [r2, #0]
 8004cc4:	d1de      	bne.n	8004c84 <_free_r+0x24>
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4401      	add	r1, r0
 8004ccc:	6011      	str	r1, [r2, #0]
 8004cce:	6053      	str	r3, [r2, #4]
 8004cd0:	e7d8      	b.n	8004c84 <_free_r+0x24>
 8004cd2:	d902      	bls.n	8004cda <_free_r+0x7a>
 8004cd4:	230c      	movs	r3, #12
 8004cd6:	602b      	str	r3, [r5, #0]
 8004cd8:	e7d4      	b.n	8004c84 <_free_r+0x24>
 8004cda:	6820      	ldr	r0, [r4, #0]
 8004cdc:	1821      	adds	r1, r4, r0
 8004cde:	428b      	cmp	r3, r1
 8004ce0:	bf01      	itttt	eq
 8004ce2:	6819      	ldreq	r1, [r3, #0]
 8004ce4:	685b      	ldreq	r3, [r3, #4]
 8004ce6:	1809      	addeq	r1, r1, r0
 8004ce8:	6021      	streq	r1, [r4, #0]
 8004cea:	6063      	str	r3, [r4, #4]
 8004cec:	6054      	str	r4, [r2, #4]
 8004cee:	e7c9      	b.n	8004c84 <_free_r+0x24>
 8004cf0:	bd38      	pop	{r3, r4, r5, pc}
 8004cf2:	bf00      	nop
 8004cf4:	200003bc 	.word	0x200003bc

08004cf8 <_malloc_r>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	1ccd      	adds	r5, r1, #3
 8004cfc:	f025 0503 	bic.w	r5, r5, #3
 8004d00:	3508      	adds	r5, #8
 8004d02:	2d0c      	cmp	r5, #12
 8004d04:	bf38      	it	cc
 8004d06:	250c      	movcc	r5, #12
 8004d08:	2d00      	cmp	r5, #0
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	db01      	blt.n	8004d12 <_malloc_r+0x1a>
 8004d0e:	42a9      	cmp	r1, r5
 8004d10:	d903      	bls.n	8004d1a <_malloc_r+0x22>
 8004d12:	230c      	movs	r3, #12
 8004d14:	6033      	str	r3, [r6, #0]
 8004d16:	2000      	movs	r0, #0
 8004d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d1a:	f000 f87d 	bl	8004e18 <__malloc_lock>
 8004d1e:	4921      	ldr	r1, [pc, #132]	; (8004da4 <_malloc_r+0xac>)
 8004d20:	680a      	ldr	r2, [r1, #0]
 8004d22:	4614      	mov	r4, r2
 8004d24:	b99c      	cbnz	r4, 8004d4e <_malloc_r+0x56>
 8004d26:	4f20      	ldr	r7, [pc, #128]	; (8004da8 <_malloc_r+0xb0>)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	b923      	cbnz	r3, 8004d36 <_malloc_r+0x3e>
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f000 f862 	bl	8004df8 <_sbrk_r>
 8004d34:	6038      	str	r0, [r7, #0]
 8004d36:	4629      	mov	r1, r5
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f000 f85d 	bl	8004df8 <_sbrk_r>
 8004d3e:	1c43      	adds	r3, r0, #1
 8004d40:	d123      	bne.n	8004d8a <_malloc_r+0x92>
 8004d42:	230c      	movs	r3, #12
 8004d44:	4630      	mov	r0, r6
 8004d46:	6033      	str	r3, [r6, #0]
 8004d48:	f000 f86c 	bl	8004e24 <__malloc_unlock>
 8004d4c:	e7e3      	b.n	8004d16 <_malloc_r+0x1e>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	1b5b      	subs	r3, r3, r5
 8004d52:	d417      	bmi.n	8004d84 <_malloc_r+0x8c>
 8004d54:	2b0b      	cmp	r3, #11
 8004d56:	d903      	bls.n	8004d60 <_malloc_r+0x68>
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	441c      	add	r4, r3
 8004d5c:	6025      	str	r5, [r4, #0]
 8004d5e:	e004      	b.n	8004d6a <_malloc_r+0x72>
 8004d60:	6863      	ldr	r3, [r4, #4]
 8004d62:	42a2      	cmp	r2, r4
 8004d64:	bf0c      	ite	eq
 8004d66:	600b      	streq	r3, [r1, #0]
 8004d68:	6053      	strne	r3, [r2, #4]
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f000 f85a 	bl	8004e24 <__malloc_unlock>
 8004d70:	f104 000b 	add.w	r0, r4, #11
 8004d74:	1d23      	adds	r3, r4, #4
 8004d76:	f020 0007 	bic.w	r0, r0, #7
 8004d7a:	1ac2      	subs	r2, r0, r3
 8004d7c:	d0cc      	beq.n	8004d18 <_malloc_r+0x20>
 8004d7e:	1a1b      	subs	r3, r3, r0
 8004d80:	50a3      	str	r3, [r4, r2]
 8004d82:	e7c9      	b.n	8004d18 <_malloc_r+0x20>
 8004d84:	4622      	mov	r2, r4
 8004d86:	6864      	ldr	r4, [r4, #4]
 8004d88:	e7cc      	b.n	8004d24 <_malloc_r+0x2c>
 8004d8a:	1cc4      	adds	r4, r0, #3
 8004d8c:	f024 0403 	bic.w	r4, r4, #3
 8004d90:	42a0      	cmp	r0, r4
 8004d92:	d0e3      	beq.n	8004d5c <_malloc_r+0x64>
 8004d94:	1a21      	subs	r1, r4, r0
 8004d96:	4630      	mov	r0, r6
 8004d98:	f000 f82e 	bl	8004df8 <_sbrk_r>
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	d1dd      	bne.n	8004d5c <_malloc_r+0x64>
 8004da0:	e7cf      	b.n	8004d42 <_malloc_r+0x4a>
 8004da2:	bf00      	nop
 8004da4:	200003bc 	.word	0x200003bc
 8004da8:	200003c0 	.word	0x200003c0

08004dac <_realloc_r>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	4607      	mov	r7, r0
 8004db0:	4614      	mov	r4, r2
 8004db2:	460e      	mov	r6, r1
 8004db4:	b921      	cbnz	r1, 8004dc0 <_realloc_r+0x14>
 8004db6:	4611      	mov	r1, r2
 8004db8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004dbc:	f7ff bf9c 	b.w	8004cf8 <_malloc_r>
 8004dc0:	b922      	cbnz	r2, 8004dcc <_realloc_r+0x20>
 8004dc2:	f7ff ff4d 	bl	8004c60 <_free_r>
 8004dc6:	4625      	mov	r5, r4
 8004dc8:	4628      	mov	r0, r5
 8004dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dcc:	f000 f830 	bl	8004e30 <_malloc_usable_size_r>
 8004dd0:	42a0      	cmp	r0, r4
 8004dd2:	d20f      	bcs.n	8004df4 <_realloc_r+0x48>
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	f7ff ff8e 	bl	8004cf8 <_malloc_r>
 8004ddc:	4605      	mov	r5, r0
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d0f2      	beq.n	8004dc8 <_realloc_r+0x1c>
 8004de2:	4631      	mov	r1, r6
 8004de4:	4622      	mov	r2, r4
 8004de6:	f7ff fb29 	bl	800443c <memcpy>
 8004dea:	4631      	mov	r1, r6
 8004dec:	4638      	mov	r0, r7
 8004dee:	f7ff ff37 	bl	8004c60 <_free_r>
 8004df2:	e7e9      	b.n	8004dc8 <_realloc_r+0x1c>
 8004df4:	4635      	mov	r5, r6
 8004df6:	e7e7      	b.n	8004dc8 <_realloc_r+0x1c>

08004df8 <_sbrk_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4d05      	ldr	r5, [pc, #20]	; (8004e14 <_sbrk_r+0x1c>)
 8004dfe:	4604      	mov	r4, r0
 8004e00:	4608      	mov	r0, r1
 8004e02:	602b      	str	r3, [r5, #0]
 8004e04:	f7fc ff9c 	bl	8001d40 <_sbrk>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d102      	bne.n	8004e12 <_sbrk_r+0x1a>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	b103      	cbz	r3, 8004e12 <_sbrk_r+0x1a>
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	bd38      	pop	{r3, r4, r5, pc}
 8004e14:	20001af8 	.word	0x20001af8

08004e18 <__malloc_lock>:
 8004e18:	4801      	ldr	r0, [pc, #4]	; (8004e20 <__malloc_lock+0x8>)
 8004e1a:	f000 b811 	b.w	8004e40 <__retarget_lock_acquire_recursive>
 8004e1e:	bf00      	nop
 8004e20:	20001b00 	.word	0x20001b00

08004e24 <__malloc_unlock>:
 8004e24:	4801      	ldr	r0, [pc, #4]	; (8004e2c <__malloc_unlock+0x8>)
 8004e26:	f000 b80c 	b.w	8004e42 <__retarget_lock_release_recursive>
 8004e2a:	bf00      	nop
 8004e2c:	20001b00 	.word	0x20001b00

08004e30 <_malloc_usable_size_r>:
 8004e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e34:	1f18      	subs	r0, r3, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bfbc      	itt	lt
 8004e3a:	580b      	ldrlt	r3, [r1, r0]
 8004e3c:	18c0      	addlt	r0, r0, r3
 8004e3e:	4770      	bx	lr

08004e40 <__retarget_lock_acquire_recursive>:
 8004e40:	4770      	bx	lr

08004e42 <__retarget_lock_release_recursive>:
 8004e42:	4770      	bx	lr

08004e44 <sqrt>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	4606      	mov	r6, r0
 8004e48:	460f      	mov	r7, r1
 8004e4a:	f000 f827 	bl	8004e9c <__ieee754_sqrt>
 8004e4e:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <sqrt+0x54>)
 8004e50:	4604      	mov	r4, r0
 8004e52:	f993 3000 	ldrsb.w	r3, [r3]
 8004e56:	460d      	mov	r5, r1
 8004e58:	3301      	adds	r3, #1
 8004e5a:	d019      	beq.n	8004e90 <sqrt+0x4c>
 8004e5c:	4632      	mov	r2, r6
 8004e5e:	463b      	mov	r3, r7
 8004e60:	4630      	mov	r0, r6
 8004e62:	4639      	mov	r1, r7
 8004e64:	f7fb fddc 	bl	8000a20 <__aeabi_dcmpun>
 8004e68:	b990      	cbnz	r0, 8004e90 <sqrt+0x4c>
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	4630      	mov	r0, r6
 8004e70:	4639      	mov	r1, r7
 8004e72:	f7fb fdad 	bl	80009d0 <__aeabi_dcmplt>
 8004e76:	b158      	cbz	r0, 8004e90 <sqrt+0x4c>
 8004e78:	f7ff fab6 	bl	80043e8 <__errno>
 8004e7c:	2321      	movs	r3, #33	; 0x21
 8004e7e:	2200      	movs	r2, #0
 8004e80:	6003      	str	r3, [r0, #0]
 8004e82:	2300      	movs	r3, #0
 8004e84:	4610      	mov	r0, r2
 8004e86:	4619      	mov	r1, r3
 8004e88:	f7fb fc5a 	bl	8000740 <__aeabi_ddiv>
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	460d      	mov	r5, r1
 8004e90:	4620      	mov	r0, r4
 8004e92:	4629      	mov	r1, r5
 8004e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e96:	bf00      	nop
 8004e98:	200002d8 	.word	0x200002d8

08004e9c <__ieee754_sqrt>:
 8004e9c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8004ff0 <__ieee754_sqrt+0x154>
 8004ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea4:	ea3c 0c01 	bics.w	ip, ip, r1
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4606      	mov	r6, r0
 8004eac:	460d      	mov	r5, r1
 8004eae:	460a      	mov	r2, r1
 8004eb0:	4607      	mov	r7, r0
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	d10e      	bne.n	8004ed4 <__ieee754_sqrt+0x38>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	f7fb fb18 	bl	80004ec <__aeabi_dmul>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	f7fb f95c 	bl	8000180 <__adddf3>
 8004ec8:	4606      	mov	r6, r0
 8004eca:	460d      	mov	r5, r1
 8004ecc:	4630      	mov	r0, r6
 8004ece:	4629      	mov	r1, r5
 8004ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	dc0d      	bgt.n	8004ef4 <__ieee754_sqrt+0x58>
 8004ed8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004edc:	ea5c 0707 	orrs.w	r7, ip, r7
 8004ee0:	d0f4      	beq.n	8004ecc <__ieee754_sqrt+0x30>
 8004ee2:	b139      	cbz	r1, 8004ef4 <__ieee754_sqrt+0x58>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	f7fb f949 	bl	800017c <__aeabi_dsub>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	f7fb fc27 	bl	8000740 <__aeabi_ddiv>
 8004ef2:	e7e9      	b.n	8004ec8 <__ieee754_sqrt+0x2c>
 8004ef4:	1512      	asrs	r2, r2, #20
 8004ef6:	d074      	beq.n	8004fe2 <__ieee754_sqrt+0x146>
 8004ef8:	2000      	movs	r0, #0
 8004efa:	07d5      	lsls	r5, r2, #31
 8004efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f00:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8004f04:	bf5e      	ittt	pl
 8004f06:	0fe3      	lsrpl	r3, r4, #31
 8004f08:	0064      	lslpl	r4, r4, #1
 8004f0a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8004f0e:	0fe3      	lsrs	r3, r4, #31
 8004f10:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004f14:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8004f18:	2516      	movs	r5, #22
 8004f1a:	4601      	mov	r1, r0
 8004f1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004f20:	1076      	asrs	r6, r6, #1
 8004f22:	0064      	lsls	r4, r4, #1
 8004f24:	188f      	adds	r7, r1, r2
 8004f26:	429f      	cmp	r7, r3
 8004f28:	bfde      	ittt	le
 8004f2a:	1bdb      	suble	r3, r3, r7
 8004f2c:	18b9      	addle	r1, r7, r2
 8004f2e:	1880      	addle	r0, r0, r2
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	3d01      	subs	r5, #1
 8004f34:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004f38:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004f3c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004f40:	d1f0      	bne.n	8004f24 <__ieee754_sqrt+0x88>
 8004f42:	462a      	mov	r2, r5
 8004f44:	f04f 0e20 	mov.w	lr, #32
 8004f48:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8004f4c:	428b      	cmp	r3, r1
 8004f4e:	eb07 0c05 	add.w	ip, r7, r5
 8004f52:	dc02      	bgt.n	8004f5a <__ieee754_sqrt+0xbe>
 8004f54:	d113      	bne.n	8004f7e <__ieee754_sqrt+0xe2>
 8004f56:	45a4      	cmp	ip, r4
 8004f58:	d811      	bhi.n	8004f7e <__ieee754_sqrt+0xe2>
 8004f5a:	f1bc 0f00 	cmp.w	ip, #0
 8004f5e:	eb0c 0507 	add.w	r5, ip, r7
 8004f62:	da43      	bge.n	8004fec <__ieee754_sqrt+0x150>
 8004f64:	2d00      	cmp	r5, #0
 8004f66:	db41      	blt.n	8004fec <__ieee754_sqrt+0x150>
 8004f68:	f101 0801 	add.w	r8, r1, #1
 8004f6c:	1a5b      	subs	r3, r3, r1
 8004f6e:	4641      	mov	r1, r8
 8004f70:	45a4      	cmp	ip, r4
 8004f72:	bf88      	it	hi
 8004f74:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004f78:	eba4 040c 	sub.w	r4, r4, ip
 8004f7c:	443a      	add	r2, r7
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	f1be 0e01 	subs.w	lr, lr, #1
 8004f84:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004f88:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8004f8c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004f90:	d1dc      	bne.n	8004f4c <__ieee754_sqrt+0xb0>
 8004f92:	4323      	orrs	r3, r4
 8004f94:	d006      	beq.n	8004fa4 <__ieee754_sqrt+0x108>
 8004f96:	1c54      	adds	r4, r2, #1
 8004f98:	bf0b      	itete	eq
 8004f9a:	4672      	moveq	r2, lr
 8004f9c:	3201      	addne	r2, #1
 8004f9e:	3001      	addeq	r0, #1
 8004fa0:	f022 0201 	bicne.w	r2, r2, #1
 8004fa4:	1043      	asrs	r3, r0, #1
 8004fa6:	07c1      	lsls	r1, r0, #31
 8004fa8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004fac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004fb0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004fb4:	bf48      	it	mi
 8004fb6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004fba:	4610      	mov	r0, r2
 8004fbc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8004fc0:	e782      	b.n	8004ec8 <__ieee754_sqrt+0x2c>
 8004fc2:	0ae3      	lsrs	r3, r4, #11
 8004fc4:	3915      	subs	r1, #21
 8004fc6:	0564      	lsls	r4, r4, #21
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0fa      	beq.n	8004fc2 <__ieee754_sqrt+0x126>
 8004fcc:	02de      	lsls	r6, r3, #11
 8004fce:	d50a      	bpl.n	8004fe6 <__ieee754_sqrt+0x14a>
 8004fd0:	f1c2 0020 	rsb	r0, r2, #32
 8004fd4:	fa24 f000 	lsr.w	r0, r4, r0
 8004fd8:	1e55      	subs	r5, r2, #1
 8004fda:	4094      	lsls	r4, r2
 8004fdc:	4303      	orrs	r3, r0
 8004fde:	1b4a      	subs	r2, r1, r5
 8004fe0:	e78a      	b.n	8004ef8 <__ieee754_sqrt+0x5c>
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	e7f0      	b.n	8004fc8 <__ieee754_sqrt+0x12c>
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	3201      	adds	r2, #1
 8004fea:	e7ef      	b.n	8004fcc <__ieee754_sqrt+0x130>
 8004fec:	4688      	mov	r8, r1
 8004fee:	e7bd      	b.n	8004f6c <__ieee754_sqrt+0xd0>
 8004ff0:	7ff00000 	.word	0x7ff00000

08004ff4 <_init>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	bf00      	nop
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr

08005000 <_fini>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	bf00      	nop
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr
