
projekt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002da0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08002eac  08002eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c8  080030c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080030c8  080030c8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c8  080030c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080030d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a94  20000074  08003144  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b08  08003144  00020b08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076f2  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017c5  00000000  00000000  0002778f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00028f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00029618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b52  00000000  00000000  00029c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000076e2  00000000  00000000  000407a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d06  00000000  00000000  00047e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c9b8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ebc  00000000  00000000  000c9be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e94 	.word	0x08002e94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002e94 	.word	0x08002e94

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <send>:
int cmdLength;
uint8_t znak;

// ====================== USART SEND ======================

void send(char* format, ...) {
 8000170:	b40f      	push	{r0, r1, r2, r3}
 8000172:	b580      	push	{r7, lr}
 8000174:	b0b6      	sub	sp, #216	; 0xd8
 8000176:	af00      	add	r7, sp, #0

    char tmp_s[200];
    va_list arglist;
    va_start(arglist,format);
 8000178:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800017c:	607b      	str	r3, [r7, #4]
    vsprintf(tmp_s,format,arglist);
 800017e:	f107 0308 	add.w	r3, r7, #8
 8000182:	687a      	ldr	r2, [r7, #4]
 8000184:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8000188:	4618      	mov	r0, r3
 800018a:	f002 fa6d 	bl	8002668 <vsiprintf>
    va_end(arglist);

    uint8_t idx = EmptyTx;
 800018e:	4b35      	ldr	r3, [pc, #212]	; (8000264 <send+0xf4>)
 8000190:	881b      	ldrh	r3, [r3, #0]
 8000192:	b29b      	uxth	r3, r3
 8000194:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    for(int i = 0; i < strlen(tmp_s); i++) {
 8000198:	2300      	movs	r3, #0
 800019a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800019e:	e013      	b.n	80001c8 <send+0x58>
        BUFF_TX[idx] = tmp_s[i];
 80001a0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80001a4:	f107 0108 	add.w	r1, r7, #8
 80001a8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80001ac:	440a      	add	r2, r1
 80001ae:	7811      	ldrb	r1, [r2, #0]
 80001b0:	4a2d      	ldr	r2, [pc, #180]	; (8000268 <send+0xf8>)
 80001b2:	54d1      	strb	r1, [r2, r3]
        idx++;
 80001b4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80001b8:	3301      	adds	r3, #1
 80001ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    for(int i = 0; i < strlen(tmp_s); i++) {
 80001be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80001c2:	3301      	adds	r3, #1
 80001c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80001c8:	f107 0308 	add.w	r3, r7, #8
 80001cc:	4618      	mov	r0, r3
 80001ce:	f7ff ffc7 	bl	8000160 <strlen>
 80001d2:	4602      	mov	r2, r0
 80001d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80001d8:	429a      	cmp	r2, r3
 80001da:	d8e1      	bhi.n	80001a0 <send+0x30>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001dc:	b672      	cpsid	i
}
 80001de:	bf00      	nop
        if(idx>=TX_BUFF_SIZE)
            idx=0;
    }
    __disable_irq();
    if(BusyTx == EmptyTx && __HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET) {
 80001e0:	4b22      	ldr	r3, [pc, #136]	; (800026c <send+0xfc>)
 80001e2:	881b      	ldrh	r3, [r3, #0]
 80001e4:	b29a      	uxth	r2, r3
 80001e6:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <send+0xf4>)
 80001e8:	881b      	ldrh	r3, [r3, #0]
 80001ea:	b29b      	uxth	r3, r3
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d12a      	bne.n	8000246 <send+0xd6>
 80001f0:	4b1f      	ldr	r3, [pc, #124]	; (8000270 <send+0x100>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80001fa:	2b80      	cmp	r3, #128	; 0x80
 80001fc:	d123      	bne.n	8000246 <send+0xd6>
        EmptyTx=idx;
 80001fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000202:	b29a      	uxth	r2, r3
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <send+0xf4>)
 8000206:	801a      	strh	r2, [r3, #0]
        temp = BUFF_TX[BusyTx];
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <send+0xfc>)
 800020a:	881b      	ldrh	r3, [r3, #0]
 800020c:	b29b      	uxth	r3, r3
 800020e:	461a      	mov	r2, r3
 8000210:	4b15      	ldr	r3, [pc, #84]	; (8000268 <send+0xf8>)
 8000212:	5c9b      	ldrb	r3, [r3, r2]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4b17      	ldr	r3, [pc, #92]	; (8000274 <send+0x104>)
 8000218:	701a      	strb	r2, [r3, #0]
        BusyTx++;
 800021a:	4b14      	ldr	r3, [pc, #80]	; (800026c <send+0xfc>)
 800021c:	881b      	ldrh	r3, [r3, #0]
 800021e:	b29b      	uxth	r3, r3
 8000220:	3301      	adds	r3, #1
 8000222:	b29a      	uxth	r2, r3
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <send+0xfc>)
 8000226:	801a      	strh	r2, [r3, #0]
        if(BusyTx>=TX_BUFF_SIZE)
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <send+0xfc>)
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	b29b      	uxth	r3, r3
 800022e:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8000232:	d302      	bcc.n	800023a <send+0xca>
            BusyTx=0;
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <send+0xfc>)
 8000236:	2200      	movs	r2, #0
 8000238:	801a      	strh	r2, [r3, #0]
        HAL_UART_Transmit_IT(&huart2,&temp,1);
 800023a:	2201      	movs	r2, #1
 800023c:	490d      	ldr	r1, [pc, #52]	; (8000274 <send+0x104>)
 800023e:	480c      	ldr	r0, [pc, #48]	; (8000270 <send+0x100>)
 8000240:	f001 fccb 	bl	8001bda <HAL_UART_Transmit_IT>
 8000244:	e004      	b.n	8000250 <send+0xe0>
    }
    else {
        EmptyTx=idx;
 8000246:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800024a:	b29a      	uxth	r2, r3
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <send+0xf4>)
 800024e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000250:	b662      	cpsie	i
}
 8000252:	bf00      	nop
    }
    __enable_irq();
}
 8000254:	bf00      	nop
 8000256:	37d8      	adds	r7, #216	; 0xd8
 8000258:	46bd      	mov	sp, r7
 800025a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000094 	.word	0x20000094
 8000268:	2000050c 	.word	0x2000050c
 800026c:	20000096 	.word	0x20000096
 8000270:	200004c8 	.word	0x200004c8
 8000274:	200002b8 	.word	0x200002b8

08000278 <HAL_UART_TxCpltCallback>:
// ====================== OBSLUGA KOMEND ======================


// ====================== USART CALLBACK NADAWANIE ======================

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
    if(huart==&huart2) {
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a16      	ldr	r2, [pc, #88]	; (80002dc <HAL_UART_TxCpltCallback+0x64>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d125      	bne.n	80002d4 <HAL_UART_TxCpltCallback+0x5c>
        if(BusyTx != EmptyTx) {
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <HAL_UART_TxCpltCallback+0x68>)
 800028a:	881b      	ldrh	r3, [r3, #0]
 800028c:	b29a      	uxth	r2, r3
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <HAL_UART_TxCpltCallback+0x6c>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	b29b      	uxth	r3, r3
 8000294:	429a      	cmp	r2, r3
 8000296:	d01d      	beq.n	80002d4 <HAL_UART_TxCpltCallback+0x5c>
            temp = BUFF_TX[BusyTx];
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <HAL_UART_TxCpltCallback+0x68>)
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	b29b      	uxth	r3, r3
 800029e:	461a      	mov	r2, r3
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <HAL_UART_TxCpltCallback+0x70>)
 80002a2:	5c9b      	ldrb	r3, [r3, r2]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b11      	ldr	r3, [pc, #68]	; (80002ec <HAL_UART_TxCpltCallback+0x74>)
 80002a8:	701a      	strb	r2, [r3, #0]
            BusyTx++;
 80002aa:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <HAL_UART_TxCpltCallback+0x68>)
 80002ac:	881b      	ldrh	r3, [r3, #0]
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	3301      	adds	r3, #1
 80002b2:	b29a      	uxth	r2, r3
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <HAL_UART_TxCpltCallback+0x68>)
 80002b6:	801a      	strh	r2, [r3, #0]
            if(BusyTx>=TX_BUFF_SIZE)
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <HAL_UART_TxCpltCallback+0x68>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	b29b      	uxth	r3, r3
 80002be:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 80002c2:	d302      	bcc.n	80002ca <HAL_UART_TxCpltCallback+0x52>
                BusyTx=0;
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <HAL_UART_TxCpltCallback+0x68>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	801a      	strh	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2,&temp,1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	4907      	ldr	r1, [pc, #28]	; (80002ec <HAL_UART_TxCpltCallback+0x74>)
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <HAL_UART_TxCpltCallback+0x64>)
 80002d0:	f001 fc83 	bl	8001bda <HAL_UART_Transmit_IT>
        }
    }
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200004c8 	.word	0x200004c8
 80002e0:	20000096 	.word	0x20000096
 80002e4:	20000094 	.word	0x20000094
 80002e8:	2000050c 	.word	0x2000050c
 80002ec:	200002b8 	.word	0x200002b8

080002f0 <HAL_UART_RxCpltCallback>:

// ====================== USART CALLBACK ODBIÓR ======================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
    if(huart==&huart2) {
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a11      	ldr	r2, [pc, #68]	; (8000340 <HAL_UART_RxCpltCallback+0x50>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d10f      	bne.n	8000320 <HAL_UART_RxCpltCallback+0x30>
    	EmptyRx++;
 8000300:	4b10      	ldr	r3, [pc, #64]	; (8000344 <HAL_UART_RxCpltCallback+0x54>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	b29b      	uxth	r3, r3
 8000306:	3301      	adds	r3, #1
 8000308:	b29a      	uxth	r2, r3
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <HAL_UART_RxCpltCallback+0x54>)
 800030c:	801a      	strh	r2, [r3, #0]
        if(EmptyRx>=RX_BUFF_SIZE)
 800030e:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <HAL_UART_RxCpltCallback+0x54>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	b29b      	uxth	r3, r3
 8000314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000318:	d302      	bcc.n	8000320 <HAL_UART_RxCpltCallback+0x30>
            EmptyRx = 0;
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <HAL_UART_RxCpltCallback+0x54>)
 800031c:	2200      	movs	r2, #0
 800031e:	801a      	strh	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart2,&BUFF_RX[EmptyRx],1);
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <HAL_UART_RxCpltCallback+0x54>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	b29b      	uxth	r3, r3
 8000326:	461a      	mov	r2, r3
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <HAL_UART_RxCpltCallback+0x58>)
 800032a:	4413      	add	r3, r2
 800032c:	2201      	movs	r2, #1
 800032e:	4619      	mov	r1, r3
 8000330:	4803      	ldr	r0, [pc, #12]	; (8000340 <HAL_UART_RxCpltCallback+0x50>)
 8000332:	f001 fc96 	bl	8001c62 <HAL_UART_Receive_IT>
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	200004c8 	.word	0x200004c8
 8000344:	20000090 	.word	0x20000090
 8000348:	200000ac 	.word	0x200000ac

0800034c <analizaKomendy>:





void analizaKomendy(char *cmd){
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]

	if(!strcmp(cmd, "Tryb1")){
 8000354:	4918      	ldr	r1, [pc, #96]	; (80003b8 <analizaKomendy+0x6c>)
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f7ff fef8 	bl	800014c <strcmp>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d103      	bne.n	800036a <analizaKomendy+0x1e>
		trybPracy = 1;
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <analizaKomendy+0x70>)
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]

			}
	else{
		send("NiepoprawnaKomenda\n\r");
	}
}
 8000368:	e021      	b.n	80003ae <analizaKomendy+0x62>
	else if(!strcmp(cmd, "Tryb2")){
 800036a:	4915      	ldr	r1, [pc, #84]	; (80003c0 <analizaKomendy+0x74>)
 800036c:	6878      	ldr	r0, [r7, #4]
 800036e:	f7ff feed 	bl	800014c <strcmp>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d103      	bne.n	8000380 <analizaKomendy+0x34>
		trybPracy = 2;
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <analizaKomendy+0x70>)
 800037a:	2202      	movs	r2, #2
 800037c:	701a      	strb	r2, [r3, #0]
}
 800037e:	e016      	b.n	80003ae <analizaKomendy+0x62>
	else if(!strcmp(cmd, "PokazTryb")){
 8000380:	4910      	ldr	r1, [pc, #64]	; (80003c4 <analizaKomendy+0x78>)
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f7ff fee2 	bl	800014c <strcmp>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d10c      	bne.n	80003a8 <analizaKomendy+0x5c>
		if(trybPracy ==1) send("Tryb1PSTRYK\n\r");
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <analizaKomendy+0x70>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	2b01      	cmp	r3, #1
 8000396:	d103      	bne.n	80003a0 <analizaKomendy+0x54>
 8000398:	480b      	ldr	r0, [pc, #44]	; (80003c8 <analizaKomendy+0x7c>)
 800039a:	f7ff fee9 	bl	8000170 <send>
}
 800039e:	e006      	b.n	80003ae <analizaKomendy+0x62>
		else send("Tryb2PSTRYK\n\r");
 80003a0:	480a      	ldr	r0, [pc, #40]	; (80003cc <analizaKomendy+0x80>)
 80003a2:	f7ff fee5 	bl	8000170 <send>
}
 80003a6:	e002      	b.n	80003ae <analizaKomendy+0x62>
		send("NiepoprawnaKomenda\n\r");
 80003a8:	4809      	ldr	r0, [pc, #36]	; (80003d0 <analizaKomendy+0x84>)
 80003aa:	f7ff fee1 	bl	8000170 <send>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	08002eac 	.word	0x08002eac
 80003bc:	20000000 	.word	0x20000000
 80003c0:	08002eb4 	.word	0x08002eb4
 80003c4:	08002ebc 	.word	0x08002ebc
 80003c8:	08002ec8 	.word	0x08002ec8
 80003cc:	08002ed8 	.word	0x08002ed8
 80003d0:	08002ee8 	.word	0x08002ee8

080003d4 <dekoduj>:


void dekoduj(){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	if(znak == '1'){
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <dekoduj+0x8c>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b31      	cmp	r3, #49	; 0x31
 80003de:	d10f      	bne.n	8000400 <dekoduj+0x2c>
	buffer[frameLen] = '[';
 80003e0:	4b20      	ldr	r3, [pc, #128]	; (8000464 <dekoduj+0x90>)
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <dekoduj+0x94>)
 80003e8:	215b      	movs	r1, #91	; 0x5b
 80003ea:	5499      	strb	r1, [r3, r2]
	frameLen++;
 80003ec:	4b1d      	ldr	r3, [pc, #116]	; (8000464 <dekoduj+0x90>)
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <dekoduj+0x90>)
 80003f6:	801a      	strh	r2, [r3, #0]
	frameState=1;
 80003f8:	4b1c      	ldr	r3, [pc, #112]	; (800046c <dekoduj+0x98>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	801a      	strh	r2, [r3, #0]
	{
	frameState = 0;
	send("Blad kodowania\n\r");
	}

}
 80003fe:	e02d      	b.n	800045c <dekoduj+0x88>
	else if(znak == '2'){
 8000400:	4b17      	ldr	r3, [pc, #92]	; (8000460 <dekoduj+0x8c>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b32      	cmp	r3, #50	; 0x32
 8000406:	d10f      	bne.n	8000428 <dekoduj+0x54>
	buffer[frameLen] = ']';
 8000408:	4b16      	ldr	r3, [pc, #88]	; (8000464 <dekoduj+0x90>)
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	461a      	mov	r2, r3
 800040e:	4b16      	ldr	r3, [pc, #88]	; (8000468 <dekoduj+0x94>)
 8000410:	215d      	movs	r1, #93	; 0x5d
 8000412:	5499      	strb	r1, [r3, r2]
	frameLen++;
 8000414:	4b13      	ldr	r3, [pc, #76]	; (8000464 <dekoduj+0x90>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	3301      	adds	r3, #1
 800041a:	b29a      	uxth	r2, r3
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <dekoduj+0x90>)
 800041e:	801a      	strh	r2, [r3, #0]
	frameState=1;
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <dekoduj+0x98>)
 8000422:	2201      	movs	r2, #1
 8000424:	801a      	strh	r2, [r3, #0]
}
 8000426:	e019      	b.n	800045c <dekoduj+0x88>
	else if(znak == '3'){
 8000428:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <dekoduj+0x8c>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b33      	cmp	r3, #51	; 0x33
 800042e:	d10f      	bne.n	8000450 <dekoduj+0x7c>
	buffer[frameLen] = '$';
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <dekoduj+0x90>)
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	461a      	mov	r2, r3
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <dekoduj+0x94>)
 8000438:	2124      	movs	r1, #36	; 0x24
 800043a:	5499      	strb	r1, [r3, r2]
	frameLen++;
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <dekoduj+0x90>)
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <dekoduj+0x90>)
 8000446:	801a      	strh	r2, [r3, #0]
	frameState=1;
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <dekoduj+0x98>)
 800044a:	2201      	movs	r2, #1
 800044c:	801a      	strh	r2, [r3, #0]
}
 800044e:	e005      	b.n	800045c <dekoduj+0x88>
	frameState = 0;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <dekoduj+0x98>)
 8000452:	2200      	movs	r2, #0
 8000454:	801a      	strh	r2, [r3, #0]
	send("Blad kodowania\n\r");
 8000456:	4806      	ldr	r0, [pc, #24]	; (8000470 <dekoduj+0x9c>)
 8000458:	f7ff fe8a 	bl	8000170 <send>
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	200004bc 	.word	0x200004bc
 8000464:	2000009c 	.word	0x2000009c
 8000468:	200002bc 	.word	0x200002bc
 800046c:	20000098 	.word	0x20000098
 8000470:	08002f00 	.word	0x08002f00

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b5b0      	push	{r4, r5, r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047a:	f000 fb69 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047e:	f000 f973 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000482:	f000 f9dd 	bl	8000840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000486:	f000 f9b1 	bl	80007ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,&BUFF_RX[EmptyRx],1);
 800048a:	4ba4      	ldr	r3, [pc, #656]	; (800071c <main+0x2a8>)
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	b29b      	uxth	r3, r3
 8000490:	461a      	mov	r2, r3
 8000492:	4ba3      	ldr	r3, [pc, #652]	; (8000720 <main+0x2ac>)
 8000494:	4413      	add	r3, r2
 8000496:	2201      	movs	r2, #1
 8000498:	4619      	mov	r1, r3
 800049a:	48a2      	ldr	r0, [pc, #648]	; (8000724 <main+0x2b0>)
 800049c:	f001 fbe1 	bl	8001c62 <HAL_UART_Receive_IT>
    send("RozpoczynamPrace!\r\n");
 80004a0:	48a1      	ldr	r0, [pc, #644]	; (8000728 <main+0x2b4>)
 80004a2:	f7ff fe65 	bl	8000170 <send>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
      {
    	  if (BusyRx != EmptyRx)
 80004a6:	4ba1      	ldr	r3, [pc, #644]	; (800072c <main+0x2b8>)
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b9b      	ldr	r3, [pc, #620]	; (800071c <main+0x2a8>)
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	429a      	cmp	r2, r3
 80004b4:	d0f7      	beq.n	80004a6 <main+0x32>
    	  {
    		  znak = BUFF_RX[BusyRx];
 80004b6:	4b9d      	ldr	r3, [pc, #628]	; (800072c <main+0x2b8>)
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	461a      	mov	r2, r3
 80004be:	4b98      	ldr	r3, [pc, #608]	; (8000720 <main+0x2ac>)
 80004c0:	5c9b      	ldrb	r3, [r3, r2]
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	4b9a      	ldr	r3, [pc, #616]	; (8000730 <main+0x2bc>)
 80004c6:	701a      	strb	r2, [r3, #0]
    		  BusyRx++;
 80004c8:	4b98      	ldr	r3, [pc, #608]	; (800072c <main+0x2b8>)
 80004ca:	881b      	ldrh	r3, [r3, #0]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	3301      	adds	r3, #1
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	4b96      	ldr	r3, [pc, #600]	; (800072c <main+0x2b8>)
 80004d4:	801a      	strh	r2, [r3, #0]
    		  if (BusyRx >= RX_BUFF_SIZE) BusyRx = 0;
 80004d6:	4b95      	ldr	r3, [pc, #596]	; (800072c <main+0x2b8>)
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	b29b      	uxth	r3, r3
 80004dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004e0:	d302      	bcc.n	80004e8 <main+0x74>
 80004e2:	4b92      	ldr	r3, [pc, #584]	; (800072c <main+0x2b8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	801a      	strh	r2, [r3, #0]
    	 	  	  	  if (znak == '[') // jeżeli znaleziono znak początku ramki
 80004e8:	4b91      	ldr	r3, [pc, #580]	; (8000730 <main+0x2bc>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b5b      	cmp	r3, #91	; 0x5b
 80004ee:	d106      	bne.n	80004fe <main+0x8a>
    	 		      {
    	 		         	frameState = 1;
 80004f0:	4b90      	ldr	r3, [pc, #576]	; (8000734 <main+0x2c0>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	801a      	strh	r2, [r3, #0]
    	 		         	frameLen = 0;
 80004f6:	4b90      	ldr	r3, [pc, #576]	; (8000738 <main+0x2c4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	801a      	strh	r2, [r3, #0]
 80004fc:	e7d3      	b.n	80004a6 <main+0x32>
    	 		      }
    	 	  	  	else if(frameState == 1)
 80004fe:	4b8d      	ldr	r3, [pc, #564]	; (8000734 <main+0x2c0>)
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	2b01      	cmp	r3, #1
 8000504:	f040 80fd 	bne.w	8000702 <main+0x28e>
    	 	  	  	{
    	 	  	  			if(znak == '$')//Kodowanie
 8000508:	4b89      	ldr	r3, [pc, #548]	; (8000730 <main+0x2bc>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b24      	cmp	r3, #36	; 0x24
 800050e:	d103      	bne.n	8000518 <main+0xa4>
    	 	  	  			{
    	 	  	  				frameState = 2;
 8000510:	4b88      	ldr	r3, [pc, #544]	; (8000734 <main+0x2c0>)
 8000512:	2202      	movs	r2, #2
 8000514:	801a      	strh	r2, [r3, #0]
 8000516:	e7c6      	b.n	80004a6 <main+0x32>
    	 	  	  			}
    	 	  	  			else if(znak == ']' )// koniec odczytu ramki
 8000518:	4b85      	ldr	r3, [pc, #532]	; (8000730 <main+0x2bc>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b5d      	cmp	r3, #93	; 0x5d
 800051e:	f040 80d7 	bne.w	80006d0 <main+0x25c>
    	 	  	  			{

    	 	  	  				buffer[frameLen]='\0';
 8000522:	4b85      	ldr	r3, [pc, #532]	; (8000738 <main+0x2c4>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	461a      	mov	r2, r3
 8000528:	4b84      	ldr	r3, [pc, #528]	; (800073c <main+0x2c8>)
 800052a:	2100      	movs	r1, #0
 800052c:	5499      	strb	r1, [r3, r2]

    	 	  	  				if (frameLen >= 10) // jeżeli podano więcej znaków, niż minimalna ilość znaków w ramce
 800052e:	4b82      	ldr	r3, [pc, #520]	; (8000738 <main+0x2c4>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	2b09      	cmp	r3, #9
 8000534:	f240 80c5 	bls.w	80006c2 <main+0x24e>
    	 	  	  				{

    	 	  	  					memcpy(source_address, &buffer[0], 3);
 8000538:	2203      	movs	r2, #3
 800053a:	4980      	ldr	r1, [pc, #512]	; (800073c <main+0x2c8>)
 800053c:	4880      	ldr	r0, [pc, #512]	; (8000740 <main+0x2cc>)
 800053e:	f001 ffc5 	bl	80024cc <memcpy>
    	 	  	  					memcpy(destination_address, &buffer[3], 3);
 8000542:	2203      	movs	r2, #3
 8000544:	497f      	ldr	r1, [pc, #508]	; (8000744 <main+0x2d0>)
 8000546:	4880      	ldr	r0, [pc, #512]	; (8000748 <main+0x2d4>)
 8000548:	f001 ffc0 	bl	80024cc <memcpy>
 800054c:	4b7b      	ldr	r3, [pc, #492]	; (800073c <main+0x2c8>)
 800054e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8000552:	461a      	mov	r2, r3
    	 	  	  					memcpy(suma_kontrolna, &buffer[6], 4);
 8000554:	4b7d      	ldr	r3, [pc, #500]	; (800074c <main+0x2d8>)
 8000556:	601a      	str	r2, [r3, #0]
    	 	  	  				source_address[3]=0;
 8000558:	4b79      	ldr	r3, [pc, #484]	; (8000740 <main+0x2cc>)
 800055a:	2200      	movs	r2, #0
 800055c:	70da      	strb	r2, [r3, #3]
    	 	  	  			destination_address[3]=0;
 800055e:	4b7a      	ldr	r3, [pc, #488]	; (8000748 <main+0x2d4>)
 8000560:	2200      	movs	r2, #0
 8000562:	70da      	strb	r2, [r3, #3]
    	 	  	  		suma_kontrolna[4] = '\0';
 8000564:	4b79      	ldr	r3, [pc, #484]	; (800074c <main+0x2d8>)
 8000566:	2200      	movs	r2, #0
 8000568:	711a      	strb	r2, [r3, #4]
    	 	  	  					int podana_suma_kontrolna = atoi(suma_kontrolna);
 800056a:	4878      	ldr	r0, [pc, #480]	; (800074c <main+0x2d8>)
 800056c:	f001 ff80 	bl	8002470 <atoi>
 8000570:	60b8      	str	r0, [r7, #8]

    	 	  	  					cmdLength = frameLen-10;
 8000572:	4b71      	ldr	r3, [pc, #452]	; (8000738 <main+0x2c4>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	3b0a      	subs	r3, #10
 8000578:	4a75      	ldr	r2, [pc, #468]	; (8000750 <main+0x2dc>)
 800057a:	6013      	str	r3, [r2, #0]
    	 	  	  					if (strncmp(device_address, destination_address, 3) == 0)//jesli poprawny odbiorca
 800057c:	2203      	movs	r2, #3
 800057e:	4972      	ldr	r1, [pc, #456]	; (8000748 <main+0x2d4>)
 8000580:	4874      	ldr	r0, [pc, #464]	; (8000754 <main+0x2e0>)
 8000582:	f001 ffb9 	bl	80024f8 <strncmp>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	f040 809a 	bne.w	80006c2 <main+0x24e>
    	 	  	  					{
    	 	  	  						if (cmdLength <= 52)
 800058e:	4b70      	ldr	r3, [pc, #448]	; (8000750 <main+0x2dc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b34      	cmp	r3, #52	; 0x34
 8000594:	f300 8095 	bgt.w	80006c2 <main+0x24e>
    	 	  	  						{
 8000598:	466b      	mov	r3, sp
 800059a:	461d      	mov	r5, r3
    	 	  	  							char cmd[cmdLength + 1];
 800059c:	4b6c      	ldr	r3, [pc, #432]	; (8000750 <main+0x2dc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	1c5c      	adds	r4, r3, #1
 80005a2:	1e63      	subs	r3, r4, #1
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4623      	mov	r3, r4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f04f 0100 	mov.w	r1, #0
 80005ae:	f04f 0200 	mov.w	r2, #0
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	00cb      	lsls	r3, r1, #3
 80005b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005bc:	00c2      	lsls	r2, r0, #3
 80005be:	4623      	mov	r3, r4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f04f 0100 	mov.w	r1, #0
 80005c6:	f04f 0200 	mov.w	r2, #0
 80005ca:	f04f 0300 	mov.w	r3, #0
 80005ce:	00cb      	lsls	r3, r1, #3
 80005d0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005d4:	00c2      	lsls	r2, r0, #3
 80005d6:	4623      	mov	r3, r4
 80005d8:	3307      	adds	r3, #7
 80005da:	08db      	lsrs	r3, r3, #3
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	ebad 0d03 	sub.w	sp, sp, r3
 80005e2:	466b      	mov	r3, sp
 80005e4:	3300      	adds	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
    	 	  	  							memcpy(cmd, &buffer[10], cmdLength);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	4a59      	ldr	r2, [pc, #356]	; (8000750 <main+0x2dc>)
 80005ec:	6812      	ldr	r2, [r2, #0]
 80005ee:	495a      	ldr	r1, [pc, #360]	; (8000758 <main+0x2e4>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 ff6b 	bl	80024cc <memcpy>
    	 	  	  							cmd[cmdLength] = '\0'; // dodanie znaku null na końcu tablicy
 80005f6:	4b56      	ldr	r3, [pc, #344]	; (8000750 <main+0x2dc>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	2100      	movs	r1, #0
 80005fe:	54d1      	strb	r1, [r2, r3]

    	 	  	  							for (int i =0; i< strlen(source_address); i++) suma_wyliczona += (int)source_address[i];
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	e00d      	b.n	8000622 <main+0x1ae>
 8000606:	4a4e      	ldr	r2, [pc, #312]	; (8000740 <main+0x2cc>)
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b29a      	uxth	r2, r3
 8000610:	4b52      	ldr	r3, [pc, #328]	; (800075c <main+0x2e8>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	4413      	add	r3, r2
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b50      	ldr	r3, [pc, #320]	; (800075c <main+0x2e8>)
 800061a:	801a      	strh	r2, [r3, #0]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4847      	ldr	r0, [pc, #284]	; (8000740 <main+0x2cc>)
 8000624:	f7ff fd9c 	bl	8000160 <strlen>
 8000628:	4602      	mov	r2, r0
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	d8ea      	bhi.n	8000606 <main+0x192>
    	 	  	  							for (int i =0; i< strlen(destination_address); i++) suma_wyliczona += (int)destination_address[i];
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	e00d      	b.n	8000652 <main+0x1de>
 8000636:	4a44      	ldr	r2, [pc, #272]	; (8000748 <main+0x2d4>)
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	4413      	add	r3, r2
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b29a      	uxth	r2, r3
 8000640:	4b46      	ldr	r3, [pc, #280]	; (800075c <main+0x2e8>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	4413      	add	r3, r2
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b44      	ldr	r3, [pc, #272]	; (800075c <main+0x2e8>)
 800064a:	801a      	strh	r2, [r3, #0]
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	3301      	adds	r3, #1
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	483d      	ldr	r0, [pc, #244]	; (8000748 <main+0x2d4>)
 8000654:	f7ff fd84 	bl	8000160 <strlen>
 8000658:	4602      	mov	r2, r0
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	429a      	cmp	r2, r3
 800065e:	d8ea      	bhi.n	8000636 <main+0x1c2>
    	 	  	  							for (int i =0; i< strlen(cmd); i++) suma_wyliczona += (int)cmd[i];
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	e00d      	b.n	8000682 <main+0x20e>
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b3a      	ldr	r3, [pc, #232]	; (800075c <main+0x2e8>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	4413      	add	r3, r2
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b38      	ldr	r3, [pc, #224]	; (800075c <main+0x2e8>)
 800067a:	801a      	strh	r2, [r3, #0]
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fd6b 	bl	8000160 <strlen>
 800068a:	4602      	mov	r2, r0
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	429a      	cmp	r2, r3
 8000690:	d8e9      	bhi.n	8000666 <main+0x1f2>

    	 	  	  							if (podana_suma_kontrolna == suma_wyliczona)// jeżeli komenda została przysłana
 8000692:	4b32      	ldr	r3, [pc, #200]	; (800075c <main+0x2e8>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4293      	cmp	r3, r2
 800069c:	d107      	bne.n	80006ae <main+0x23a>
    	 	  	  							{
    	 	  	  								send("OdebranoRamke\r\n");
 800069e:	4830      	ldr	r0, [pc, #192]	; (8000760 <main+0x2ec>)
 80006a0:	f7ff fd66 	bl	8000170 <send>
    	 	  	  								analizaKomendy(cmd); //framelen to dlugosc ramki bez znaku początku i konca 8 to 6-nadawca i odbiorca 2-znaki dlugosci komendy/dane
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff fe50 	bl	800034c <analizaKomendy>
 80006ac:	e005      	b.n	80006ba <main+0x246>
    	 	  	  							}
    	 	  	  							else
    	 	  	  							{
    	 	  	  								send("Nieprawidlowa suma kontrolna. Oczekiwano: %d\r\n",suma_wyliczona);
 80006ae:	4b2b      	ldr	r3, [pc, #172]	; (800075c <main+0x2e8>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	4619      	mov	r1, r3
 80006b4:	482b      	ldr	r0, [pc, #172]	; (8000764 <main+0x2f0>)
 80006b6:	f7ff fd5b 	bl	8000170 <send>
    	 	  	  							}

    	 	  	  							suma_wyliczona=0;
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <main+0x2e8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	801a      	strh	r2, [r3, #0]
 80006c0:	46ad      	mov	sp, r5
    	 	  	  							}
    	 	  	  						}
    	 	  	  				}

    	 	  	  			frameState = 0;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <main+0x2c0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	801a      	strh	r2, [r3, #0]
    	 	  	  			frameLen = 0;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <main+0x2c4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	801a      	strh	r2, [r3, #0]
 80006ce:	e6ea      	b.n	80004a6 <main+0x32>
    	 	  	  			}
    	 	  	  	  else // Odbieramy znaki
    	 	  	  	  {
    	 	  	  	  	buffer[frameLen] = znak; // zapisuje do bufora ramki
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <main+0x2c4>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <main+0x2bc>)
 80006d8:	7819      	ldrb	r1, [r3, #0]
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <main+0x2c8>)
 80006dc:	5499      	strb	r1, [r3, r2]
    	 	  	  	  	frameLen++;
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <main+0x2c4>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <main+0x2c4>)
 80006e8:	801a      	strh	r2, [r3, #0]
    	 	  	  	  	if(frameLen > (62))
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <main+0x2c4>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	2b3e      	cmp	r3, #62	; 0x3e
 80006f0:	f67f aed9 	bls.w	80004a6 <main+0x32>
    	 	  	  	  	{
    	 	  	  	  		frameLen = 0;
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <main+0x2c4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	801a      	strh	r2, [r3, #0]
    	 	  	  	  		frameState = 0; //następuje poszukiwanie nowej ramki
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <main+0x2c0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	801a      	strh	r2, [r3, #0]
    	 	  	  	  		break;
 8000700:	e007      	b.n	8000712 <main+0x29e>
    	 	  	  	  	}
    	 	  	  	  }
    	 	  	  	}
    	 	  	  	else if(frameState == 2)
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <main+0x2c0>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	2b02      	cmp	r3, #2
 8000708:	f47f aecd 	bne.w	80004a6 <main+0x32>
    	 	  	  	{
    	 	  	  		dekoduj();
 800070c:	f7ff fe62 	bl	80003d4 <dekoduj>
    	  if (BusyRx != EmptyRx)
 8000710:	e6c9      	b.n	80004a6 <main+0x32>
 8000712:	2300      	movs	r3, #0
        /* USER CODE BEGIN 3 */

      }

      /* USER CODE END 3 */
    }
 8000714:	4618      	mov	r0, r3
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bdb0      	pop	{r4, r5, r7, pc}
 800071c:	20000090 	.word	0x20000090
 8000720:	200000ac 	.word	0x200000ac
 8000724:	200004c8 	.word	0x200004c8
 8000728:	08002f14 	.word	0x08002f14
 800072c:	20000092 	.word	0x20000092
 8000730:	200004bc 	.word	0x200004bc
 8000734:	20000098 	.word	0x20000098
 8000738:	2000009c 	.word	0x2000009c
 800073c:	200002bc 	.word	0x200002bc
 8000740:	200002ac 	.word	0x200002ac
 8000744:	200002bf 	.word	0x200002bf
 8000748:	200002b0 	.word	0x200002b0
 800074c:	200004c0 	.word	0x200004c0
 8000750:	200002b4 	.word	0x200002b4
 8000754:	08002f78 	.word	0x08002f78
 8000758:	200002c6 	.word	0x200002c6
 800075c:	2000009a 	.word	0x2000009a
 8000760:	08002f28 	.word	0x08002f28
 8000764:	08002f38 	.word	0x08002f38

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b090      	sub	sp, #64	; 0x40
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	2228      	movs	r2, #40	; 0x28
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 feb6 	bl	80024e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000792:	2310      	movs	r3, #16
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800079a:	2300      	movs	r3, #0
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800079e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0318 	add.w	r3, r7, #24
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fdaf 	bl	800130c <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007b4:	f000 f8b2 	bl	800091c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2102      	movs	r1, #2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f81a 	bl	800180c <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007de:	f000 f89d 	bl	800091c <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3740      	adds	r7, #64	; 0x40
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_USART2_UART_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000824:	f001 f98c 	bl	8001b40 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082e:	f000 f875 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200004c8 	.word	0x200004c8
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000854:	4b2d      	ldr	r3, [pc, #180]	; (800090c <MX_GPIO_Init+0xcc>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a2c      	ldr	r2, [pc, #176]	; (800090c <MX_GPIO_Init+0xcc>)
 800085a:	f043 0310 	orr.w	r3, r3, #16
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b2a      	ldr	r3, [pc, #168]	; (800090c <MX_GPIO_Init+0xcc>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0310 	and.w	r3, r3, #16
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <MX_GPIO_Init+0xcc>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a26      	ldr	r2, [pc, #152]	; (800090c <MX_GPIO_Init+0xcc>)
 8000872:	f043 0320 	orr.w	r3, r3, #32
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <MX_GPIO_Init+0xcc>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0320 	and.w	r3, r3, #32
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_GPIO_Init+0xcc>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a20      	ldr	r2, [pc, #128]	; (800090c <MX_GPIO_Init+0xcc>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_GPIO_Init+0xcc>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_GPIO_Init+0xcc>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a1a      	ldr	r2, [pc, #104]	; (800090c <MX_GPIO_Init+0xcc>)
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_GPIO_Init+0xcc>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0308 	and.w	r3, r3, #8
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2120      	movs	r1, #32
 80008b8:	4815      	ldr	r0, [pc, #84]	; (8000910 <MX_GPIO_Init+0xd0>)
 80008ba:	f000 fced 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_GPIO_Init+0xd4>)
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_GPIO_Init+0xd8>)
 80008d4:	f000 fb5c 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d8:	2320      	movs	r3, #32
 80008da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	4808      	ldr	r0, [pc, #32]	; (8000910 <MX_GPIO_Init+0xd0>)
 80008f0:	f000 fb4e 	bl	8000f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2028      	movs	r0, #40	; 0x28
 80008fa:	f000 fa62 	bl	8000dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008fe:	2028      	movs	r0, #40	; 0x28
 8000900:	f000 fa7b 	bl	8000dfa <HAL_NVIC_EnableIRQ>

}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	40010800 	.word	0x40010800
 8000914:	10110000 	.word	0x10110000
 8000918:	40011000 	.word	0x40011000

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_MspInit+0x5c>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <HAL_MspInit+0x5c>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_MspInit+0x5c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x5c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x5c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x5c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_MspInit+0x60>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_MspInit+0x60>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	40021000 	.word	0x40021000
 8000988:	40010000 	.word	0x40010000

0800098c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d12b      	bne.n	8000a04 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_UART_MspInit+0x84>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_UART_MspInit+0x84>)
 80009b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b6:	61d3      	str	r3, [r2, #28]
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_UART_MspInit+0x84>)
 80009ba:	69db      	ldr	r3, [r3, #28]
 80009bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_UART_MspInit+0x84>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <HAL_UART_MspInit+0x84>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_UART_MspInit+0x84>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009dc:	230c      	movs	r3, #12
 80009de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009f0:	f000 face 	bl	8000f90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2026      	movs	r0, #38	; 0x26
 80009fa:	f000 f9e2 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009fe:	2026      	movs	r0, #38	; 0x26
 8000a00:	f000 f9fb 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40004400 	.word	0x40004400
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40010800 	.word	0x40010800

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5e:	f000 f8bd 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <USART2_IRQHandler+0x10>)
 8000a6e:	f001 f929 	bl	8001cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200004c8 	.word	0x200004c8

08000a7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a84:	f000 fc20 	bl	80012c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <_sbrk+0x5c>)
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <_sbrk+0x60>)
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <_sbrk+0x64>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <_sbrk+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d207      	bcs.n	8000acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000abc:	f001 fcdc 	bl	8002478 <__errno>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	e009      	b.n	8000ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <_sbrk+0x64>)
 8000adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20005000 	.word	0x20005000
 8000aec:	00000400 	.word	0x00000400
 8000af0:	200000a0 	.word	0x200000a0
 8000af4:	20000b08 	.word	0x20000b08

08000af8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	; (8000b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2a:	f7ff ffe5 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f001 fca9 	bl	8002484 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b32:	f7ff fc9f 	bl	8000474 <main>
  bx lr
 8000b36:	4770      	bx	lr
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b40:	080030d0 	.word	0x080030d0
  ldr r2, =_sbss
 8000b44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b48:	20000b08 	.word	0x20000b08

08000b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_2_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x28>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x28>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f923 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fedc 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f93b 	bl	8000e16 <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f903 	bl	8000dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000004 	.word	0x20000004
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	20000008 	.word	0x20000008

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <HAL_IncTick+0x20>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	2000000c 	.word	0x2000000c
 8000bfc:	20000af4 	.word	0x20000af4

08000c00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <HAL_GetTick+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000af4 	.word	0x20000af4

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4906      	ldr	r1, [pc, #24]	; (8000cac <__NVIC_EnableIRQ+0x34>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff90 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff2d 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff42 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff90 	bl	8000d04 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5f 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff35 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffa2 	bl	8000d68 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b085      	sub	sp, #20
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d008      	beq.n	8000e56 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2204      	movs	r2, #4
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e020      	b.n	8000e98 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 020e 	bic.w	r2, r2, #14
 8000e64:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0201 	bic.w	r2, r2, #1
 8000e74:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fa01 f202 	lsl.w	r2, r1, r2
 8000e84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
	...

08000ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d005      	beq.n	8000ec6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e051      	b.n	8000f6a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 020e 	bic.w	r2, r2, #14
 8000ed4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0201 	bic.w	r2, r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <HAL_DMA_Abort_IT+0xd0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d029      	beq.n	8000f44 <HAL_DMA_Abort_IT+0xa0>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a20      	ldr	r2, [pc, #128]	; (8000f78 <HAL_DMA_Abort_IT+0xd4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d022      	beq.n	8000f40 <HAL_DMA_Abort_IT+0x9c>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <HAL_DMA_Abort_IT+0xd8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d01a      	beq.n	8000f3a <HAL_DMA_Abort_IT+0x96>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <HAL_DMA_Abort_IT+0xdc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d012      	beq.n	8000f34 <HAL_DMA_Abort_IT+0x90>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <HAL_DMA_Abort_IT+0xe0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d00a      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x8a>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <HAL_DMA_Abort_IT+0xe4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d102      	bne.n	8000f28 <HAL_DMA_Abort_IT+0x84>
 8000f22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f26:	e00e      	b.n	8000f46 <HAL_DMA_Abort_IT+0xa2>
 8000f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f2c:	e00b      	b.n	8000f46 <HAL_DMA_Abort_IT+0xa2>
 8000f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f32:	e008      	b.n	8000f46 <HAL_DMA_Abort_IT+0xa2>
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	e005      	b.n	8000f46 <HAL_DMA_Abort_IT+0xa2>
 8000f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3e:	e002      	b.n	8000f46 <HAL_DMA_Abort_IT+0xa2>
 8000f40:	2310      	movs	r3, #16
 8000f42:	e000      	b.n	8000f46 <HAL_DMA_Abort_IT+0xa2>
 8000f44:	2301      	movs	r3, #1
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_DMA_Abort_IT+0xe8>)
 8000f48:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	4798      	blx	r3
    } 
  }
  return status;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40020008 	.word	0x40020008
 8000f78:	4002001c 	.word	0x4002001c
 8000f7c:	40020030 	.word	0x40020030
 8000f80:	40020044 	.word	0x40020044
 8000f84:	40020058 	.word	0x40020058
 8000f88:	4002006c 	.word	0x4002006c
 8000f8c:	40020000 	.word	0x40020000

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b08b      	sub	sp, #44	; 0x2c
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	e169      	b.n	8001278 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8158 	bne.w	8001272 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	4a9a      	ldr	r2, [pc, #616]	; (8001230 <HAL_GPIO_Init+0x2a0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d05e      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fcc:	4a98      	ldr	r2, [pc, #608]	; (8001230 <HAL_GPIO_Init+0x2a0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d875      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fd2:	4a98      	ldr	r2, [pc, #608]	; (8001234 <HAL_GPIO_Init+0x2a4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d058      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fd8:	4a96      	ldr	r2, [pc, #600]	; (8001234 <HAL_GPIO_Init+0x2a4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d86f      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fde:	4a96      	ldr	r2, [pc, #600]	; (8001238 <HAL_GPIO_Init+0x2a8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d052      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fe4:	4a94      	ldr	r2, [pc, #592]	; (8001238 <HAL_GPIO_Init+0x2a8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d869      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fea:	4a94      	ldr	r2, [pc, #592]	; (800123c <HAL_GPIO_Init+0x2ac>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d04c      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000ff0:	4a92      	ldr	r2, [pc, #584]	; (800123c <HAL_GPIO_Init+0x2ac>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d863      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000ff6:	4a92      	ldr	r2, [pc, #584]	; (8001240 <HAL_GPIO_Init+0x2b0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d046      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000ffc:	4a90      	ldr	r2, [pc, #576]	; (8001240 <HAL_GPIO_Init+0x2b0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d85d      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8001002:	2b12      	cmp	r3, #18
 8001004:	d82a      	bhi.n	800105c <HAL_GPIO_Init+0xcc>
 8001006:	2b12      	cmp	r3, #18
 8001008:	d859      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 800100a:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <HAL_GPIO_Init+0x80>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	0800108b 	.word	0x0800108b
 8001014:	08001065 	.word	0x08001065
 8001018:	08001077 	.word	0x08001077
 800101c:	080010b9 	.word	0x080010b9
 8001020:	080010bf 	.word	0x080010bf
 8001024:	080010bf 	.word	0x080010bf
 8001028:	080010bf 	.word	0x080010bf
 800102c:	080010bf 	.word	0x080010bf
 8001030:	080010bf 	.word	0x080010bf
 8001034:	080010bf 	.word	0x080010bf
 8001038:	080010bf 	.word	0x080010bf
 800103c:	080010bf 	.word	0x080010bf
 8001040:	080010bf 	.word	0x080010bf
 8001044:	080010bf 	.word	0x080010bf
 8001048:	080010bf 	.word	0x080010bf
 800104c:	080010bf 	.word	0x080010bf
 8001050:	080010bf 	.word	0x080010bf
 8001054:	0800106d 	.word	0x0800106d
 8001058:	08001081 	.word	0x08001081
 800105c:	4a79      	ldr	r2, [pc, #484]	; (8001244 <HAL_GPIO_Init+0x2b4>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001062:	e02c      	b.n	80010be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e029      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	3304      	adds	r3, #4
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	e024      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	3308      	adds	r3, #8
 800107c:	623b      	str	r3, [r7, #32]
          break;
 800107e:	e01f      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	330c      	adds	r3, #12
 8001086:	623b      	str	r3, [r7, #32]
          break;
 8001088:	e01a      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001092:	2304      	movs	r3, #4
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e013      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d105      	bne.n	80010ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a0:	2308      	movs	r3, #8
 80010a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	611a      	str	r2, [r3, #16]
          break;
 80010aa:	e009      	b.n	80010c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ac:	2308      	movs	r3, #8
 80010ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	615a      	str	r2, [r3, #20]
          break;
 80010b6:	e003      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
          break;
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          break;
 80010be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2bff      	cmp	r3, #255	; 0xff
 80010c4:	d801      	bhi.n	80010ca <HAL_GPIO_Init+0x13a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	e001      	b.n	80010ce <HAL_GPIO_Init+0x13e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3304      	adds	r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2bff      	cmp	r3, #255	; 0xff
 80010d4:	d802      	bhi.n	80010dc <HAL_GPIO_Init+0x14c>
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x152>
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	3b08      	subs	r3, #8
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	210f      	movs	r1, #15
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	401a      	ands	r2, r3
 80010f4:	6a39      	ldr	r1, [r7, #32]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	431a      	orrs	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80b1 	beq.w	8001272 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001110:	4b4d      	ldr	r3, [pc, #308]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a4c      	ldr	r2, [pc, #304]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001128:	4a48      	ldr	r2, [pc, #288]	; (800124c <HAL_GPIO_Init+0x2bc>)
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001134:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	220f      	movs	r2, #15
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a40      	ldr	r2, [pc, #256]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d013      	beq.n	800117c <HAL_GPIO_Init+0x1ec>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3f      	ldr	r2, [pc, #252]	; (8001254 <HAL_GPIO_Init+0x2c4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d00d      	beq.n	8001178 <HAL_GPIO_Init+0x1e8>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a3e      	ldr	r2, [pc, #248]	; (8001258 <HAL_GPIO_Init+0x2c8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d007      	beq.n	8001174 <HAL_GPIO_Init+0x1e4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3d      	ldr	r2, [pc, #244]	; (800125c <HAL_GPIO_Init+0x2cc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d101      	bne.n	8001170 <HAL_GPIO_Init+0x1e0>
 800116c:	2303      	movs	r3, #3
 800116e:	e006      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001170:	2304      	movs	r3, #4
 8001172:	e004      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001174:	2302      	movs	r3, #2
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 800117c:	2300      	movs	r3, #0
 800117e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4093      	lsls	r3, r2
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800118e:	492f      	ldr	r1, [pc, #188]	; (800124c <HAL_GPIO_Init+0x2bc>)
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	492c      	ldr	r1, [pc, #176]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	43db      	mvns	r3, r3
 80011be:	4928      	ldr	r1, [pc, #160]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	4922      	ldr	r1, [pc, #136]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	491e      	ldr	r1, [pc, #120]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	4918      	ldr	r1, [pc, #96]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	43db      	mvns	r3, r3
 800120e:	4914      	ldr	r1, [pc, #80]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 8001210:	4013      	ands	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d021      	beq.n	8001264 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	490e      	ldr	r1, [pc, #56]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	60cb      	str	r3, [r1, #12]
 800122c:	e021      	b.n	8001272 <HAL_GPIO_Init+0x2e2>
 800122e:	bf00      	nop
 8001230:	10320000 	.word	0x10320000
 8001234:	10310000 	.word	0x10310000
 8001238:	10220000 	.word	0x10220000
 800123c:	10210000 	.word	0x10210000
 8001240:	10120000 	.word	0x10120000
 8001244:	10110000 	.word	0x10110000
 8001248:	40021000 	.word	0x40021000
 800124c:	40010000 	.word	0x40010000
 8001250:	40010800 	.word	0x40010800
 8001254:	40010c00 	.word	0x40010c00
 8001258:	40011000 	.word	0x40011000
 800125c:	40011400 	.word	0x40011400
 8001260:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_GPIO_Init+0x304>)
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	43db      	mvns	r3, r3
 800126c:	4909      	ldr	r1, [pc, #36]	; (8001294 <HAL_GPIO_Init+0x304>)
 800126e:	4013      	ands	r3, r2
 8001270:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	3301      	adds	r3, #1
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	fa22 f303 	lsr.w	r3, r2, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	f47f ae8e 	bne.w	8000fa4 <HAL_GPIO_Init+0x14>
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	372c      	adds	r7, #44	; 0x2c
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012b4:	e003      	b.n	80012be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	041a      	lsls	r2, r3, #16
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	611a      	str	r2, [r3, #16]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d4:	695a      	ldr	r2, [r3, #20]
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	4013      	ands	r3, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f806 	bl	80012f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e26c      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8087 	beq.w	800143a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800132c:	4b92      	ldr	r3, [pc, #584]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	2b04      	cmp	r3, #4
 8001336:	d00c      	beq.n	8001352 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001338:	4b8f      	ldr	r3, [pc, #572]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	2b08      	cmp	r3, #8
 8001342:	d112      	bne.n	800136a <HAL_RCC_OscConfig+0x5e>
 8001344:	4b8c      	ldr	r3, [pc, #560]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001350:	d10b      	bne.n	800136a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001352:	4b89      	ldr	r3, [pc, #548]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d06c      	beq.n	8001438 <HAL_RCC_OscConfig+0x12c>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d168      	bne.n	8001438 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e246      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x76>
 8001374:	4b80      	ldr	r3, [pc, #512]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a7f      	ldr	r2, [pc, #508]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800137a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e02e      	b.n	80013e0 <HAL_RCC_OscConfig+0xd4>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x98>
 800138a:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a7a      	ldr	r2, [pc, #488]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b78      	ldr	r3, [pc, #480]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a77      	ldr	r2, [pc, #476]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800139c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e01d      	b.n	80013e0 <HAL_RCC_OscConfig+0xd4>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0xbc>
 80013ae:	4b72      	ldr	r3, [pc, #456]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a71      	ldr	r2, [pc, #452]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a6e      	ldr	r2, [pc, #440]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0xd4>
 80013c8:	4b6b      	ldr	r3, [pc, #428]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a6a      	ldr	r2, [pc, #424]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b68      	ldr	r3, [pc, #416]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a67      	ldr	r2, [pc, #412]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc0a 	bl	8000c00 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fc06 	bl	8000c00 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e1fa      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0xe4>
 800140e:	e014      	b.n	800143a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fbf6 	bl	8000c00 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fbf2 	bl	8000c00 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e1e6      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	4b53      	ldr	r3, [pc, #332]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x10c>
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d063      	beq.n	800150e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001446:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001452:	4b49      	ldr	r3, [pc, #292]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b08      	cmp	r3, #8
 800145c:	d11c      	bne.n	8001498 <HAL_RCC_OscConfig+0x18c>
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d116      	bne.n	8001498 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	4b43      	ldr	r3, [pc, #268]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x176>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d001      	beq.n	8001482 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e1ba      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4939      	ldr	r1, [pc, #228]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	e03a      	b.n	800150e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a0:	4b36      	ldr	r3, [pc, #216]	; (800157c <HAL_RCC_OscConfig+0x270>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fbab 	bl	8000c00 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fba7 	bl	8000c00 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e19b      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4927      	ldr	r1, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e015      	b.n	800150e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_RCC_OscConfig+0x270>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb8a 	bl	8000c00 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f0:	f7ff fb86 	bl	8000c00 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e17a      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d03a      	beq.n	8001590 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d019      	beq.n	8001556 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_RCC_OscConfig+0x274>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff fb6a 	bl	8000c00 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff fb66 	bl	8000c00 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e15a      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f000 fad8 	bl	8001b04 <RCC_Delay>
 8001554:	e01c      	b.n	8001590 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_RCC_OscConfig+0x274>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7ff fb50 	bl	8000c00 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001562:	e00f      	b.n	8001584 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff fb4c 	bl	8000c00 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d908      	bls.n	8001584 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e140      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	42420000 	.word	0x42420000
 8001580:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	4b9e      	ldr	r3, [pc, #632]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e9      	bne.n	8001564 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a6 	beq.w	80016ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a2:	4b97      	ldr	r3, [pc, #604]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10d      	bne.n	80015ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b94      	ldr	r3, [pc, #592]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a93      	ldr	r2, [pc, #588]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b91      	ldr	r3, [pc, #580]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c6:	2301      	movs	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b8e      	ldr	r3, [pc, #568]	; (8001804 <HAL_RCC_OscConfig+0x4f8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d118      	bne.n	8001608 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d6:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <HAL_RCC_OscConfig+0x4f8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a8a      	ldr	r2, [pc, #552]	; (8001804 <HAL_RCC_OscConfig+0x4f8>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb0d 	bl	8000c00 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ea:	f7ff fb09 	bl	8000c00 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b64      	cmp	r3, #100	; 0x64
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e0fd      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	4b81      	ldr	r3, [pc, #516]	; (8001804 <HAL_RCC_OscConfig+0x4f8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x312>
 8001610:	4b7b      	ldr	r3, [pc, #492]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a7a      	ldr	r2, [pc, #488]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	e02d      	b.n	800167a <HAL_RCC_OscConfig+0x36e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x334>
 8001626:	4b76      	ldr	r3, [pc, #472]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a75      	ldr	r2, [pc, #468]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	4b73      	ldr	r3, [pc, #460]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a72      	ldr	r2, [pc, #456]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	f023 0304 	bic.w	r3, r3, #4
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	e01c      	b.n	800167a <HAL_RCC_OscConfig+0x36e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b05      	cmp	r3, #5
 8001646:	d10c      	bne.n	8001662 <HAL_RCC_OscConfig+0x356>
 8001648:	4b6d      	ldr	r3, [pc, #436]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a6c      	ldr	r2, [pc, #432]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6213      	str	r3, [r2, #32]
 8001654:	4b6a      	ldr	r3, [pc, #424]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a69      	ldr	r2, [pc, #420]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6213      	str	r3, [r2, #32]
 8001660:	e00b      	b.n	800167a <HAL_RCC_OscConfig+0x36e>
 8001662:	4b67      	ldr	r3, [pc, #412]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a66      	ldr	r2, [pc, #408]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6213      	str	r3, [r2, #32]
 800166e:	4b64      	ldr	r3, [pc, #400]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a63      	ldr	r2, [pc, #396]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d015      	beq.n	80016ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff fabd 	bl	8000c00 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fab9 	bl	8000c00 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e0ab      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a0:	4b57      	ldr	r3, [pc, #348]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0ee      	beq.n	800168a <HAL_RCC_OscConfig+0x37e>
 80016ac:	e014      	b.n	80016d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff faa7 	bl	8000c00 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff faa3 	bl	8000c00 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e095      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1ee      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d105      	bne.n	80016ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016de:	4b48      	ldr	r3, [pc, #288]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a47      	ldr	r2, [pc, #284]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8081 	beq.w	80017f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f4:	4b42      	ldr	r3, [pc, #264]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d061      	beq.n	80017c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d146      	bne.n	8001796 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001708:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <HAL_RCC_OscConfig+0x4fc>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fa77 	bl	8000c00 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff fa73 	bl	8000c00 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e067      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001728:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173c:	d108      	bne.n	8001750 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	492d      	ldr	r1, [pc, #180]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a19      	ldr	r1, [r3, #32]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	430b      	orrs	r3, r1
 8001762:	4927      	ldr	r1, [pc, #156]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <HAL_RCC_OscConfig+0x4fc>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fa47 	bl	8000c00 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001776:	f7ff fa43 	bl	8000c00 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e037      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x46a>
 8001794:	e02f      	b.n	80017f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <HAL_RCC_OscConfig+0x4fc>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fa30 	bl	8000c00 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff fa2c 	bl	8000c00 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e020      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x498>
 80017c2:	e018      	b.n	80017f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e013      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	40007000 	.word	0x40007000
 8001808:	42420060 	.word	0x42420060

0800180c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0d0      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001820:	4b6a      	ldr	r3, [pc, #424]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d910      	bls.n	8001850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b67      	ldr	r3, [pc, #412]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 0207 	bic.w	r2, r3, #7
 8001836:	4965      	ldr	r1, [pc, #404]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b63      	ldr	r3, [pc, #396]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0b8      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d020      	beq.n	800189e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001868:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001880:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a52      	ldr	r2, [pc, #328]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800188a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	494d      	ldr	r1, [pc, #308]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d040      	beq.n	800192c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d115      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e07f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e073      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e06b      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f023 0203 	bic.w	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4936      	ldr	r1, [pc, #216]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018fc:	f7ff f980 	bl	8000c00 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	e00a      	b.n	800191a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001904:	f7ff f97c 	bl	8000c00 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e053      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 020c 	and.w	r2, r3, #12
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	429a      	cmp	r2, r3
 800192a:	d1eb      	bne.n	8001904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d210      	bcs.n	800195c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 0207 	bic.w	r2, r3, #7
 8001942:	4922      	ldr	r1, [pc, #136]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e032      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4916      	ldr	r1, [pc, #88]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	490e      	ldr	r1, [pc, #56]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800199a:	f000 f821 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 800199e:	4602      	mov	r2, r0
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	490a      	ldr	r1, [pc, #40]	; (80019d4 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	5ccb      	ldrb	r3, [r1, r3]
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1cc>)
 80019b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1d0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f8de 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000
 80019d0:	40021000 	.word	0x40021000
 80019d4:	08002f7c 	.word	0x08002f7c
 80019d8:	20000004 	.word	0x20000004
 80019dc:	20000008 	.word	0x20000008

080019e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e0:	b490      	push	{r4, r7}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019e8:	1d3c      	adds	r4, r7, #4
 80019ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019f0:	f240 2301 	movw	r3, #513	; 0x201
 80019f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a0a:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d002      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x40>
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d003      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x46>
 8001a1e:	e02d      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a22:	623b      	str	r3, [r7, #32]
      break;
 8001a24:	e02d      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	0c9b      	lsrs	r3, r3, #18
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a32:	4413      	add	r3, r2
 8001a34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a38:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	0c5b      	lsrs	r3, r3, #17
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a52:	4413      	add	r3, r2
 8001a54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a5e:	fb02 f203 	mul.w	r2, r2, r3
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6a:	e004      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	623b      	str	r3, [r7, #32]
      break;
 8001a7a:	e002      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a7e:	623b      	str	r3, [r7, #32]
      break;
 8001a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a82:	6a3b      	ldr	r3, [r7, #32]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3728      	adds	r7, #40	; 0x28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc90      	pop	{r4, r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	08002f68 	.word	0x08002f68
 8001a94:	40021000 	.word	0x40021000
 8001a98:	007a1200 	.word	0x007a1200
 8001a9c:	003d0900 	.word	0x003d0900

08001aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa4:	4b02      	ldr	r3, [pc, #8]	; (8001ab0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab8:	f7ff fff2 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4903      	ldr	r1, [pc, #12]	; (8001ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aca:	5ccb      	ldrb	r3, [r1, r3]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	08002f8c 	.word	0x08002f8c

08001adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ae0:	f7ff ffde 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	0adb      	lsrs	r3, r3, #11
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4903      	ldr	r1, [pc, #12]	; (8001b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000
 8001b00:	08002f8c 	.word	0x08002f8c

08001b04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <RCC_Delay+0x34>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <RCC_Delay+0x38>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0a5b      	lsrs	r3, r3, #9
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b20:	bf00      	nop
  }
  while (Delay --);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1e5a      	subs	r2, r3, #1
 8001b26:	60fa      	str	r2, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f9      	bne.n	8001b20 <RCC_Delay+0x1c>
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	20000004 	.word	0x20000004
 8001b3c:	10624dd3 	.word	0x10624dd3

08001b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e03f      	b.n	8001bd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe ff10 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2224      	movs	r2, #36	; 0x24
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fbe5 	bl	8002354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	4613      	mov	r3, r2
 8001be6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d130      	bne.n	8001c56 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <HAL_UART_Transmit_IT+0x26>
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e029      	b.n	8001c58 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_UART_Transmit_IT+0x38>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e022      	b.n	8001c58 <HAL_UART_Transmit_IT+0x7e>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	88fa      	ldrh	r2, [r7, #6]
 8001c24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	88fa      	ldrh	r2, [r7, #6]
 8001c2a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2221      	movs	r2, #33	; 0x21
 8001c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
  }
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b20      	cmp	r3, #32
 8001c7a:	d11d      	bne.n	8001cb8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <HAL_UART_Receive_IT+0x26>
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e016      	b.n	8001cba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_UART_Receive_IT+0x38>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e00f      	b.n	8001cba <HAL_UART_Receive_IT+0x58>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f9c6 	bl	8002040 <UART_Start_Receive_IT>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	e000      	b.n	8001cba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
  }
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10d      	bne.n	8001d16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_UART_IRQHandler+0x52>
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fa76 	bl	8002200 <UART_Receive_IT>
      return;
 8001d14:	e17b      	b.n	800200e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80b1 	beq.w	8001e80 <HAL_UART_IRQHandler+0x1bc>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_UART_IRQHandler+0x70>
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80a6 	beq.w	8001e80 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00a      	beq.n	8001d54 <HAL_UART_IRQHandler+0x90>
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <HAL_UART_IRQHandler+0xb0>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f043 0202 	orr.w	r2, r3, #2
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <HAL_UART_IRQHandler+0xd0>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f043 0204 	orr.w	r2, r3, #4
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00f      	beq.n	8001dbe <HAL_UART_IRQHandler+0xfa>
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d104      	bne.n	8001db2 <HAL_UART_IRQHandler+0xee>
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f043 0208 	orr.w	r2, r3, #8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 811e 	beq.w	8002004 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_UART_IRQHandler+0x11e>
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fa0f 	bl	8002200 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <HAL_UART_IRQHandler+0x146>
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d031      	beq.n	8001e6e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f951 	bl	80020b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d023      	beq.n	8001e66 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e2c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d013      	beq.n	8001e5e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	4a76      	ldr	r2, [pc, #472]	; (8002014 <HAL_UART_IRQHandler+0x350>)
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f82e 	bl	8000ea4 <HAL_DMA_Abort_IT>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d016      	beq.n	8001e7c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e5c:	e00e      	b.n	8001e7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f8da 	bl	8002018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e64:	e00a      	b.n	8001e7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8d6 	bl	8002018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e6c:	e006      	b.n	8001e7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8d2 	bl	8002018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001e7a:	e0c3      	b.n	8002004 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e7c:	bf00      	nop
    return;
 8001e7e:	e0c1      	b.n	8002004 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	f040 80a1 	bne.w	8001fcc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 809b 	beq.w	8001fcc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 8095 	beq.w	8001fcc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d04e      	beq.n	8001f64 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001ed0:	8a3b      	ldrh	r3, [r7, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8098 	beq.w	8002008 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001edc:	8a3a      	ldrh	r2, [r7, #16]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	f080 8092 	bcs.w	8002008 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	8a3a      	ldrh	r2, [r7, #16]
 8001ee8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d02b      	beq.n	8001f4c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f02:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f22:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0210 	bic.w	r2, r2, #16
 8001f40:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe ff71 	bl	8000e2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f864 	bl	800202a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001f62:	e051      	b.n	8002008 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d047      	beq.n	800200c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001f7c:	8a7b      	ldrh	r3, [r7, #18]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d044      	beq.n	800200c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f90:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0210 	bic.w	r2, r2, #16
 8001fbe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001fc0:	8a7b      	ldrh	r3, [r7, #18]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f830 	bl	800202a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001fca:	e01f      	b.n	800200c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_UART_IRQHandler+0x324>
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f8a6 	bl	8002132 <UART_Transmit_IT>
    return;
 8001fe6:	e012      	b.n	800200e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00d      	beq.n	800200e <HAL_UART_IRQHandler+0x34a>
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f8e7 	bl	80021d0 <UART_EndTransmit_IT>
    return;
 8002002:	e004      	b.n	800200e <HAL_UART_IRQHandler+0x34a>
    return;
 8002004:	bf00      	nop
 8002006:	e002      	b.n	800200e <HAL_UART_IRQHandler+0x34a>
      return;
 8002008:	bf00      	nop
 800200a:	e000      	b.n	800200e <HAL_UART_IRQHandler+0x34a>
      return;
 800200c:	bf00      	nop
  }
}
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	0800210b 	.word	0x0800210b

08002018 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	4613      	mov	r3, r2
 800204c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	88fa      	ldrh	r2, [r7, #6]
 8002058:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	88fa      	ldrh	r2, [r7, #6]
 800205e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2222      	movs	r2, #34	; 0x22
 800206a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002084:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0201 	orr.w	r2, r2, #1
 8002094:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0220 	orr.w	r2, r2, #32
 80020a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80020c8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0201 	bic.w	r2, r2, #1
 80020d8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0210 	bic.w	r2, r2, #16
 80020f0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7ff ff77 	bl	8002018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b21      	cmp	r3, #33	; 0x21
 8002144:	d13e      	bne.n	80021c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214e:	d114      	bne.n	800217a <UART_Transmit_IT+0x48>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d110      	bne.n	800217a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800216c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	1c9a      	adds	r2, r3, #2
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	621a      	str	r2, [r3, #32]
 8002178:	e008      	b.n	800218c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6211      	str	r1, [r2, #32]
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29b      	uxth	r3, r3
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4619      	mov	r1, r3
 800219a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10f      	bne.n	80021c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7fe f841 	bl	8000278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b22      	cmp	r3, #34	; 0x22
 8002212:	f040 8099 	bne.w	8002348 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221e:	d117      	bne.n	8002250 <UART_Receive_IT+0x50>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d113      	bne.n	8002250 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	b29b      	uxth	r3, r3
 800223a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223e:	b29a      	uxth	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	1c9a      	adds	r2, r3, #2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
 800224e:	e026      	b.n	800229e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002262:	d007      	beq.n	8002274 <UART_Receive_IT+0x74>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <UART_Receive_IT+0x82>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e008      	b.n	8002294 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800228e:	b2da      	uxtb	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4619      	mov	r1, r3
 80022ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d148      	bne.n	8002344 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0220 	bic.w	r2, r2, #32
 80022c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d123      	bne.n	800233a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0210 	bic.w	r2, r2, #16
 8002306:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b10      	cmp	r3, #16
 8002314:	d10a      	bne.n	800232c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002330:	4619      	mov	r1, r3
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fe79 	bl	800202a <HAL_UARTEx_RxEventCallback>
 8002338:	e002      	b.n	8002340 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fd ffd8 	bl	80002f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e002      	b.n	800234a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800238e:	f023 030c 	bic.w	r3, r3, #12
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	430b      	orrs	r3, r1
 800239a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2c      	ldr	r2, [pc, #176]	; (8002468 <UART_SetConfig+0x114>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d103      	bne.n	80023c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023bc:	f7ff fb8e 	bl	8001adc <HAL_RCC_GetPCLK2Freq>
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	e002      	b.n	80023ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023c4:	f7ff fb76 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 80023c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	009a      	lsls	r2, r3, #2
 80023d4:	441a      	add	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	4a22      	ldr	r2, [pc, #136]	; (800246c <UART_SetConfig+0x118>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	0119      	lsls	r1, r3, #4
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	009a      	lsls	r2, r3, #2
 80023f4:	441a      	add	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <UART_SetConfig+0x118>)
 8002402:	fba3 0302 	umull	r0, r3, r3, r2
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2064      	movs	r0, #100	; 0x64
 800240a:	fb00 f303 	mul.w	r3, r0, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	3332      	adds	r3, #50	; 0x32
 8002414:	4a15      	ldr	r2, [pc, #84]	; (800246c <UART_SetConfig+0x118>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002420:	4419      	add	r1, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	009a      	lsls	r2, r3, #2
 800242c:	441a      	add	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	fbb2 f2f3 	udiv	r2, r2, r3
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <UART_SetConfig+0x118>)
 800243a:	fba3 0302 	umull	r0, r3, r3, r2
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2064      	movs	r0, #100	; 0x64
 8002442:	fb00 f303 	mul.w	r3, r0, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	3332      	adds	r3, #50	; 0x32
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <UART_SetConfig+0x118>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	f003 020f 	and.w	r2, r3, #15
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	440a      	add	r2, r1
 800245e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40013800 	.word	0x40013800
 800246c:	51eb851f 	.word	0x51eb851f

08002470 <atoi>:
 8002470:	220a      	movs	r2, #10
 8002472:	2100      	movs	r1, #0
 8002474:	f000 b8d8 	b.w	8002628 <strtol>

08002478 <__errno>:
 8002478:	4b01      	ldr	r3, [pc, #4]	; (8002480 <__errno+0x8>)
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000010 	.word	0x20000010

08002484 <__libc_init_array>:
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	2600      	movs	r6, #0
 8002488:	4d0c      	ldr	r5, [pc, #48]	; (80024bc <__libc_init_array+0x38>)
 800248a:	4c0d      	ldr	r4, [pc, #52]	; (80024c0 <__libc_init_array+0x3c>)
 800248c:	1b64      	subs	r4, r4, r5
 800248e:	10a4      	asrs	r4, r4, #2
 8002490:	42a6      	cmp	r6, r4
 8002492:	d109      	bne.n	80024a8 <__libc_init_array+0x24>
 8002494:	f000 fcfe 	bl	8002e94 <_init>
 8002498:	2600      	movs	r6, #0
 800249a:	4d0a      	ldr	r5, [pc, #40]	; (80024c4 <__libc_init_array+0x40>)
 800249c:	4c0a      	ldr	r4, [pc, #40]	; (80024c8 <__libc_init_array+0x44>)
 800249e:	1b64      	subs	r4, r4, r5
 80024a0:	10a4      	asrs	r4, r4, #2
 80024a2:	42a6      	cmp	r6, r4
 80024a4:	d105      	bne.n	80024b2 <__libc_init_array+0x2e>
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
 80024a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ac:	4798      	blx	r3
 80024ae:	3601      	adds	r6, #1
 80024b0:	e7ee      	b.n	8002490 <__libc_init_array+0xc>
 80024b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80024b6:	4798      	blx	r3
 80024b8:	3601      	adds	r6, #1
 80024ba:	e7f2      	b.n	80024a2 <__libc_init_array+0x1e>
 80024bc:	080030c8 	.word	0x080030c8
 80024c0:	080030c8 	.word	0x080030c8
 80024c4:	080030c8 	.word	0x080030c8
 80024c8:	080030cc 	.word	0x080030cc

080024cc <memcpy>:
 80024cc:	440a      	add	r2, r1
 80024ce:	4291      	cmp	r1, r2
 80024d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80024d4:	d100      	bne.n	80024d8 <memcpy+0xc>
 80024d6:	4770      	bx	lr
 80024d8:	b510      	push	{r4, lr}
 80024da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024de:	4291      	cmp	r1, r2
 80024e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80024e4:	d1f9      	bne.n	80024da <memcpy+0xe>
 80024e6:	bd10      	pop	{r4, pc}

080024e8 <memset>:
 80024e8:	4603      	mov	r3, r0
 80024ea:	4402      	add	r2, r0
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d100      	bne.n	80024f2 <memset+0xa>
 80024f0:	4770      	bx	lr
 80024f2:	f803 1b01 	strb.w	r1, [r3], #1
 80024f6:	e7f9      	b.n	80024ec <memset+0x4>

080024f8 <strncmp>:
 80024f8:	b510      	push	{r4, lr}
 80024fa:	b16a      	cbz	r2, 8002518 <strncmp+0x20>
 80024fc:	3901      	subs	r1, #1
 80024fe:	1884      	adds	r4, r0, r2
 8002500:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002504:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002508:	4293      	cmp	r3, r2
 800250a:	d103      	bne.n	8002514 <strncmp+0x1c>
 800250c:	42a0      	cmp	r0, r4
 800250e:	d001      	beq.n	8002514 <strncmp+0x1c>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f5      	bne.n	8002500 <strncmp+0x8>
 8002514:	1a98      	subs	r0, r3, r2
 8002516:	bd10      	pop	{r4, pc}
 8002518:	4610      	mov	r0, r2
 800251a:	e7fc      	b.n	8002516 <strncmp+0x1e>

0800251c <_strtol_l.isra.0>:
 800251c:	2b01      	cmp	r3, #1
 800251e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002522:	4686      	mov	lr, r0
 8002524:	d001      	beq.n	800252a <_strtol_l.isra.0+0xe>
 8002526:	2b24      	cmp	r3, #36	; 0x24
 8002528:	d906      	bls.n	8002538 <_strtol_l.isra.0+0x1c>
 800252a:	f7ff ffa5 	bl	8002478 <__errno>
 800252e:	2316      	movs	r3, #22
 8002530:	6003      	str	r3, [r0, #0]
 8002532:	2000      	movs	r0, #0
 8002534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002538:	468c      	mov	ip, r1
 800253a:	4e3a      	ldr	r6, [pc, #232]	; (8002624 <_strtol_l.isra.0+0x108>)
 800253c:	4660      	mov	r0, ip
 800253e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8002542:	5da5      	ldrb	r5, [r4, r6]
 8002544:	f015 0508 	ands.w	r5, r5, #8
 8002548:	d1f8      	bne.n	800253c <_strtol_l.isra.0+0x20>
 800254a:	2c2d      	cmp	r4, #45	; 0x2d
 800254c:	d133      	bne.n	80025b6 <_strtol_l.isra.0+0x9a>
 800254e:	f04f 0801 	mov.w	r8, #1
 8002552:	f89c 4000 	ldrb.w	r4, [ip]
 8002556:	f100 0c02 	add.w	ip, r0, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d05d      	beq.n	800261a <_strtol_l.isra.0+0xfe>
 800255e:	2b10      	cmp	r3, #16
 8002560:	d10c      	bne.n	800257c <_strtol_l.isra.0+0x60>
 8002562:	2c30      	cmp	r4, #48	; 0x30
 8002564:	d10a      	bne.n	800257c <_strtol_l.isra.0+0x60>
 8002566:	f89c 0000 	ldrb.w	r0, [ip]
 800256a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800256e:	2858      	cmp	r0, #88	; 0x58
 8002570:	d14e      	bne.n	8002610 <_strtol_l.isra.0+0xf4>
 8002572:	2310      	movs	r3, #16
 8002574:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8002578:	f10c 0c02 	add.w	ip, ip, #2
 800257c:	2500      	movs	r5, #0
 800257e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8002582:	3f01      	subs	r7, #1
 8002584:	fbb7 f9f3 	udiv	r9, r7, r3
 8002588:	4628      	mov	r0, r5
 800258a:	fb03 7a19 	mls	sl, r3, r9, r7
 800258e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8002592:	2e09      	cmp	r6, #9
 8002594:	d818      	bhi.n	80025c8 <_strtol_l.isra.0+0xac>
 8002596:	4634      	mov	r4, r6
 8002598:	42a3      	cmp	r3, r4
 800259a:	dd24      	ble.n	80025e6 <_strtol_l.isra.0+0xca>
 800259c:	2d00      	cmp	r5, #0
 800259e:	db1f      	blt.n	80025e0 <_strtol_l.isra.0+0xc4>
 80025a0:	4581      	cmp	r9, r0
 80025a2:	d31d      	bcc.n	80025e0 <_strtol_l.isra.0+0xc4>
 80025a4:	d101      	bne.n	80025aa <_strtol_l.isra.0+0x8e>
 80025a6:	45a2      	cmp	sl, r4
 80025a8:	db1a      	blt.n	80025e0 <_strtol_l.isra.0+0xc4>
 80025aa:	2501      	movs	r5, #1
 80025ac:	fb00 4003 	mla	r0, r0, r3, r4
 80025b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80025b4:	e7eb      	b.n	800258e <_strtol_l.isra.0+0x72>
 80025b6:	2c2b      	cmp	r4, #43	; 0x2b
 80025b8:	bf08      	it	eq
 80025ba:	f89c 4000 	ldrbeq.w	r4, [ip]
 80025be:	46a8      	mov	r8, r5
 80025c0:	bf08      	it	eq
 80025c2:	f100 0c02 	addeq.w	ip, r0, #2
 80025c6:	e7c8      	b.n	800255a <_strtol_l.isra.0+0x3e>
 80025c8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80025cc:	2e19      	cmp	r6, #25
 80025ce:	d801      	bhi.n	80025d4 <_strtol_l.isra.0+0xb8>
 80025d0:	3c37      	subs	r4, #55	; 0x37
 80025d2:	e7e1      	b.n	8002598 <_strtol_l.isra.0+0x7c>
 80025d4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80025d8:	2e19      	cmp	r6, #25
 80025da:	d804      	bhi.n	80025e6 <_strtol_l.isra.0+0xca>
 80025dc:	3c57      	subs	r4, #87	; 0x57
 80025de:	e7db      	b.n	8002598 <_strtol_l.isra.0+0x7c>
 80025e0:	f04f 35ff 	mov.w	r5, #4294967295
 80025e4:	e7e4      	b.n	80025b0 <_strtol_l.isra.0+0x94>
 80025e6:	2d00      	cmp	r5, #0
 80025e8:	da08      	bge.n	80025fc <_strtol_l.isra.0+0xe0>
 80025ea:	2322      	movs	r3, #34	; 0x22
 80025ec:	4638      	mov	r0, r7
 80025ee:	f8ce 3000 	str.w	r3, [lr]
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	d09e      	beq.n	8002534 <_strtol_l.isra.0+0x18>
 80025f6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80025fa:	e007      	b.n	800260c <_strtol_l.isra.0+0xf0>
 80025fc:	f1b8 0f00 	cmp.w	r8, #0
 8002600:	d000      	beq.n	8002604 <_strtol_l.isra.0+0xe8>
 8002602:	4240      	negs	r0, r0
 8002604:	2a00      	cmp	r2, #0
 8002606:	d095      	beq.n	8002534 <_strtol_l.isra.0+0x18>
 8002608:	2d00      	cmp	r5, #0
 800260a:	d1f4      	bne.n	80025f6 <_strtol_l.isra.0+0xda>
 800260c:	6011      	str	r1, [r2, #0]
 800260e:	e791      	b.n	8002534 <_strtol_l.isra.0+0x18>
 8002610:	2430      	movs	r4, #48	; 0x30
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1b2      	bne.n	800257c <_strtol_l.isra.0+0x60>
 8002616:	2308      	movs	r3, #8
 8002618:	e7b0      	b.n	800257c <_strtol_l.isra.0+0x60>
 800261a:	2c30      	cmp	r4, #48	; 0x30
 800261c:	d0a3      	beq.n	8002566 <_strtol_l.isra.0+0x4a>
 800261e:	230a      	movs	r3, #10
 8002620:	e7ac      	b.n	800257c <_strtol_l.isra.0+0x60>
 8002622:	bf00      	nop
 8002624:	08002f95 	.word	0x08002f95

08002628 <strtol>:
 8002628:	4613      	mov	r3, r2
 800262a:	460a      	mov	r2, r1
 800262c:	4601      	mov	r1, r0
 800262e:	4802      	ldr	r0, [pc, #8]	; (8002638 <strtol+0x10>)
 8002630:	6800      	ldr	r0, [r0, #0]
 8002632:	f7ff bf73 	b.w	800251c <_strtol_l.isra.0>
 8002636:	bf00      	nop
 8002638:	20000010 	.word	0x20000010

0800263c <_vsiprintf_r>:
 800263c:	b500      	push	{lr}
 800263e:	b09b      	sub	sp, #108	; 0x6c
 8002640:	9100      	str	r1, [sp, #0]
 8002642:	9104      	str	r1, [sp, #16]
 8002644:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002648:	9105      	str	r1, [sp, #20]
 800264a:	9102      	str	r1, [sp, #8]
 800264c:	4905      	ldr	r1, [pc, #20]	; (8002664 <_vsiprintf_r+0x28>)
 800264e:	9103      	str	r1, [sp, #12]
 8002650:	4669      	mov	r1, sp
 8002652:	f000 f86f 	bl	8002734 <_svfiprintf_r>
 8002656:	2200      	movs	r2, #0
 8002658:	9b00      	ldr	r3, [sp, #0]
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	b01b      	add	sp, #108	; 0x6c
 800265e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002662:	bf00      	nop
 8002664:	ffff0208 	.word	0xffff0208

08002668 <vsiprintf>:
 8002668:	4613      	mov	r3, r2
 800266a:	460a      	mov	r2, r1
 800266c:	4601      	mov	r1, r0
 800266e:	4802      	ldr	r0, [pc, #8]	; (8002678 <vsiprintf+0x10>)
 8002670:	6800      	ldr	r0, [r0, #0]
 8002672:	f7ff bfe3 	b.w	800263c <_vsiprintf_r>
 8002676:	bf00      	nop
 8002678:	20000010 	.word	0x20000010

0800267c <__ssputs_r>:
 800267c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002680:	688e      	ldr	r6, [r1, #8]
 8002682:	4682      	mov	sl, r0
 8002684:	429e      	cmp	r6, r3
 8002686:	460c      	mov	r4, r1
 8002688:	4690      	mov	r8, r2
 800268a:	461f      	mov	r7, r3
 800268c:	d838      	bhi.n	8002700 <__ssputs_r+0x84>
 800268e:	898a      	ldrh	r2, [r1, #12]
 8002690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002694:	d032      	beq.n	80026fc <__ssputs_r+0x80>
 8002696:	6825      	ldr	r5, [r4, #0]
 8002698:	6909      	ldr	r1, [r1, #16]
 800269a:	3301      	adds	r3, #1
 800269c:	eba5 0901 	sub.w	r9, r5, r1
 80026a0:	6965      	ldr	r5, [r4, #20]
 80026a2:	444b      	add	r3, r9
 80026a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80026ac:	106d      	asrs	r5, r5, #1
 80026ae:	429d      	cmp	r5, r3
 80026b0:	bf38      	it	cc
 80026b2:	461d      	movcc	r5, r3
 80026b4:	0553      	lsls	r3, r2, #21
 80026b6:	d531      	bpl.n	800271c <__ssputs_r+0xa0>
 80026b8:	4629      	mov	r1, r5
 80026ba:	f000 fb45 	bl	8002d48 <_malloc_r>
 80026be:	4606      	mov	r6, r0
 80026c0:	b950      	cbnz	r0, 80026d8 <__ssputs_r+0x5c>
 80026c2:	230c      	movs	r3, #12
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f8ca 3000 	str.w	r3, [sl]
 80026cc:	89a3      	ldrh	r3, [r4, #12]
 80026ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d2:	81a3      	strh	r3, [r4, #12]
 80026d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026d8:	464a      	mov	r2, r9
 80026da:	6921      	ldr	r1, [r4, #16]
 80026dc:	f7ff fef6 	bl	80024cc <memcpy>
 80026e0:	89a3      	ldrh	r3, [r4, #12]
 80026e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80026e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ea:	81a3      	strh	r3, [r4, #12]
 80026ec:	6126      	str	r6, [r4, #16]
 80026ee:	444e      	add	r6, r9
 80026f0:	6026      	str	r6, [r4, #0]
 80026f2:	463e      	mov	r6, r7
 80026f4:	6165      	str	r5, [r4, #20]
 80026f6:	eba5 0509 	sub.w	r5, r5, r9
 80026fa:	60a5      	str	r5, [r4, #8]
 80026fc:	42be      	cmp	r6, r7
 80026fe:	d900      	bls.n	8002702 <__ssputs_r+0x86>
 8002700:	463e      	mov	r6, r7
 8002702:	4632      	mov	r2, r6
 8002704:	4641      	mov	r1, r8
 8002706:	6820      	ldr	r0, [r4, #0]
 8002708:	f000 fab8 	bl	8002c7c <memmove>
 800270c:	68a3      	ldr	r3, [r4, #8]
 800270e:	6822      	ldr	r2, [r4, #0]
 8002710:	1b9b      	subs	r3, r3, r6
 8002712:	4432      	add	r2, r6
 8002714:	2000      	movs	r0, #0
 8002716:	60a3      	str	r3, [r4, #8]
 8002718:	6022      	str	r2, [r4, #0]
 800271a:	e7db      	b.n	80026d4 <__ssputs_r+0x58>
 800271c:	462a      	mov	r2, r5
 800271e:	f000 fb6d 	bl	8002dfc <_realloc_r>
 8002722:	4606      	mov	r6, r0
 8002724:	2800      	cmp	r0, #0
 8002726:	d1e1      	bne.n	80026ec <__ssputs_r+0x70>
 8002728:	4650      	mov	r0, sl
 800272a:	6921      	ldr	r1, [r4, #16]
 800272c:	f000 fac0 	bl	8002cb0 <_free_r>
 8002730:	e7c7      	b.n	80026c2 <__ssputs_r+0x46>
	...

08002734 <_svfiprintf_r>:
 8002734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002738:	4698      	mov	r8, r3
 800273a:	898b      	ldrh	r3, [r1, #12]
 800273c:	4607      	mov	r7, r0
 800273e:	061b      	lsls	r3, r3, #24
 8002740:	460d      	mov	r5, r1
 8002742:	4614      	mov	r4, r2
 8002744:	b09d      	sub	sp, #116	; 0x74
 8002746:	d50e      	bpl.n	8002766 <_svfiprintf_r+0x32>
 8002748:	690b      	ldr	r3, [r1, #16]
 800274a:	b963      	cbnz	r3, 8002766 <_svfiprintf_r+0x32>
 800274c:	2140      	movs	r1, #64	; 0x40
 800274e:	f000 fafb 	bl	8002d48 <_malloc_r>
 8002752:	6028      	str	r0, [r5, #0]
 8002754:	6128      	str	r0, [r5, #16]
 8002756:	b920      	cbnz	r0, 8002762 <_svfiprintf_r+0x2e>
 8002758:	230c      	movs	r3, #12
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	e0d1      	b.n	8002906 <_svfiprintf_r+0x1d2>
 8002762:	2340      	movs	r3, #64	; 0x40
 8002764:	616b      	str	r3, [r5, #20]
 8002766:	2300      	movs	r3, #0
 8002768:	9309      	str	r3, [sp, #36]	; 0x24
 800276a:	2320      	movs	r3, #32
 800276c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002770:	2330      	movs	r3, #48	; 0x30
 8002772:	f04f 0901 	mov.w	r9, #1
 8002776:	f8cd 800c 	str.w	r8, [sp, #12]
 800277a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002920 <_svfiprintf_r+0x1ec>
 800277e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002782:	4623      	mov	r3, r4
 8002784:	469a      	mov	sl, r3
 8002786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800278a:	b10a      	cbz	r2, 8002790 <_svfiprintf_r+0x5c>
 800278c:	2a25      	cmp	r2, #37	; 0x25
 800278e:	d1f9      	bne.n	8002784 <_svfiprintf_r+0x50>
 8002790:	ebba 0b04 	subs.w	fp, sl, r4
 8002794:	d00b      	beq.n	80027ae <_svfiprintf_r+0x7a>
 8002796:	465b      	mov	r3, fp
 8002798:	4622      	mov	r2, r4
 800279a:	4629      	mov	r1, r5
 800279c:	4638      	mov	r0, r7
 800279e:	f7ff ff6d 	bl	800267c <__ssputs_r>
 80027a2:	3001      	adds	r0, #1
 80027a4:	f000 80aa 	beq.w	80028fc <_svfiprintf_r+0x1c8>
 80027a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027aa:	445a      	add	r2, fp
 80027ac:	9209      	str	r2, [sp, #36]	; 0x24
 80027ae:	f89a 3000 	ldrb.w	r3, [sl]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80a2 	beq.w	80028fc <_svfiprintf_r+0x1c8>
 80027b8:	2300      	movs	r3, #0
 80027ba:	f04f 32ff 	mov.w	r2, #4294967295
 80027be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027c2:	f10a 0a01 	add.w	sl, sl, #1
 80027c6:	9304      	str	r3, [sp, #16]
 80027c8:	9307      	str	r3, [sp, #28]
 80027ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027ce:	931a      	str	r3, [sp, #104]	; 0x68
 80027d0:	4654      	mov	r4, sl
 80027d2:	2205      	movs	r2, #5
 80027d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027d8:	4851      	ldr	r0, [pc, #324]	; (8002920 <_svfiprintf_r+0x1ec>)
 80027da:	f000 fa41 	bl	8002c60 <memchr>
 80027de:	9a04      	ldr	r2, [sp, #16]
 80027e0:	b9d8      	cbnz	r0, 800281a <_svfiprintf_r+0xe6>
 80027e2:	06d0      	lsls	r0, r2, #27
 80027e4:	bf44      	itt	mi
 80027e6:	2320      	movmi	r3, #32
 80027e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027ec:	0711      	lsls	r1, r2, #28
 80027ee:	bf44      	itt	mi
 80027f0:	232b      	movmi	r3, #43	; 0x2b
 80027f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027f6:	f89a 3000 	ldrb.w	r3, [sl]
 80027fa:	2b2a      	cmp	r3, #42	; 0x2a
 80027fc:	d015      	beq.n	800282a <_svfiprintf_r+0xf6>
 80027fe:	4654      	mov	r4, sl
 8002800:	2000      	movs	r0, #0
 8002802:	f04f 0c0a 	mov.w	ip, #10
 8002806:	9a07      	ldr	r2, [sp, #28]
 8002808:	4621      	mov	r1, r4
 800280a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800280e:	3b30      	subs	r3, #48	; 0x30
 8002810:	2b09      	cmp	r3, #9
 8002812:	d94e      	bls.n	80028b2 <_svfiprintf_r+0x17e>
 8002814:	b1b0      	cbz	r0, 8002844 <_svfiprintf_r+0x110>
 8002816:	9207      	str	r2, [sp, #28]
 8002818:	e014      	b.n	8002844 <_svfiprintf_r+0x110>
 800281a:	eba0 0308 	sub.w	r3, r0, r8
 800281e:	fa09 f303 	lsl.w	r3, r9, r3
 8002822:	4313      	orrs	r3, r2
 8002824:	46a2      	mov	sl, r4
 8002826:	9304      	str	r3, [sp, #16]
 8002828:	e7d2      	b.n	80027d0 <_svfiprintf_r+0x9c>
 800282a:	9b03      	ldr	r3, [sp, #12]
 800282c:	1d19      	adds	r1, r3, #4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	9103      	str	r1, [sp, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	bfbb      	ittet	lt
 8002836:	425b      	neglt	r3, r3
 8002838:	f042 0202 	orrlt.w	r2, r2, #2
 800283c:	9307      	strge	r3, [sp, #28]
 800283e:	9307      	strlt	r3, [sp, #28]
 8002840:	bfb8      	it	lt
 8002842:	9204      	strlt	r2, [sp, #16]
 8002844:	7823      	ldrb	r3, [r4, #0]
 8002846:	2b2e      	cmp	r3, #46	; 0x2e
 8002848:	d10c      	bne.n	8002864 <_svfiprintf_r+0x130>
 800284a:	7863      	ldrb	r3, [r4, #1]
 800284c:	2b2a      	cmp	r3, #42	; 0x2a
 800284e:	d135      	bne.n	80028bc <_svfiprintf_r+0x188>
 8002850:	9b03      	ldr	r3, [sp, #12]
 8002852:	3402      	adds	r4, #2
 8002854:	1d1a      	adds	r2, r3, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	9203      	str	r2, [sp, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	bfb8      	it	lt
 800285e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002862:	9305      	str	r3, [sp, #20]
 8002864:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002930 <_svfiprintf_r+0x1fc>
 8002868:	2203      	movs	r2, #3
 800286a:	4650      	mov	r0, sl
 800286c:	7821      	ldrb	r1, [r4, #0]
 800286e:	f000 f9f7 	bl	8002c60 <memchr>
 8002872:	b140      	cbz	r0, 8002886 <_svfiprintf_r+0x152>
 8002874:	2340      	movs	r3, #64	; 0x40
 8002876:	eba0 000a 	sub.w	r0, r0, sl
 800287a:	fa03 f000 	lsl.w	r0, r3, r0
 800287e:	9b04      	ldr	r3, [sp, #16]
 8002880:	3401      	adds	r4, #1
 8002882:	4303      	orrs	r3, r0
 8002884:	9304      	str	r3, [sp, #16]
 8002886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800288a:	2206      	movs	r2, #6
 800288c:	4825      	ldr	r0, [pc, #148]	; (8002924 <_svfiprintf_r+0x1f0>)
 800288e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002892:	f000 f9e5 	bl	8002c60 <memchr>
 8002896:	2800      	cmp	r0, #0
 8002898:	d038      	beq.n	800290c <_svfiprintf_r+0x1d8>
 800289a:	4b23      	ldr	r3, [pc, #140]	; (8002928 <_svfiprintf_r+0x1f4>)
 800289c:	bb1b      	cbnz	r3, 80028e6 <_svfiprintf_r+0x1b2>
 800289e:	9b03      	ldr	r3, [sp, #12]
 80028a0:	3307      	adds	r3, #7
 80028a2:	f023 0307 	bic.w	r3, r3, #7
 80028a6:	3308      	adds	r3, #8
 80028a8:	9303      	str	r3, [sp, #12]
 80028aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028ac:	4433      	add	r3, r6
 80028ae:	9309      	str	r3, [sp, #36]	; 0x24
 80028b0:	e767      	b.n	8002782 <_svfiprintf_r+0x4e>
 80028b2:	460c      	mov	r4, r1
 80028b4:	2001      	movs	r0, #1
 80028b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80028ba:	e7a5      	b.n	8002808 <_svfiprintf_r+0xd4>
 80028bc:	2300      	movs	r3, #0
 80028be:	f04f 0c0a 	mov.w	ip, #10
 80028c2:	4619      	mov	r1, r3
 80028c4:	3401      	adds	r4, #1
 80028c6:	9305      	str	r3, [sp, #20]
 80028c8:	4620      	mov	r0, r4
 80028ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028ce:	3a30      	subs	r2, #48	; 0x30
 80028d0:	2a09      	cmp	r2, #9
 80028d2:	d903      	bls.n	80028dc <_svfiprintf_r+0x1a8>
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0c5      	beq.n	8002864 <_svfiprintf_r+0x130>
 80028d8:	9105      	str	r1, [sp, #20]
 80028da:	e7c3      	b.n	8002864 <_svfiprintf_r+0x130>
 80028dc:	4604      	mov	r4, r0
 80028de:	2301      	movs	r3, #1
 80028e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80028e4:	e7f0      	b.n	80028c8 <_svfiprintf_r+0x194>
 80028e6:	ab03      	add	r3, sp, #12
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	462a      	mov	r2, r5
 80028ec:	4638      	mov	r0, r7
 80028ee:	4b0f      	ldr	r3, [pc, #60]	; (800292c <_svfiprintf_r+0x1f8>)
 80028f0:	a904      	add	r1, sp, #16
 80028f2:	f3af 8000 	nop.w
 80028f6:	1c42      	adds	r2, r0, #1
 80028f8:	4606      	mov	r6, r0
 80028fa:	d1d6      	bne.n	80028aa <_svfiprintf_r+0x176>
 80028fc:	89ab      	ldrh	r3, [r5, #12]
 80028fe:	065b      	lsls	r3, r3, #25
 8002900:	f53f af2c 	bmi.w	800275c <_svfiprintf_r+0x28>
 8002904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002906:	b01d      	add	sp, #116	; 0x74
 8002908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800290c:	ab03      	add	r3, sp, #12
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	462a      	mov	r2, r5
 8002912:	4638      	mov	r0, r7
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <_svfiprintf_r+0x1f8>)
 8002916:	a904      	add	r1, sp, #16
 8002918:	f000 f87c 	bl	8002a14 <_printf_i>
 800291c:	e7eb      	b.n	80028f6 <_svfiprintf_r+0x1c2>
 800291e:	bf00      	nop
 8002920:	08003095 	.word	0x08003095
 8002924:	0800309f 	.word	0x0800309f
 8002928:	00000000 	.word	0x00000000
 800292c:	0800267d 	.word	0x0800267d
 8002930:	0800309b 	.word	0x0800309b

08002934 <_printf_common>:
 8002934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002938:	4616      	mov	r6, r2
 800293a:	4699      	mov	r9, r3
 800293c:	688a      	ldr	r2, [r1, #8]
 800293e:	690b      	ldr	r3, [r1, #16]
 8002940:	4607      	mov	r7, r0
 8002942:	4293      	cmp	r3, r2
 8002944:	bfb8      	it	lt
 8002946:	4613      	movlt	r3, r2
 8002948:	6033      	str	r3, [r6, #0]
 800294a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800294e:	460c      	mov	r4, r1
 8002950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002954:	b10a      	cbz	r2, 800295a <_printf_common+0x26>
 8002956:	3301      	adds	r3, #1
 8002958:	6033      	str	r3, [r6, #0]
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	0699      	lsls	r1, r3, #26
 800295e:	bf42      	ittt	mi
 8002960:	6833      	ldrmi	r3, [r6, #0]
 8002962:	3302      	addmi	r3, #2
 8002964:	6033      	strmi	r3, [r6, #0]
 8002966:	6825      	ldr	r5, [r4, #0]
 8002968:	f015 0506 	ands.w	r5, r5, #6
 800296c:	d106      	bne.n	800297c <_printf_common+0x48>
 800296e:	f104 0a19 	add.w	sl, r4, #25
 8002972:	68e3      	ldr	r3, [r4, #12]
 8002974:	6832      	ldr	r2, [r6, #0]
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	42ab      	cmp	r3, r5
 800297a:	dc28      	bgt.n	80029ce <_printf_common+0x9a>
 800297c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002980:	1e13      	subs	r3, r2, #0
 8002982:	6822      	ldr	r2, [r4, #0]
 8002984:	bf18      	it	ne
 8002986:	2301      	movne	r3, #1
 8002988:	0692      	lsls	r2, r2, #26
 800298a:	d42d      	bmi.n	80029e8 <_printf_common+0xb4>
 800298c:	4649      	mov	r1, r9
 800298e:	4638      	mov	r0, r7
 8002990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002994:	47c0      	blx	r8
 8002996:	3001      	adds	r0, #1
 8002998:	d020      	beq.n	80029dc <_printf_common+0xa8>
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	68e5      	ldr	r5, [r4, #12]
 800299e:	f003 0306 	and.w	r3, r3, #6
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf18      	it	ne
 80029a6:	2500      	movne	r5, #0
 80029a8:	6832      	ldr	r2, [r6, #0]
 80029aa:	f04f 0600 	mov.w	r6, #0
 80029ae:	68a3      	ldr	r3, [r4, #8]
 80029b0:	bf08      	it	eq
 80029b2:	1aad      	subeq	r5, r5, r2
 80029b4:	6922      	ldr	r2, [r4, #16]
 80029b6:	bf08      	it	eq
 80029b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029bc:	4293      	cmp	r3, r2
 80029be:	bfc4      	itt	gt
 80029c0:	1a9b      	subgt	r3, r3, r2
 80029c2:	18ed      	addgt	r5, r5, r3
 80029c4:	341a      	adds	r4, #26
 80029c6:	42b5      	cmp	r5, r6
 80029c8:	d11a      	bne.n	8002a00 <_printf_common+0xcc>
 80029ca:	2000      	movs	r0, #0
 80029cc:	e008      	b.n	80029e0 <_printf_common+0xac>
 80029ce:	2301      	movs	r3, #1
 80029d0:	4652      	mov	r2, sl
 80029d2:	4649      	mov	r1, r9
 80029d4:	4638      	mov	r0, r7
 80029d6:	47c0      	blx	r8
 80029d8:	3001      	adds	r0, #1
 80029da:	d103      	bne.n	80029e4 <_printf_common+0xb0>
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e4:	3501      	adds	r5, #1
 80029e6:	e7c4      	b.n	8002972 <_printf_common+0x3e>
 80029e8:	2030      	movs	r0, #48	; 0x30
 80029ea:	18e1      	adds	r1, r4, r3
 80029ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029f6:	4422      	add	r2, r4
 80029f8:	3302      	adds	r3, #2
 80029fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029fe:	e7c5      	b.n	800298c <_printf_common+0x58>
 8002a00:	2301      	movs	r3, #1
 8002a02:	4622      	mov	r2, r4
 8002a04:	4649      	mov	r1, r9
 8002a06:	4638      	mov	r0, r7
 8002a08:	47c0      	blx	r8
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	d0e6      	beq.n	80029dc <_printf_common+0xa8>
 8002a0e:	3601      	adds	r6, #1
 8002a10:	e7d9      	b.n	80029c6 <_printf_common+0x92>
	...

08002a14 <_printf_i>:
 8002a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a18:	460c      	mov	r4, r1
 8002a1a:	7e27      	ldrb	r7, [r4, #24]
 8002a1c:	4691      	mov	r9, r2
 8002a1e:	2f78      	cmp	r7, #120	; 0x78
 8002a20:	4680      	mov	r8, r0
 8002a22:	469a      	mov	sl, r3
 8002a24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002a26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a2a:	d807      	bhi.n	8002a3c <_printf_i+0x28>
 8002a2c:	2f62      	cmp	r7, #98	; 0x62
 8002a2e:	d80a      	bhi.n	8002a46 <_printf_i+0x32>
 8002a30:	2f00      	cmp	r7, #0
 8002a32:	f000 80d9 	beq.w	8002be8 <_printf_i+0x1d4>
 8002a36:	2f58      	cmp	r7, #88	; 0x58
 8002a38:	f000 80a4 	beq.w	8002b84 <_printf_i+0x170>
 8002a3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a44:	e03a      	b.n	8002abc <_printf_i+0xa8>
 8002a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a4a:	2b15      	cmp	r3, #21
 8002a4c:	d8f6      	bhi.n	8002a3c <_printf_i+0x28>
 8002a4e:	a001      	add	r0, pc, #4	; (adr r0, 8002a54 <_printf_i+0x40>)
 8002a50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002a54:	08002aad 	.word	0x08002aad
 8002a58:	08002ac1 	.word	0x08002ac1
 8002a5c:	08002a3d 	.word	0x08002a3d
 8002a60:	08002a3d 	.word	0x08002a3d
 8002a64:	08002a3d 	.word	0x08002a3d
 8002a68:	08002a3d 	.word	0x08002a3d
 8002a6c:	08002ac1 	.word	0x08002ac1
 8002a70:	08002a3d 	.word	0x08002a3d
 8002a74:	08002a3d 	.word	0x08002a3d
 8002a78:	08002a3d 	.word	0x08002a3d
 8002a7c:	08002a3d 	.word	0x08002a3d
 8002a80:	08002bcf 	.word	0x08002bcf
 8002a84:	08002af1 	.word	0x08002af1
 8002a88:	08002bb1 	.word	0x08002bb1
 8002a8c:	08002a3d 	.word	0x08002a3d
 8002a90:	08002a3d 	.word	0x08002a3d
 8002a94:	08002bf1 	.word	0x08002bf1
 8002a98:	08002a3d 	.word	0x08002a3d
 8002a9c:	08002af1 	.word	0x08002af1
 8002aa0:	08002a3d 	.word	0x08002a3d
 8002aa4:	08002a3d 	.word	0x08002a3d
 8002aa8:	08002bb9 	.word	0x08002bb9
 8002aac:	680b      	ldr	r3, [r1, #0]
 8002aae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ab2:	1d1a      	adds	r2, r3, #4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	600a      	str	r2, [r1, #0]
 8002ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0a4      	b.n	8002c0a <_printf_i+0x1f6>
 8002ac0:	6825      	ldr	r5, [r4, #0]
 8002ac2:	6808      	ldr	r0, [r1, #0]
 8002ac4:	062e      	lsls	r6, r5, #24
 8002ac6:	f100 0304 	add.w	r3, r0, #4
 8002aca:	d50a      	bpl.n	8002ae2 <_printf_i+0xce>
 8002acc:	6805      	ldr	r5, [r0, #0]
 8002ace:	600b      	str	r3, [r1, #0]
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	da03      	bge.n	8002adc <_printf_i+0xc8>
 8002ad4:	232d      	movs	r3, #45	; 0x2d
 8002ad6:	426d      	negs	r5, r5
 8002ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002adc:	230a      	movs	r3, #10
 8002ade:	485e      	ldr	r0, [pc, #376]	; (8002c58 <_printf_i+0x244>)
 8002ae0:	e019      	b.n	8002b16 <_printf_i+0x102>
 8002ae2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002ae6:	6805      	ldr	r5, [r0, #0]
 8002ae8:	600b      	str	r3, [r1, #0]
 8002aea:	bf18      	it	ne
 8002aec:	b22d      	sxthne	r5, r5
 8002aee:	e7ef      	b.n	8002ad0 <_printf_i+0xbc>
 8002af0:	680b      	ldr	r3, [r1, #0]
 8002af2:	6825      	ldr	r5, [r4, #0]
 8002af4:	1d18      	adds	r0, r3, #4
 8002af6:	6008      	str	r0, [r1, #0]
 8002af8:	0628      	lsls	r0, r5, #24
 8002afa:	d501      	bpl.n	8002b00 <_printf_i+0xec>
 8002afc:	681d      	ldr	r5, [r3, #0]
 8002afe:	e002      	b.n	8002b06 <_printf_i+0xf2>
 8002b00:	0669      	lsls	r1, r5, #25
 8002b02:	d5fb      	bpl.n	8002afc <_printf_i+0xe8>
 8002b04:	881d      	ldrh	r5, [r3, #0]
 8002b06:	2f6f      	cmp	r7, #111	; 0x6f
 8002b08:	bf0c      	ite	eq
 8002b0a:	2308      	moveq	r3, #8
 8002b0c:	230a      	movne	r3, #10
 8002b0e:	4852      	ldr	r0, [pc, #328]	; (8002c58 <_printf_i+0x244>)
 8002b10:	2100      	movs	r1, #0
 8002b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b16:	6866      	ldr	r6, [r4, #4]
 8002b18:	2e00      	cmp	r6, #0
 8002b1a:	bfa8      	it	ge
 8002b1c:	6821      	ldrge	r1, [r4, #0]
 8002b1e:	60a6      	str	r6, [r4, #8]
 8002b20:	bfa4      	itt	ge
 8002b22:	f021 0104 	bicge.w	r1, r1, #4
 8002b26:	6021      	strge	r1, [r4, #0]
 8002b28:	b90d      	cbnz	r5, 8002b2e <_printf_i+0x11a>
 8002b2a:	2e00      	cmp	r6, #0
 8002b2c:	d04d      	beq.n	8002bca <_printf_i+0x1b6>
 8002b2e:	4616      	mov	r6, r2
 8002b30:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b34:	fb03 5711 	mls	r7, r3, r1, r5
 8002b38:	5dc7      	ldrb	r7, [r0, r7]
 8002b3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b3e:	462f      	mov	r7, r5
 8002b40:	42bb      	cmp	r3, r7
 8002b42:	460d      	mov	r5, r1
 8002b44:	d9f4      	bls.n	8002b30 <_printf_i+0x11c>
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d10b      	bne.n	8002b62 <_printf_i+0x14e>
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	07df      	lsls	r7, r3, #31
 8002b4e:	d508      	bpl.n	8002b62 <_printf_i+0x14e>
 8002b50:	6923      	ldr	r3, [r4, #16]
 8002b52:	6861      	ldr	r1, [r4, #4]
 8002b54:	4299      	cmp	r1, r3
 8002b56:	bfde      	ittt	le
 8002b58:	2330      	movle	r3, #48	; 0x30
 8002b5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002b62:	1b92      	subs	r2, r2, r6
 8002b64:	6122      	str	r2, [r4, #16]
 8002b66:	464b      	mov	r3, r9
 8002b68:	4621      	mov	r1, r4
 8002b6a:	4640      	mov	r0, r8
 8002b6c:	f8cd a000 	str.w	sl, [sp]
 8002b70:	aa03      	add	r2, sp, #12
 8002b72:	f7ff fedf 	bl	8002934 <_printf_common>
 8002b76:	3001      	adds	r0, #1
 8002b78:	d14c      	bne.n	8002c14 <_printf_i+0x200>
 8002b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7e:	b004      	add	sp, #16
 8002b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b84:	4834      	ldr	r0, [pc, #208]	; (8002c58 <_printf_i+0x244>)
 8002b86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b8a:	680e      	ldr	r6, [r1, #0]
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002b92:	061f      	lsls	r7, r3, #24
 8002b94:	600e      	str	r6, [r1, #0]
 8002b96:	d514      	bpl.n	8002bc2 <_printf_i+0x1ae>
 8002b98:	07d9      	lsls	r1, r3, #31
 8002b9a:	bf44      	itt	mi
 8002b9c:	f043 0320 	orrmi.w	r3, r3, #32
 8002ba0:	6023      	strmi	r3, [r4, #0]
 8002ba2:	b91d      	cbnz	r5, 8002bac <_printf_i+0x198>
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	f023 0320 	bic.w	r3, r3, #32
 8002baa:	6023      	str	r3, [r4, #0]
 8002bac:	2310      	movs	r3, #16
 8002bae:	e7af      	b.n	8002b10 <_printf_i+0xfc>
 8002bb0:	6823      	ldr	r3, [r4, #0]
 8002bb2:	f043 0320 	orr.w	r3, r3, #32
 8002bb6:	6023      	str	r3, [r4, #0]
 8002bb8:	2378      	movs	r3, #120	; 0x78
 8002bba:	4828      	ldr	r0, [pc, #160]	; (8002c5c <_printf_i+0x248>)
 8002bbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bc0:	e7e3      	b.n	8002b8a <_printf_i+0x176>
 8002bc2:	065e      	lsls	r6, r3, #25
 8002bc4:	bf48      	it	mi
 8002bc6:	b2ad      	uxthmi	r5, r5
 8002bc8:	e7e6      	b.n	8002b98 <_printf_i+0x184>
 8002bca:	4616      	mov	r6, r2
 8002bcc:	e7bb      	b.n	8002b46 <_printf_i+0x132>
 8002bce:	680b      	ldr	r3, [r1, #0]
 8002bd0:	6826      	ldr	r6, [r4, #0]
 8002bd2:	1d1d      	adds	r5, r3, #4
 8002bd4:	6960      	ldr	r0, [r4, #20]
 8002bd6:	600d      	str	r5, [r1, #0]
 8002bd8:	0635      	lsls	r5, r6, #24
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	d501      	bpl.n	8002be2 <_printf_i+0x1ce>
 8002bde:	6018      	str	r0, [r3, #0]
 8002be0:	e002      	b.n	8002be8 <_printf_i+0x1d4>
 8002be2:	0671      	lsls	r1, r6, #25
 8002be4:	d5fb      	bpl.n	8002bde <_printf_i+0x1ca>
 8002be6:	8018      	strh	r0, [r3, #0]
 8002be8:	2300      	movs	r3, #0
 8002bea:	4616      	mov	r6, r2
 8002bec:	6123      	str	r3, [r4, #16]
 8002bee:	e7ba      	b.n	8002b66 <_printf_i+0x152>
 8002bf0:	680b      	ldr	r3, [r1, #0]
 8002bf2:	1d1a      	adds	r2, r3, #4
 8002bf4:	600a      	str	r2, [r1, #0]
 8002bf6:	681e      	ldr	r6, [r3, #0]
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	6862      	ldr	r2, [r4, #4]
 8002bfe:	f000 f82f 	bl	8002c60 <memchr>
 8002c02:	b108      	cbz	r0, 8002c08 <_printf_i+0x1f4>
 8002c04:	1b80      	subs	r0, r0, r6
 8002c06:	6060      	str	r0, [r4, #4]
 8002c08:	6863      	ldr	r3, [r4, #4]
 8002c0a:	6123      	str	r3, [r4, #16]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c12:	e7a8      	b.n	8002b66 <_printf_i+0x152>
 8002c14:	4632      	mov	r2, r6
 8002c16:	4649      	mov	r1, r9
 8002c18:	4640      	mov	r0, r8
 8002c1a:	6923      	ldr	r3, [r4, #16]
 8002c1c:	47d0      	blx	sl
 8002c1e:	3001      	adds	r0, #1
 8002c20:	d0ab      	beq.n	8002b7a <_printf_i+0x166>
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	079b      	lsls	r3, r3, #30
 8002c26:	d413      	bmi.n	8002c50 <_printf_i+0x23c>
 8002c28:	68e0      	ldr	r0, [r4, #12]
 8002c2a:	9b03      	ldr	r3, [sp, #12]
 8002c2c:	4298      	cmp	r0, r3
 8002c2e:	bfb8      	it	lt
 8002c30:	4618      	movlt	r0, r3
 8002c32:	e7a4      	b.n	8002b7e <_printf_i+0x16a>
 8002c34:	2301      	movs	r3, #1
 8002c36:	4632      	mov	r2, r6
 8002c38:	4649      	mov	r1, r9
 8002c3a:	4640      	mov	r0, r8
 8002c3c:	47d0      	blx	sl
 8002c3e:	3001      	adds	r0, #1
 8002c40:	d09b      	beq.n	8002b7a <_printf_i+0x166>
 8002c42:	3501      	adds	r5, #1
 8002c44:	68e3      	ldr	r3, [r4, #12]
 8002c46:	9903      	ldr	r1, [sp, #12]
 8002c48:	1a5b      	subs	r3, r3, r1
 8002c4a:	42ab      	cmp	r3, r5
 8002c4c:	dcf2      	bgt.n	8002c34 <_printf_i+0x220>
 8002c4e:	e7eb      	b.n	8002c28 <_printf_i+0x214>
 8002c50:	2500      	movs	r5, #0
 8002c52:	f104 0619 	add.w	r6, r4, #25
 8002c56:	e7f5      	b.n	8002c44 <_printf_i+0x230>
 8002c58:	080030a6 	.word	0x080030a6
 8002c5c:	080030b7 	.word	0x080030b7

08002c60 <memchr>:
 8002c60:	4603      	mov	r3, r0
 8002c62:	b510      	push	{r4, lr}
 8002c64:	b2c9      	uxtb	r1, r1
 8002c66:	4402      	add	r2, r0
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	d101      	bne.n	8002c72 <memchr+0x12>
 8002c6e:	2000      	movs	r0, #0
 8002c70:	e003      	b.n	8002c7a <memchr+0x1a>
 8002c72:	7804      	ldrb	r4, [r0, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	428c      	cmp	r4, r1
 8002c78:	d1f6      	bne.n	8002c68 <memchr+0x8>
 8002c7a:	bd10      	pop	{r4, pc}

08002c7c <memmove>:
 8002c7c:	4288      	cmp	r0, r1
 8002c7e:	b510      	push	{r4, lr}
 8002c80:	eb01 0402 	add.w	r4, r1, r2
 8002c84:	d902      	bls.n	8002c8c <memmove+0x10>
 8002c86:	4284      	cmp	r4, r0
 8002c88:	4623      	mov	r3, r4
 8002c8a:	d807      	bhi.n	8002c9c <memmove+0x20>
 8002c8c:	1e43      	subs	r3, r0, #1
 8002c8e:	42a1      	cmp	r1, r4
 8002c90:	d008      	beq.n	8002ca4 <memmove+0x28>
 8002c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c9a:	e7f8      	b.n	8002c8e <memmove+0x12>
 8002c9c:	4601      	mov	r1, r0
 8002c9e:	4402      	add	r2, r0
 8002ca0:	428a      	cmp	r2, r1
 8002ca2:	d100      	bne.n	8002ca6 <memmove+0x2a>
 8002ca4:	bd10      	pop	{r4, pc}
 8002ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002cae:	e7f7      	b.n	8002ca0 <memmove+0x24>

08002cb0 <_free_r>:
 8002cb0:	b538      	push	{r3, r4, r5, lr}
 8002cb2:	4605      	mov	r5, r0
 8002cb4:	2900      	cmp	r1, #0
 8002cb6:	d043      	beq.n	8002d40 <_free_r+0x90>
 8002cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cbc:	1f0c      	subs	r4, r1, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bfb8      	it	lt
 8002cc2:	18e4      	addlt	r4, r4, r3
 8002cc4:	f000 f8d0 	bl	8002e68 <__malloc_lock>
 8002cc8:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <_free_r+0x94>)
 8002cca:	6813      	ldr	r3, [r2, #0]
 8002ccc:	4610      	mov	r0, r2
 8002cce:	b933      	cbnz	r3, 8002cde <_free_r+0x2e>
 8002cd0:	6063      	str	r3, [r4, #4]
 8002cd2:	6014      	str	r4, [r2, #0]
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cda:	f000 b8cb 	b.w	8002e74 <__malloc_unlock>
 8002cde:	42a3      	cmp	r3, r4
 8002ce0:	d90a      	bls.n	8002cf8 <_free_r+0x48>
 8002ce2:	6821      	ldr	r1, [r4, #0]
 8002ce4:	1862      	adds	r2, r4, r1
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	bf01      	itttt	eq
 8002cea:	681a      	ldreq	r2, [r3, #0]
 8002cec:	685b      	ldreq	r3, [r3, #4]
 8002cee:	1852      	addeq	r2, r2, r1
 8002cf0:	6022      	streq	r2, [r4, #0]
 8002cf2:	6063      	str	r3, [r4, #4]
 8002cf4:	6004      	str	r4, [r0, #0]
 8002cf6:	e7ed      	b.n	8002cd4 <_free_r+0x24>
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	b10b      	cbz	r3, 8002d02 <_free_r+0x52>
 8002cfe:	42a3      	cmp	r3, r4
 8002d00:	d9fa      	bls.n	8002cf8 <_free_r+0x48>
 8002d02:	6811      	ldr	r1, [r2, #0]
 8002d04:	1850      	adds	r0, r2, r1
 8002d06:	42a0      	cmp	r0, r4
 8002d08:	d10b      	bne.n	8002d22 <_free_r+0x72>
 8002d0a:	6820      	ldr	r0, [r4, #0]
 8002d0c:	4401      	add	r1, r0
 8002d0e:	1850      	adds	r0, r2, r1
 8002d10:	4283      	cmp	r3, r0
 8002d12:	6011      	str	r1, [r2, #0]
 8002d14:	d1de      	bne.n	8002cd4 <_free_r+0x24>
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4401      	add	r1, r0
 8002d1c:	6011      	str	r1, [r2, #0]
 8002d1e:	6053      	str	r3, [r2, #4]
 8002d20:	e7d8      	b.n	8002cd4 <_free_r+0x24>
 8002d22:	d902      	bls.n	8002d2a <_free_r+0x7a>
 8002d24:	230c      	movs	r3, #12
 8002d26:	602b      	str	r3, [r5, #0]
 8002d28:	e7d4      	b.n	8002cd4 <_free_r+0x24>
 8002d2a:	6820      	ldr	r0, [r4, #0]
 8002d2c:	1821      	adds	r1, r4, r0
 8002d2e:	428b      	cmp	r3, r1
 8002d30:	bf01      	itttt	eq
 8002d32:	6819      	ldreq	r1, [r3, #0]
 8002d34:	685b      	ldreq	r3, [r3, #4]
 8002d36:	1809      	addeq	r1, r1, r0
 8002d38:	6021      	streq	r1, [r4, #0]
 8002d3a:	6063      	str	r3, [r4, #4]
 8002d3c:	6054      	str	r4, [r2, #4]
 8002d3e:	e7c9      	b.n	8002cd4 <_free_r+0x24>
 8002d40:	bd38      	pop	{r3, r4, r5, pc}
 8002d42:	bf00      	nop
 8002d44:	200000a4 	.word	0x200000a4

08002d48 <_malloc_r>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	1ccd      	adds	r5, r1, #3
 8002d4c:	f025 0503 	bic.w	r5, r5, #3
 8002d50:	3508      	adds	r5, #8
 8002d52:	2d0c      	cmp	r5, #12
 8002d54:	bf38      	it	cc
 8002d56:	250c      	movcc	r5, #12
 8002d58:	2d00      	cmp	r5, #0
 8002d5a:	4606      	mov	r6, r0
 8002d5c:	db01      	blt.n	8002d62 <_malloc_r+0x1a>
 8002d5e:	42a9      	cmp	r1, r5
 8002d60:	d903      	bls.n	8002d6a <_malloc_r+0x22>
 8002d62:	230c      	movs	r3, #12
 8002d64:	6033      	str	r3, [r6, #0]
 8002d66:	2000      	movs	r0, #0
 8002d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d6a:	f000 f87d 	bl	8002e68 <__malloc_lock>
 8002d6e:	4921      	ldr	r1, [pc, #132]	; (8002df4 <_malloc_r+0xac>)
 8002d70:	680a      	ldr	r2, [r1, #0]
 8002d72:	4614      	mov	r4, r2
 8002d74:	b99c      	cbnz	r4, 8002d9e <_malloc_r+0x56>
 8002d76:	4f20      	ldr	r7, [pc, #128]	; (8002df8 <_malloc_r+0xb0>)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b923      	cbnz	r3, 8002d86 <_malloc_r+0x3e>
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	4630      	mov	r0, r6
 8002d80:	f000 f862 	bl	8002e48 <_sbrk_r>
 8002d84:	6038      	str	r0, [r7, #0]
 8002d86:	4629      	mov	r1, r5
 8002d88:	4630      	mov	r0, r6
 8002d8a:	f000 f85d 	bl	8002e48 <_sbrk_r>
 8002d8e:	1c43      	adds	r3, r0, #1
 8002d90:	d123      	bne.n	8002dda <_malloc_r+0x92>
 8002d92:	230c      	movs	r3, #12
 8002d94:	4630      	mov	r0, r6
 8002d96:	6033      	str	r3, [r6, #0]
 8002d98:	f000 f86c 	bl	8002e74 <__malloc_unlock>
 8002d9c:	e7e3      	b.n	8002d66 <_malloc_r+0x1e>
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	1b5b      	subs	r3, r3, r5
 8002da2:	d417      	bmi.n	8002dd4 <_malloc_r+0x8c>
 8002da4:	2b0b      	cmp	r3, #11
 8002da6:	d903      	bls.n	8002db0 <_malloc_r+0x68>
 8002da8:	6023      	str	r3, [r4, #0]
 8002daa:	441c      	add	r4, r3
 8002dac:	6025      	str	r5, [r4, #0]
 8002dae:	e004      	b.n	8002dba <_malloc_r+0x72>
 8002db0:	6863      	ldr	r3, [r4, #4]
 8002db2:	42a2      	cmp	r2, r4
 8002db4:	bf0c      	ite	eq
 8002db6:	600b      	streq	r3, [r1, #0]
 8002db8:	6053      	strne	r3, [r2, #4]
 8002dba:	4630      	mov	r0, r6
 8002dbc:	f000 f85a 	bl	8002e74 <__malloc_unlock>
 8002dc0:	f104 000b 	add.w	r0, r4, #11
 8002dc4:	1d23      	adds	r3, r4, #4
 8002dc6:	f020 0007 	bic.w	r0, r0, #7
 8002dca:	1ac2      	subs	r2, r0, r3
 8002dcc:	d0cc      	beq.n	8002d68 <_malloc_r+0x20>
 8002dce:	1a1b      	subs	r3, r3, r0
 8002dd0:	50a3      	str	r3, [r4, r2]
 8002dd2:	e7c9      	b.n	8002d68 <_malloc_r+0x20>
 8002dd4:	4622      	mov	r2, r4
 8002dd6:	6864      	ldr	r4, [r4, #4]
 8002dd8:	e7cc      	b.n	8002d74 <_malloc_r+0x2c>
 8002dda:	1cc4      	adds	r4, r0, #3
 8002ddc:	f024 0403 	bic.w	r4, r4, #3
 8002de0:	42a0      	cmp	r0, r4
 8002de2:	d0e3      	beq.n	8002dac <_malloc_r+0x64>
 8002de4:	1a21      	subs	r1, r4, r0
 8002de6:	4630      	mov	r0, r6
 8002de8:	f000 f82e 	bl	8002e48 <_sbrk_r>
 8002dec:	3001      	adds	r0, #1
 8002dee:	d1dd      	bne.n	8002dac <_malloc_r+0x64>
 8002df0:	e7cf      	b.n	8002d92 <_malloc_r+0x4a>
 8002df2:	bf00      	nop
 8002df4:	200000a4 	.word	0x200000a4
 8002df8:	200000a8 	.word	0x200000a8

08002dfc <_realloc_r>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	4607      	mov	r7, r0
 8002e00:	4614      	mov	r4, r2
 8002e02:	460e      	mov	r6, r1
 8002e04:	b921      	cbnz	r1, 8002e10 <_realloc_r+0x14>
 8002e06:	4611      	mov	r1, r2
 8002e08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e0c:	f7ff bf9c 	b.w	8002d48 <_malloc_r>
 8002e10:	b922      	cbnz	r2, 8002e1c <_realloc_r+0x20>
 8002e12:	f7ff ff4d 	bl	8002cb0 <_free_r>
 8002e16:	4625      	mov	r5, r4
 8002e18:	4628      	mov	r0, r5
 8002e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e1c:	f000 f830 	bl	8002e80 <_malloc_usable_size_r>
 8002e20:	42a0      	cmp	r0, r4
 8002e22:	d20f      	bcs.n	8002e44 <_realloc_r+0x48>
 8002e24:	4621      	mov	r1, r4
 8002e26:	4638      	mov	r0, r7
 8002e28:	f7ff ff8e 	bl	8002d48 <_malloc_r>
 8002e2c:	4605      	mov	r5, r0
 8002e2e:	2800      	cmp	r0, #0
 8002e30:	d0f2      	beq.n	8002e18 <_realloc_r+0x1c>
 8002e32:	4631      	mov	r1, r6
 8002e34:	4622      	mov	r2, r4
 8002e36:	f7ff fb49 	bl	80024cc <memcpy>
 8002e3a:	4631      	mov	r1, r6
 8002e3c:	4638      	mov	r0, r7
 8002e3e:	f7ff ff37 	bl	8002cb0 <_free_r>
 8002e42:	e7e9      	b.n	8002e18 <_realloc_r+0x1c>
 8002e44:	4635      	mov	r5, r6
 8002e46:	e7e7      	b.n	8002e18 <_realloc_r+0x1c>

08002e48 <_sbrk_r>:
 8002e48:	b538      	push	{r3, r4, r5, lr}
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	4d05      	ldr	r5, [pc, #20]	; (8002e64 <_sbrk_r+0x1c>)
 8002e4e:	4604      	mov	r4, r0
 8002e50:	4608      	mov	r0, r1
 8002e52:	602b      	str	r3, [r5, #0]
 8002e54:	f7fd fe1a 	bl	8000a8c <_sbrk>
 8002e58:	1c43      	adds	r3, r0, #1
 8002e5a:	d102      	bne.n	8002e62 <_sbrk_r+0x1a>
 8002e5c:	682b      	ldr	r3, [r5, #0]
 8002e5e:	b103      	cbz	r3, 8002e62 <_sbrk_r+0x1a>
 8002e60:	6023      	str	r3, [r4, #0]
 8002e62:	bd38      	pop	{r3, r4, r5, pc}
 8002e64:	20000af8 	.word	0x20000af8

08002e68 <__malloc_lock>:
 8002e68:	4801      	ldr	r0, [pc, #4]	; (8002e70 <__malloc_lock+0x8>)
 8002e6a:	f000 b811 	b.w	8002e90 <__retarget_lock_acquire_recursive>
 8002e6e:	bf00      	nop
 8002e70:	20000b00 	.word	0x20000b00

08002e74 <__malloc_unlock>:
 8002e74:	4801      	ldr	r0, [pc, #4]	; (8002e7c <__malloc_unlock+0x8>)
 8002e76:	f000 b80c 	b.w	8002e92 <__retarget_lock_release_recursive>
 8002e7a:	bf00      	nop
 8002e7c:	20000b00 	.word	0x20000b00

08002e80 <_malloc_usable_size_r>:
 8002e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e84:	1f18      	subs	r0, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bfbc      	itt	lt
 8002e8a:	580b      	ldrlt	r3, [r1, r0]
 8002e8c:	18c0      	addlt	r0, r0, r3
 8002e8e:	4770      	bx	lr

08002e90 <__retarget_lock_acquire_recursive>:
 8002e90:	4770      	bx	lr

08002e92 <__retarget_lock_release_recursive>:
 8002e92:	4770      	bx	lr

08002e94 <_init>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	bf00      	nop
 8002e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9a:	bc08      	pop	{r3}
 8002e9c:	469e      	mov	lr, r3
 8002e9e:	4770      	bx	lr

08002ea0 <_fini>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	bf00      	nop
 8002ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea6:	bc08      	pop	{r3}
 8002ea8:	469e      	mov	lr, r3
 8002eaa:	4770      	bx	lr
