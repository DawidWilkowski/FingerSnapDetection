
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003860  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c5c  08003c5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003c5c  08003c5c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c5c  08003c5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000074  08003cd8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08003cd8  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085e1  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2c  00000000  00000000  0002867e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0002a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  0002a818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c0c  00000000  00000000  0002aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007dfb  00000000  00000000  00042af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d14  00000000  00000000  0004a8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce603  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b4  00000000  00000000  000ce658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003954 	.word	0x08003954

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003954 	.word	0x08003954

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <send>:
__IO char temp; // uzyta przy transmit


// ====================== USART SEND ======================

void send(char* format, ...) {
 8000170:	b40f      	push	{r0, r1, r2, r3}
 8000172:	b580      	push	{r7, lr}
 8000174:	b0c4      	sub	sp, #272	; 0x110
 8000176:	af00      	add	r7, sp, #0

    char tmp_s[256];
    va_list arglist;
    va_start(arglist,format);
 8000178:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800017c:	1d3b      	adds	r3, r7, #4
 800017e:	601a      	str	r2, [r3, #0]
    vsprintf(tmp_s,format,arglist);
 8000180:	1d3b      	adds	r3, r7, #4
 8000182:	f107 0008 	add.w	r0, r7, #8
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800018c:	f002 fa5a 	bl	8002644 <vsiprintf>
    va_end(arglist);

    uint8_t idx = EmptyTx;
 8000190:	4b34      	ldr	r3, [pc, #208]	; (8000264 <send+0xf4>)
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	b29b      	uxth	r3, r3
 8000196:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    for(int i = 0; i < strlen(tmp_s); i++) {
 800019a:	2300      	movs	r3, #0
 800019c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80001a0:	e013      	b.n	80001ca <send+0x5a>
        BUFF_TX[idx] = tmp_s[i];
 80001a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80001a6:	f107 0108 	add.w	r1, r7, #8
 80001aa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80001ae:	440a      	add	r2, r1
 80001b0:	7811      	ldrb	r1, [r2, #0]
 80001b2:	4a2d      	ldr	r2, [pc, #180]	; (8000268 <send+0xf8>)
 80001b4:	54d1      	strb	r1, [r2, r3]
        idx++;
 80001b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80001ba:	3301      	adds	r3, #1
 80001bc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    for(int i = 0; i < strlen(tmp_s); i++) {
 80001c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80001c4:	3301      	adds	r3, #1
 80001c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80001ca:	f107 0308 	add.w	r3, r7, #8
 80001ce:	4618      	mov	r0, r3
 80001d0:	f7ff ffc6 	bl	8000160 <strlen>
 80001d4:	4602      	mov	r2, r0
 80001d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80001da:	429a      	cmp	r2, r3
 80001dc:	d8e1      	bhi.n	80001a2 <send+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001de:	b672      	cpsid	i
}
 80001e0:	bf00      	nop
        if(idx>=BUFF_SIZE)
            idx=0;
    }
    __disable_irq();
    if(BusyTx == EmptyTx && __HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET) {
 80001e2:	4b22      	ldr	r3, [pc, #136]	; (800026c <send+0xfc>)
 80001e4:	881b      	ldrh	r3, [r3, #0]
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <send+0xf4>)
 80001ea:	881b      	ldrh	r3, [r3, #0]
 80001ec:	b29b      	uxth	r3, r3
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d129      	bne.n	8000246 <send+0xd6>
 80001f2:	4b1f      	ldr	r3, [pc, #124]	; (8000270 <send+0x100>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80001fc:	2b80      	cmp	r3, #128	; 0x80
 80001fe:	d122      	bne.n	8000246 <send+0xd6>
        EmptyTx=idx;
 8000200:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000204:	b29a      	uxth	r2, r3
 8000206:	4b17      	ldr	r3, [pc, #92]	; (8000264 <send+0xf4>)
 8000208:	801a      	strh	r2, [r3, #0]
        temp = BUFF_TX[BusyTx];
 800020a:	4b18      	ldr	r3, [pc, #96]	; (800026c <send+0xfc>)
 800020c:	881b      	ldrh	r3, [r3, #0]
 800020e:	b29b      	uxth	r3, r3
 8000210:	461a      	mov	r2, r3
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <send+0xf8>)
 8000214:	5c9b      	ldrb	r3, [r3, r2]
 8000216:	b2da      	uxtb	r2, r3
 8000218:	4b16      	ldr	r3, [pc, #88]	; (8000274 <send+0x104>)
 800021a:	701a      	strb	r2, [r3, #0]
        BusyTx++;
 800021c:	4b13      	ldr	r3, [pc, #76]	; (800026c <send+0xfc>)
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	b29b      	uxth	r3, r3
 8000222:	3301      	adds	r3, #1
 8000224:	b29a      	uxth	r2, r3
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <send+0xfc>)
 8000228:	801a      	strh	r2, [r3, #0]
        if(BusyTx>=BUFF_SIZE)
 800022a:	4b10      	ldr	r3, [pc, #64]	; (800026c <send+0xfc>)
 800022c:	881b      	ldrh	r3, [r3, #0]
 800022e:	b29b      	uxth	r3, r3
 8000230:	2bff      	cmp	r3, #255	; 0xff
 8000232:	d902      	bls.n	800023a <send+0xca>
            BusyTx=0;
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <send+0xfc>)
 8000236:	2200      	movs	r2, #0
 8000238:	801a      	strh	r2, [r3, #0]
        HAL_UART_Transmit_IT(&huart2,&temp,1);
 800023a:	2201      	movs	r2, #1
 800023c:	490d      	ldr	r1, [pc, #52]	; (8000274 <send+0x104>)
 800023e:	480c      	ldr	r0, [pc, #48]	; (8000270 <send+0x100>)
 8000240:	f001 fc7d 	bl	8001b3e <HAL_UART_Transmit_IT>
 8000244:	e004      	b.n	8000250 <send+0xe0>
    }
    else {
        EmptyTx=idx;
 8000246:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800024a:	b29a      	uxth	r2, r3
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <send+0xf4>)
 800024e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000250:	b662      	cpsie	i
}
 8000252:	bf00      	nop
    }
    __enable_irq();
}
 8000254:	bf00      	nop
 8000256:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800025a:	46bd      	mov	sp, r7
 800025c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr
 8000264:	20000094 	.word	0x20000094
 8000268:	200002f0 	.word	0x200002f0
 800026c:	20000096 	.word	0x20000096
 8000270:	200002ac 	.word	0x200002ac
 8000274:	200002a8 	.word	0x200002a8

08000278 <lookForFrame>:



void lookForFrame(){
 8000278:	b580      	push	{r7, lr}
 800027a:	b0c4      	sub	sp, #272	; 0x110
 800027c:	af00      	add	r7, sp, #0
	char zapis[256];
	uint8_t i = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t start=0;
 8000284:	2300      	movs	r3, #0
 8000286:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t len;
	while(BusyRx != EmptyRx){ //póki są znaki w buforze odbiorczym to przepisuje je do zapisu
 800028a:	e029      	b.n	80002e0 <lookForFrame+0x68>
		zapis[i++] = BUFF_RX[BusyRx++];
 800028c:	4b42      	ldr	r3, [pc, #264]	; (8000398 <lookForFrame+0x120>)
 800028e:	881b      	ldrh	r3, [r3, #0]
 8000290:	b29b      	uxth	r3, r3
 8000292:	1c5a      	adds	r2, r3, #1
 8000294:	b291      	uxth	r1, r2
 8000296:	4a40      	ldr	r2, [pc, #256]	; (8000398 <lookForFrame+0x120>)
 8000298:	8011      	strh	r1, [r2, #0]
 800029a:	4619      	mov	r1, r3
 800029c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80002a0:	1c5a      	adds	r2, r3, #1
 80002a2:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 80002a6:	461a      	mov	r2, r3
 80002a8:	4b3c      	ldr	r3, [pc, #240]	; (800039c <lookForFrame+0x124>)
 80002aa:	5c5b      	ldrb	r3, [r3, r1]
 80002ac:	b2d9      	uxtb	r1, r3
 80002ae:	463b      	mov	r3, r7
 80002b0:	5499      	strb	r1, [r3, r2]
		if(BusyRx >= BUFF_SIZE){ // jak przekroczy to zeruje
 80002b2:	4b39      	ldr	r3, [pc, #228]	; (8000398 <lookForFrame+0x120>)
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	2bff      	cmp	r3, #255	; 0xff
 80002ba:	d911      	bls.n	80002e0 <lookForFrame+0x68>
			if(BusyRx == EmptyRx){
 80002bc:	4b36      	ldr	r3, [pc, #216]	; (8000398 <lookForFrame+0x120>)
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	4b37      	ldr	r3, [pc, #220]	; (80003a0 <lookForFrame+0x128>)
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d106      	bne.n	80002da <lookForFrame+0x62>
				BusyRx = 0;
 80002cc:	4b32      	ldr	r3, [pc, #200]	; (8000398 <lookForFrame+0x120>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	801a      	strh	r2, [r3, #0]
				EmptyRx = 0;
 80002d2:	4b33      	ldr	r3, [pc, #204]	; (80003a0 <lookForFrame+0x128>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	801a      	strh	r2, [r3, #0]
 80002d8:	e002      	b.n	80002e0 <lookForFrame+0x68>
			}
			else{
				BusyRx = 0;
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <lookForFrame+0x120>)
 80002dc:	2200      	movs	r2, #0
 80002de:	801a      	strh	r2, [r3, #0]
	while(BusyRx != EmptyRx){ //póki są znaki w buforze odbiorczym to przepisuje je do zapisu
 80002e0:	4b2d      	ldr	r3, [pc, #180]	; (8000398 <lookForFrame+0x120>)
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	4b2e      	ldr	r3, [pc, #184]	; (80003a0 <lookForFrame+0x128>)
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d1cd      	bne.n	800028c <lookForFrame+0x14>
			}
		}
	}
	len = i;
 80002f0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80002f4:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	i = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	for (int j = 0; j<=len; j++){//szukanie początku i końca ramki w odebranych znakach
 80002fe:	2300      	movs	r3, #0
 8000300:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000304:	e03c      	b.n	8000380 <lookForFrame+0x108>
		if (zapis[j] == '[')
 8000306:	463a      	mov	r2, r7
 8000308:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800030c:	4413      	add	r3, r2
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b5b      	cmp	r3, #91	; 0x5b
 8000312:	d103      	bne.n	800031c <lookForFrame+0xa4>
			start = j;
 8000314:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000318:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		if (zapis[j] == ']'){
 800031c:	463a      	mov	r2, r7
 800031e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000322:	4413      	add	r3, r2
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b5d      	cmp	r3, #93	; 0x5d
 8000328:	d125      	bne.n	8000376 <lookForFrame+0xfe>
			for (int k = start+1; k < j; k++)
 800032a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800032e:	3301      	adds	r3, #1
 8000330:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000334:	e011      	b.n	800035a <lookForFrame+0xe2>
				command[i++] = zapis[k]; //to co pomiędzy znakami kopiowane do command
 8000336:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8000340:	4619      	mov	r1, r3
 8000342:	463a      	mov	r2, r7
 8000344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000348:	4413      	add	r3, r2
 800034a:	781a      	ldrb	r2, [r3, #0]
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <lookForFrame+0x12c>)
 800034e:	545a      	strb	r2, [r3, r1]
			for (int k = start+1; k < j; k++)
 8000350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000354:	3301      	adds	r3, #1
 8000356:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800035a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800035e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000362:	429a      	cmp	r2, r3
 8000364:	dbe7      	blt.n	8000336 <lookForFrame+0xbe>
			executeCommand();
 8000366:	f000 f81f 	bl	80003a8 <executeCommand>
			i = 0; // zeruj iterator dla kolejnych wywolan
 800036a:	2300      	movs	r3, #0
 800036c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			start = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	for (int j = 0; j<=len; j++){//szukanie początku i końca ramki w odebranych znakach
 8000376:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800037a:	3301      	adds	r3, #1
 800037c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000380:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000384:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000388:	429a      	cmp	r2, r3
 800038a:	ddbc      	ble.n	8000306 <lookForFrame+0x8e>
		}
	}
}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000092 	.word	0x20000092
 800039c:	200000a8 	.word	0x200000a8
 80003a0:	20000090 	.word	0x20000090
 80003a4:	200001a8 	.word	0x200001a8

080003a8 <executeCommand>:


void executeCommand() {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
	if (strlen(command) < 62){ //ramka nie moze byc za duza
 80003ae:	4828      	ldr	r0, [pc, #160]	; (8000450 <executeCommand+0xa8>)
 80003b0:	f7ff fed6 	bl	8000160 <strlen>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b3d      	cmp	r3, #61	; 0x3d
 80003b8:	d836      	bhi.n	8000428 <executeCommand+0x80>
		uint16_t arg[10]; //tablica argumentow komendy

		char *token = strtok(command, ":"); //dzieli ramke na argumenty (strtok zwraca wskaznik na 1 token)
 80003ba:	4926      	ldr	r1, [pc, #152]	; (8000454 <executeCommand+0xac>)
 80003bc:	4824      	ldr	r0, [pc, #144]	; (8000450 <executeCommand+0xa8>)
 80003be:	f002 f83f 	bl	8002440 <strtok>
 80003c2:	61b8      	str	r0, [r7, #24]

			 if (strcmp(command, "Tryb") == 0){
 80003c4:	4924      	ldr	r1, [pc, #144]	; (8000458 <executeCommand+0xb0>)
 80003c6:	4822      	ldr	r0, [pc, #136]	; (8000450 <executeCommand+0xa8>)
 80003c8:	f7ff fec0 	bl	800014c <strcmp>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d112      	bne.n	80003f8 <executeCommand+0x50>

				token = strtok(NULL,":");
 80003d2:	4920      	ldr	r1, [pc, #128]	; (8000454 <executeCommand+0xac>)
 80003d4:	2000      	movs	r0, #0
 80003d6:	f002 f833 	bl	8002440 <strtok>
 80003da:	61b8      	str	r0, [r7, #24]
				arg[0] = atoi(token); //parametr trybu 1 - 1 pstryk, 2 - 2 pstryk
 80003dc:	69b8      	ldr	r0, [r7, #24]
 80003de:	f001 fff9 	bl	80023d4 <atoi>
 80003e2:	4603      	mov	r3, r0
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	80bb      	strh	r3, [r7, #4]

					send("[OdebranoRamke:1364]\r\n");
 80003e8:	481c      	ldr	r0, [pc, #112]	; (800045c <executeCommand+0xb4>)
 80003ea:	f7ff fec1 	bl	8000170 <send>
					trybPracy = arg[0];
 80003ee:	88bb      	ldrh	r3, [r7, #4]
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <executeCommand+0xb8>)
 80003f4:	701a      	strb	r2, [r3, #0]
 80003f6:	e017      	b.n	8000428 <executeCommand+0x80>

				}
			else if (strcmp(command, "PokazTryb") == 0){
 80003f8:	491a      	ldr	r1, [pc, #104]	; (8000464 <executeCommand+0xbc>)
 80003fa:	4815      	ldr	r0, [pc, #84]	; (8000450 <executeCommand+0xa8>)
 80003fc:	f7ff fea6 	bl	800014c <strcmp>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d110      	bne.n	8000428 <executeCommand+0x80>

					if (trybPracy == 1)
 8000406:	4b16      	ldr	r3, [pc, #88]	; (8000460 <executeCommand+0xb8>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	b2db      	uxtb	r3, r3
 800040c:	2b01      	cmp	r3, #1
 800040e:	d103      	bne.n	8000418 <executeCommand+0x70>
						send("[Tryb1PSTRYK:1017]\r\n");
 8000410:	4815      	ldr	r0, [pc, #84]	; (8000468 <executeCommand+0xc0>)
 8000412:	f7ff fead 	bl	8000170 <send>
 8000416:	e007      	b.n	8000428 <executeCommand+0x80>
					else if (trybPracy == 2)
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <executeCommand+0xb8>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	b2db      	uxtb	r3, r3
 800041e:	2b02      	cmp	r3, #2
 8000420:	d102      	bne.n	8000428 <executeCommand+0x80>
						send("[Tryb2PSTRYK:1018]\r\n");
 8000422:	4812      	ldr	r0, [pc, #72]	; (800046c <executeCommand+0xc4>)
 8000424:	f7ff fea4 	bl	8000170 <send>
				}
			}
	for (int i = 0 ; i < 62; i++){ //komenda zerowana dla przyszlych wywolan
 8000428:	2300      	movs	r3, #0
 800042a:	61fb      	str	r3, [r7, #28]
 800042c:	e007      	b.n	800043e <executeCommand+0x96>
		command[i] = 0;
 800042e:	4a08      	ldr	r2, [pc, #32]	; (8000450 <executeCommand+0xa8>)
 8000430:	69fb      	ldr	r3, [r7, #28]
 8000432:	4413      	add	r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < 62; i++){ //komenda zerowana dla przyszlych wywolan
 8000438:	69fb      	ldr	r3, [r7, #28]
 800043a:	3301      	adds	r3, #1
 800043c:	61fb      	str	r3, [r7, #28]
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	2b3d      	cmp	r3, #61	; 0x3d
 8000442:	ddf4      	ble.n	800042e <executeCommand+0x86>
	}
}
 8000444:	bf00      	nop
 8000446:	bf00      	nop
 8000448:	3720      	adds	r7, #32
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	200001a8 	.word	0x200001a8
 8000454:	0800396c 	.word	0x0800396c
 8000458:	08003970 	.word	0x08003970
 800045c:	08003978 	.word	0x08003978
 8000460:	20000000 	.word	0x20000000
 8000464:	08003990 	.word	0x08003990
 8000468:	0800399c 	.word	0x0800399c
 800046c:	080039b4 	.word	0x080039b4

08000470 <HAL_UART_TxCpltCallback>:

// ====================== USART CALLBACK NADAWANIE ======================

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
    if(huart==&huart2) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a16      	ldr	r2, [pc, #88]	; (80004d4 <HAL_UART_TxCpltCallback+0x64>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d124      	bne.n	80004ca <HAL_UART_TxCpltCallback+0x5a>
        if(BusyTx != EmptyTx) {
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <HAL_UART_TxCpltCallback+0x68>)
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	b29a      	uxth	r2, r3
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_UART_TxCpltCallback+0x6c>)
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	b29b      	uxth	r3, r3
 800048c:	429a      	cmp	r2, r3
 800048e:	d01c      	beq.n	80004ca <HAL_UART_TxCpltCallback+0x5a>
            temp = BUFF_TX[BusyTx];
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <HAL_UART_TxCpltCallback+0x68>)
 8000492:	881b      	ldrh	r3, [r3, #0]
 8000494:	b29b      	uxth	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <HAL_UART_TxCpltCallback+0x70>)
 800049a:	5c9b      	ldrb	r3, [r3, r2]
 800049c:	b2da      	uxtb	r2, r3
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <HAL_UART_TxCpltCallback+0x74>)
 80004a0:	701a      	strb	r2, [r3, #0]
            BusyTx++;
 80004a2:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <HAL_UART_TxCpltCallback+0x68>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	3301      	adds	r3, #1
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_UART_TxCpltCallback+0x68>)
 80004ae:	801a      	strh	r2, [r3, #0]
            if(BusyTx>=BUFF_SIZE)
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <HAL_UART_TxCpltCallback+0x68>)
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	2bff      	cmp	r3, #255	; 0xff
 80004b8:	d902      	bls.n	80004c0 <HAL_UART_TxCpltCallback+0x50>
                BusyTx=0;
 80004ba:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <HAL_UART_TxCpltCallback+0x68>)
 80004bc:	2200      	movs	r2, #0
 80004be:	801a      	strh	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2,&temp,1);
 80004c0:	2201      	movs	r2, #1
 80004c2:	4908      	ldr	r1, [pc, #32]	; (80004e4 <HAL_UART_TxCpltCallback+0x74>)
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <HAL_UART_TxCpltCallback+0x64>)
 80004c6:	f001 fb3a 	bl	8001b3e <HAL_UART_Transmit_IT>
        }
    }
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	200002ac 	.word	0x200002ac
 80004d8:	20000096 	.word	0x20000096
 80004dc:	20000094 	.word	0x20000094
 80004e0:	200002f0 	.word	0x200002f0
 80004e4:	200002a8 	.word	0x200002a8

080004e8 <HAL_UART_RxCpltCallback>:

// ====================== USART CALLBACK ODBIÓR ======================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    if(huart==&huart2) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a16      	ldr	r2, [pc, #88]	; (800054c <HAL_UART_RxCpltCallback+0x64>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d11a      	bne.n	800052e <HAL_UART_RxCpltCallback+0x46>
        if (BUFF_RX[EmptyRx] == ']'){
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_UART_RxCpltCallback+0x68>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <HAL_UART_RxCpltCallback+0x6c>)
 8000502:	5c9b      	ldrb	r3, [r3, r2]
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b5d      	cmp	r3, #93	; 0x5d
 8000508:	d102      	bne.n	8000510 <HAL_UART_RxCpltCallback+0x28>
        	frameReady = 1;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <HAL_UART_RxCpltCallback+0x70>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
        }
    	EmptyRx++;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_UART_RxCpltCallback+0x68>)
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	b29b      	uxth	r3, r3
 8000516:	3301      	adds	r3, #1
 8000518:	b29a      	uxth	r2, r3
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <HAL_UART_RxCpltCallback+0x68>)
 800051c:	801a      	strh	r2, [r3, #0]
        if(EmptyRx>=BUFF_SIZE)
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <HAL_UART_RxCpltCallback+0x68>)
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	b29b      	uxth	r3, r3
 8000524:	2bff      	cmp	r3, #255	; 0xff
 8000526:	d902      	bls.n	800052e <HAL_UART_RxCpltCallback+0x46>
            EmptyRx = 0;
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <HAL_UART_RxCpltCallback+0x68>)
 800052a:	2200      	movs	r2, #0
 800052c:	801a      	strh	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart2,&BUFF_RX[EmptyRx],1);
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_UART_RxCpltCallback+0x68>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	b29b      	uxth	r3, r3
 8000534:	461a      	mov	r2, r3
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <HAL_UART_RxCpltCallback+0x6c>)
 8000538:	4413      	add	r3, r2
 800053a:	2201      	movs	r2, #1
 800053c:	4619      	mov	r1, r3
 800053e:	4803      	ldr	r0, [pc, #12]	; (800054c <HAL_UART_RxCpltCallback+0x64>)
 8000540:	f001 fb41 	bl	8001bc6 <HAL_UART_Receive_IT>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200002ac 	.word	0x200002ac
 8000550:	20000090 	.word	0x20000090
 8000554:	200000a8 	.word	0x200000a8
 8000558:	20000098 	.word	0x20000098

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 faa8 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f828 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 f892 	bl	8000690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800056c:	f000 f866 	bl	800063c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,&BUFF_RX[EmptyRx],1);
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <main+0x48>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	b29b      	uxth	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <main+0x4c>)
 800057a:	4413      	add	r3, r2
 800057c:	2201      	movs	r2, #1
 800057e:	4619      	mov	r1, r3
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <main+0x50>)
 8000582:	f001 fb20 	bl	8001bc6 <HAL_UART_Receive_IT>
    send("[RozpoczynamPrace!:1778]\r\n");
 8000586:	480a      	ldr	r0, [pc, #40]	; (80005b0 <main+0x54>)
 8000588:	f7ff fdf2 	bl	8000170 <send>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (frameReady){ // prawda kiedy na bufor rx przyjdzie ']'
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <main+0x58>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0fa      	beq.n	800058c <main+0x30>
	  		  frameReady = 0;
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <main+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	  		  lookForFrame();
 800059c:	f7ff fe6c 	bl	8000278 <lookForFrame>
	  if (frameReady){ // prawda kiedy na bufor rx przyjdzie ']'
 80005a0:	e7f4      	b.n	800058c <main+0x30>
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	200000a8 	.word	0x200000a8
 80005ac:	200002ac 	.word	0x200002ac
 80005b0:	080039cc 	.word	0x080039cc
 80005b4:	20000098 	.word	0x20000098

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b090      	sub	sp, #64	; 0x40
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	2228      	movs	r2, #40	; 0x28
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 ff32 	bl	8002430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005da:	2302      	movs	r3, #2
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005de:	2301      	movs	r3, #1
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	2310      	movs	r3, #16
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80005ea:	2300      	movs	r3, #0
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80005ee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0318 	add.w	r3, r7, #24
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fe39 	bl	8001270 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000604:	f000 f8b2 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f001 f8a4 	bl	8001770 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800062e:	f000 f89d 	bl	800076c <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3740      	adds	r7, #64	; 0x40
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_USART2_UART_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000674:	f001 fa16 	bl	8001aa4 <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f875 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200002ac 	.word	0x200002ac
 800068c:	40004400 	.word	0x40004400

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a4:	4b2d      	ldr	r3, [pc, #180]	; (800075c <MX_GPIO_Init+0xcc>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a2c      	ldr	r2, [pc, #176]	; (800075c <MX_GPIO_Init+0xcc>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b2a      	ldr	r3, [pc, #168]	; (800075c <MX_GPIO_Init+0xcc>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0310 	and.w	r3, r3, #16
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006bc:	4b27      	ldr	r3, [pc, #156]	; (800075c <MX_GPIO_Init+0xcc>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a26      	ldr	r2, [pc, #152]	; (800075c <MX_GPIO_Init+0xcc>)
 80006c2:	f043 0320 	orr.w	r3, r3, #32
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <MX_GPIO_Init+0xcc>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0320 	and.w	r3, r3, #32
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_GPIO_Init+0xcc>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <MX_GPIO_Init+0xcc>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_GPIO_Init+0xcc>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_GPIO_Init+0xcc>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a1a      	ldr	r2, [pc, #104]	; (800075c <MX_GPIO_Init+0xcc>)
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_GPIO_Init+0xcc>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0308 	and.w	r3, r3, #8
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2120      	movs	r1, #32
 8000708:	4815      	ldr	r0, [pc, #84]	; (8000760 <MX_GPIO_Init+0xd0>)
 800070a:	f000 fd77 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_GPIO_Init+0xd4>)
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	4811      	ldr	r0, [pc, #68]	; (8000768 <MX_GPIO_Init+0xd8>)
 8000724:	f000 fbe6 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000728:	2320      	movs	r3, #32
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2302      	movs	r3, #2
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4808      	ldr	r0, [pc, #32]	; (8000760 <MX_GPIO_Init+0xd0>)
 8000740:	f000 fbd8 	bl	8000ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	2028      	movs	r0, #40	; 0x28
 800074a:	f000 faec 	bl	8000d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800074e:	2028      	movs	r0, #40	; 0x28
 8000750:	f000 fb05 	bl	8000d5e <HAL_NVIC_EnableIRQ>

}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40021000 	.word	0x40021000
 8000760:	40010800 	.word	0x40010800
 8000764:	10110000 	.word	0x10110000
 8000768:	40011000 	.word	0x40011000

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_MspInit+0x5c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <HAL_MspInit+0x5c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_MspInit+0x5c>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x5c>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_MspInit+0x5c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x5c>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_MspInit+0x60>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_MspInit+0x60>)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010000 	.word	0x40010000

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a19      	ldr	r2, [pc, #100]	; (800085c <HAL_UART_MspInit+0x80>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d12b      	bne.n	8000854 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_UART_MspInit+0x84>)
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_UART_MspInit+0x84>)
 8000802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000806:	61d3      	str	r3, [r2, #28]
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_UART_MspInit+0x84>)
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_UART_MspInit+0x84>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a11      	ldr	r2, [pc, #68]	; (8000860 <HAL_UART_MspInit+0x84>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_UART_MspInit+0x84>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800082c:	230c      	movs	r3, #12
 800082e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2302      	movs	r3, #2
 8000836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	4809      	ldr	r0, [pc, #36]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000840:	f000 fb58 	bl	8000ef4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2026      	movs	r0, #38	; 0x26
 800084a:	f000 fa6c 	bl	8000d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800084e:	2026      	movs	r0, #38	; 0x26
 8000850:	f000 fa85 	bl	8000d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40004400 	.word	0x40004400
 8000860:	40021000 	.word	0x40021000
 8000864:	40010800 	.word	0x40010800

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ae:	f000 f947 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <USART2_IRQHandler+0x10>)
 80008be:	f001 f9b3 	bl	8001c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200002ac 	.word	0x200002ac

080008cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008d4:	f000 fcaa 	bl	800122c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
	return 1;
 80008e0:	2301      	movs	r3, #1
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <_kill>:

int _kill(int pid, int sig)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008f4:	f001 fd72 	bl	80023dc <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2216      	movs	r2, #22
 80008fc:	601a      	str	r2, [r3, #0]
	return -1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <_exit>:

void _exit (int status)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000912:	f04f 31ff 	mov.w	r1, #4294967295
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ffe7 	bl	80008ea <_kill>
	while (1) {}		/* Make sure we hang here */
 800091c:	e7fe      	b.n	800091c <_exit+0x12>

0800091e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	60f8      	str	r0, [r7, #12]
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	e00a      	b.n	8000946 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000930:	f3af 8000 	nop.w
 8000934:	4601      	mov	r1, r0
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	60ba      	str	r2, [r7, #8]
 800093c:	b2ca      	uxtb	r2, r1
 800093e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	3301      	adds	r3, #1
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	429a      	cmp	r2, r3
 800094c:	dbf0      	blt.n	8000930 <_read+0x12>
	}

return len;
 800094e:	687b      	ldr	r3, [r7, #4]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	e009      	b.n	800097e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1c5a      	adds	r2, r3, #1
 800096e:	60ba      	str	r2, [r7, #8]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	3301      	adds	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	429a      	cmp	r2, r3
 8000984:	dbf1      	blt.n	800096a <_write+0x12>
	}
	return len;
 8000986:	687b      	ldr	r3, [r7, #4]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_close>:

int _close(int file)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	return -1;
 8000998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b6:	605a      	str	r2, [r3, #4]
	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <_isatty>:

int _isatty(int file)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	return 1;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
	return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f001 fcdc 	bl	80023dc <__errno>
 8000a24:	4603      	mov	r3, r0
 8000a26:	220c      	movs	r2, #12
 8000a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <_sbrk+0x64>)
 8000a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20005000 	.word	0x20005000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	2000009c 	.word	0x2000009c
 8000a58:	20000408 	.word	0x20000408

08000a5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	; (8000aa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	; (8000aac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a8e:	f7ff ffe5 	bl	8000a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a92:	f001 fca9 	bl	80023e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a96:	f7ff fd61 	bl	800055c <main>
  bx lr
 8000a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000aa4:	08003c64 	.word	0x08003c64
  ldr r2, =_sbss
 8000aa8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000aac:	20000404 	.word	0x20000404

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x28>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x28>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f923 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fe52 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f93b 	bl	8000d7a <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f903 	bl	8000d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000004 	.word	0x20000004
 8000b38:	2000000c 	.word	0x2000000c
 8000b3c:	20000008 	.word	0x20000008

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <HAL_IncTick+0x20>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	2000000c 	.word	0x2000000c
 8000b60:	200003f0 	.word	0x200003f0

08000b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	200003f0 	.word	0x200003f0

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4906      	ldr	r1, [pc, #24]	; (8000c10 <__NVIC_EnableIRQ+0x34>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff90 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff2d 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff42 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff90 	bl	8000c68 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5f 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff35 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff ffa2 	bl	8000ccc <SysTick_Config>
 8000d88:	4603      	mov	r3, r0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b085      	sub	sp, #20
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d008      	beq.n	8000dba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2204      	movs	r2, #4
 8000dac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e020      	b.n	8000dfc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 020e 	bic.w	r2, r2, #14
 8000dc8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0201 	bic.w	r2, r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de2:	2101      	movs	r1, #1
 8000de4:	fa01 f202 	lsl.w	r2, r1, r2
 8000de8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2201      	movs	r2, #1
 8000dee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
	...

08000e08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d005      	beq.n	8000e2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2204      	movs	r2, #4
 8000e22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e051      	b.n	8000ece <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 020e 	bic.w	r2, r2, #14
 8000e38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 0201 	bic.w	r2, r2, #1
 8000e48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <HAL_DMA_Abort_IT+0xd0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d029      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xa0>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a20      	ldr	r2, [pc, #128]	; (8000edc <HAL_DMA_Abort_IT+0xd4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d022      	beq.n	8000ea4 <HAL_DMA_Abort_IT+0x9c>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_DMA_Abort_IT+0xd8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d01a      	beq.n	8000e9e <HAL_DMA_Abort_IT+0x96>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <HAL_DMA_Abort_IT+0xdc>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d012      	beq.n	8000e98 <HAL_DMA_Abort_IT+0x90>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <HAL_DMA_Abort_IT+0xe0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d00a      	beq.n	8000e92 <HAL_DMA_Abort_IT+0x8a>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <HAL_DMA_Abort_IT+0xe4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d102      	bne.n	8000e8c <HAL_DMA_Abort_IT+0x84>
 8000e86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e8a:	e00e      	b.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e90:	e00b      	b.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000e92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e96:	e008      	b.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	e005      	b.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea2:	e002      	b.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	e000      	b.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <HAL_DMA_Abort_IT+0xe8>)
 8000eac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	4798      	blx	r3
    } 
  }
  return status;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40020008 	.word	0x40020008
 8000edc:	4002001c 	.word	0x4002001c
 8000ee0:	40020030 	.word	0x40020030
 8000ee4:	40020044 	.word	0x40020044
 8000ee8:	40020058 	.word	0x40020058
 8000eec:	4002006c 	.word	0x4002006c
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b08b      	sub	sp, #44	; 0x2c
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f06:	e169      	b.n	80011dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f040 8158 	bne.w	80011d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4a9a      	ldr	r2, [pc, #616]	; (8001194 <HAL_GPIO_Init+0x2a0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d05e      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f30:	4a98      	ldr	r2, [pc, #608]	; (8001194 <HAL_GPIO_Init+0x2a0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d875      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f36:	4a98      	ldr	r2, [pc, #608]	; (8001198 <HAL_GPIO_Init+0x2a4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d058      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f3c:	4a96      	ldr	r2, [pc, #600]	; (8001198 <HAL_GPIO_Init+0x2a4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d86f      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f42:	4a96      	ldr	r2, [pc, #600]	; (800119c <HAL_GPIO_Init+0x2a8>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d052      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f48:	4a94      	ldr	r2, [pc, #592]	; (800119c <HAL_GPIO_Init+0x2a8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d869      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f4e:	4a94      	ldr	r2, [pc, #592]	; (80011a0 <HAL_GPIO_Init+0x2ac>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d04c      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f54:	4a92      	ldr	r2, [pc, #584]	; (80011a0 <HAL_GPIO_Init+0x2ac>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d863      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f5a:	4a92      	ldr	r2, [pc, #584]	; (80011a4 <HAL_GPIO_Init+0x2b0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d046      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f60:	4a90      	ldr	r2, [pc, #576]	; (80011a4 <HAL_GPIO_Init+0x2b0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d85d      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d82a      	bhi.n	8000fc0 <HAL_GPIO_Init+0xcc>
 8000f6a:	2b12      	cmp	r3, #18
 8000f6c:	d859      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f6e:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <HAL_GPIO_Init+0x80>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08000fef 	.word	0x08000fef
 8000f78:	08000fc9 	.word	0x08000fc9
 8000f7c:	08000fdb 	.word	0x08000fdb
 8000f80:	0800101d 	.word	0x0800101d
 8000f84:	08001023 	.word	0x08001023
 8000f88:	08001023 	.word	0x08001023
 8000f8c:	08001023 	.word	0x08001023
 8000f90:	08001023 	.word	0x08001023
 8000f94:	08001023 	.word	0x08001023
 8000f98:	08001023 	.word	0x08001023
 8000f9c:	08001023 	.word	0x08001023
 8000fa0:	08001023 	.word	0x08001023
 8000fa4:	08001023 	.word	0x08001023
 8000fa8:	08001023 	.word	0x08001023
 8000fac:	08001023 	.word	0x08001023
 8000fb0:	08001023 	.word	0x08001023
 8000fb4:	08001023 	.word	0x08001023
 8000fb8:	08000fd1 	.word	0x08000fd1
 8000fbc:	08000fe5 	.word	0x08000fe5
 8000fc0:	4a79      	ldr	r2, [pc, #484]	; (80011a8 <HAL_GPIO_Init+0x2b4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fc6:	e02c      	b.n	8001022 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	623b      	str	r3, [r7, #32]
          break;
 8000fce:	e029      	b.n	8001024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e024      	b.n	8001024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	623b      	str	r3, [r7, #32]
          break;
 8000fe2:	e01f      	b.n	8001024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	330c      	adds	r3, #12
 8000fea:	623b      	str	r3, [r7, #32]
          break;
 8000fec:	e01a      	b.n	8001024 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	623b      	str	r3, [r7, #32]
          break;
 8000ffa:	e013      	b.n	8001024 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d105      	bne.n	8001010 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001004:	2308      	movs	r3, #8
 8001006:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	611a      	str	r2, [r3, #16]
          break;
 800100e:	e009      	b.n	8001024 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001010:	2308      	movs	r3, #8
 8001012:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	615a      	str	r2, [r3, #20]
          break;
 800101a:	e003      	b.n	8001024 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
          break;
 8001020:	e000      	b.n	8001024 <HAL_GPIO_Init+0x130>
          break;
 8001022:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	2bff      	cmp	r3, #255	; 0xff
 8001028:	d801      	bhi.n	800102e <HAL_GPIO_Init+0x13a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	e001      	b.n	8001032 <HAL_GPIO_Init+0x13e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3304      	adds	r3, #4
 8001032:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2bff      	cmp	r3, #255	; 0xff
 8001038:	d802      	bhi.n	8001040 <HAL_GPIO_Init+0x14c>
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	e002      	b.n	8001046 <HAL_GPIO_Init+0x152>
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	3b08      	subs	r3, #8
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	210f      	movs	r1, #15
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	6a39      	ldr	r1, [r7, #32]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	431a      	orrs	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 80b1 	beq.w	80011d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001074:	4b4d      	ldr	r3, [pc, #308]	; (80011ac <HAL_GPIO_Init+0x2b8>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <HAL_GPIO_Init+0x2b8>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <HAL_GPIO_Init+0x2b8>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800108c:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <HAL_GPIO_Init+0x2bc>)
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001098:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <HAL_GPIO_Init+0x2c0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d013      	beq.n	80010e0 <HAL_GPIO_Init+0x1ec>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a3f      	ldr	r2, [pc, #252]	; (80011b8 <HAL_GPIO_Init+0x2c4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d00d      	beq.n	80010dc <HAL_GPIO_Init+0x1e8>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a3e      	ldr	r2, [pc, #248]	; (80011bc <HAL_GPIO_Init+0x2c8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d007      	beq.n	80010d8 <HAL_GPIO_Init+0x1e4>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a3d      	ldr	r2, [pc, #244]	; (80011c0 <HAL_GPIO_Init+0x2cc>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <HAL_GPIO_Init+0x1e0>
 80010d0:	2303      	movs	r3, #3
 80010d2:	e006      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d4:	2304      	movs	r3, #4
 80010d6:	e004      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d8:	2302      	movs	r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010e0:	2300      	movs	r3, #0
 80010e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e4:	f002 0203 	and.w	r2, r2, #3
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4093      	lsls	r3, r2
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010f2:	492f      	ldr	r1, [pc, #188]	; (80011b0 <HAL_GPIO_Init+0x2bc>)
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800110c:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	492c      	ldr	r1, [pc, #176]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	43db      	mvns	r3, r3
 8001122:	4928      	ldr	r1, [pc, #160]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001124:	4013      	ands	r3, r2
 8001126:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001134:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4922      	ldr	r1, [pc, #136]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	43db      	mvns	r3, r3
 800114a:	491e      	ldr	r1, [pc, #120]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800114c:	4013      	ands	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d006      	beq.n	800116a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	4918      	ldr	r1, [pc, #96]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	608b      	str	r3, [r1, #8]
 8001168:	e006      	b.n	8001178 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	43db      	mvns	r3, r3
 8001172:	4914      	ldr	r1, [pc, #80]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001174:	4013      	ands	r3, r2
 8001176:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d021      	beq.n	80011c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	490e      	ldr	r1, [pc, #56]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	60cb      	str	r3, [r1, #12]
 8001190:	e021      	b.n	80011d6 <HAL_GPIO_Init+0x2e2>
 8001192:	bf00      	nop
 8001194:	10320000 	.word	0x10320000
 8001198:	10310000 	.word	0x10310000
 800119c:	10220000 	.word	0x10220000
 80011a0:	10210000 	.word	0x10210000
 80011a4:	10120000 	.word	0x10120000
 80011a8:	10110000 	.word	0x10110000
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000
 80011b4:	40010800 	.word	0x40010800
 80011b8:	40010c00 	.word	0x40010c00
 80011bc:	40011000 	.word	0x40011000
 80011c0:	40011400 	.word	0x40011400
 80011c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_GPIO_Init+0x304>)
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	4909      	ldr	r1, [pc, #36]	; (80011f8 <HAL_GPIO_Init+0x304>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	3301      	adds	r3, #1
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	fa22 f303 	lsr.w	r3, r2, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f47f ae8e 	bne.w	8000f08 <HAL_GPIO_Init+0x14>
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	372c      	adds	r7, #44	; 0x2c
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	40010400 	.word	0x40010400

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001218:	e003      	b.n	8001222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	611a      	str	r2, [r3, #16]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f806 	bl	800125c <HAL_GPIO_EXTI_Callback>
  }
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40010400 	.word	0x40010400

0800125c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e26c      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8087 	beq.w	800139e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001290:	4b92      	ldr	r3, [pc, #584]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 030c 	and.w	r3, r3, #12
 8001298:	2b04      	cmp	r3, #4
 800129a:	d00c      	beq.n	80012b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800129c:	4b8f      	ldr	r3, [pc, #572]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 030c 	and.w	r3, r3, #12
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d112      	bne.n	80012ce <HAL_RCC_OscConfig+0x5e>
 80012a8:	4b8c      	ldr	r3, [pc, #560]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b4:	d10b      	bne.n	80012ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b6:	4b89      	ldr	r3, [pc, #548]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d06c      	beq.n	800139c <HAL_RCC_OscConfig+0x12c>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d168      	bne.n	800139c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e246      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d6:	d106      	bne.n	80012e6 <HAL_RCC_OscConfig+0x76>
 80012d8:	4b80      	ldr	r3, [pc, #512]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a7f      	ldr	r2, [pc, #508]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	e02e      	b.n	8001344 <HAL_RCC_OscConfig+0xd4>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0x98>
 80012ee:	4b7b      	ldr	r3, [pc, #492]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a7a      	ldr	r2, [pc, #488]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b78      	ldr	r3, [pc, #480]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a77      	ldr	r2, [pc, #476]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e01d      	b.n	8001344 <HAL_RCC_OscConfig+0xd4>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0xbc>
 8001312:	4b72      	ldr	r3, [pc, #456]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a71      	ldr	r2, [pc, #452]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b6f      	ldr	r3, [pc, #444]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a6e      	ldr	r2, [pc, #440]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e00b      	b.n	8001344 <HAL_RCC_OscConfig+0xd4>
 800132c:	4b6b      	ldr	r3, [pc, #428]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a6a      	ldr	r2, [pc, #424]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b68      	ldr	r3, [pc, #416]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a67      	ldr	r2, [pc, #412]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 800133e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d013      	beq.n	8001374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fc0a 	bl	8000b64 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fc06 	bl	8000b64 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e1fa      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0xe4>
 8001372:	e014      	b.n	800139e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fbf6 	bl	8000b64 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fbf2 	bl	8000b64 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e1e6      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	4b53      	ldr	r3, [pc, #332]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x10c>
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d063      	beq.n	8001472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00b      	beq.n	80013ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013b6:	4b49      	ldr	r3, [pc, #292]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d11c      	bne.n	80013fc <HAL_RCC_OscConfig+0x18c>
 80013c2:	4b46      	ldr	r3, [pc, #280]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d116      	bne.n	80013fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	4b43      	ldr	r3, [pc, #268]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <HAL_RCC_OscConfig+0x176>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e1ba      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4939      	ldr	r1, [pc, #228]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	e03a      	b.n	8001472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d020      	beq.n	8001446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7ff fbab 	bl	8000b64 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001412:	f7ff fba7 	bl	8000b64 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e19b      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4927      	ldr	r1, [pc, #156]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
 8001444:	e015      	b.n	8001472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fb8a 	bl	8000b64 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001454:	f7ff fb86 	bl	8000b64 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e17a      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d03a      	beq.n	80014f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d019      	beq.n	80014ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_RCC_OscConfig+0x274>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148c:	f7ff fb6a 	bl	8000b64 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff fb66 	bl	8000b64 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e15a      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f000 fad8 	bl	8001a68 <RCC_Delay>
 80014b8:	e01c      	b.n	80014f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_RCC_OscConfig+0x274>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fb50 	bl	8000b64 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c6:	e00f      	b.n	80014e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fb4c 	bl	8000b64 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d908      	bls.n	80014e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e140      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	42420000 	.word	0x42420000
 80014e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	4b9e      	ldr	r3, [pc, #632]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1e9      	bne.n	80014c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80a6 	beq.w	800164e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001506:	4b97      	ldr	r3, [pc, #604]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10d      	bne.n	800152e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b94      	ldr	r3, [pc, #592]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a93      	ldr	r2, [pc, #588]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b91      	ldr	r3, [pc, #580]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152a:	2301      	movs	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152e:	4b8e      	ldr	r3, [pc, #568]	; (8001768 <HAL_RCC_OscConfig+0x4f8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d118      	bne.n	800156c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153a:	4b8b      	ldr	r3, [pc, #556]	; (8001768 <HAL_RCC_OscConfig+0x4f8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a8a      	ldr	r2, [pc, #552]	; (8001768 <HAL_RCC_OscConfig+0x4f8>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001546:	f7ff fb0d 	bl	8000b64 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154e:	f7ff fb09 	bl	8000b64 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b64      	cmp	r3, #100	; 0x64
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0fd      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_RCC_OscConfig+0x4f8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x312>
 8001574:	4b7b      	ldr	r3, [pc, #492]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4a7a      	ldr	r2, [pc, #488]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6213      	str	r3, [r2, #32]
 8001580:	e02d      	b.n	80015de <HAL_RCC_OscConfig+0x36e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x334>
 800158a:	4b76      	ldr	r3, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a75      	ldr	r2, [pc, #468]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	6213      	str	r3, [r2, #32]
 8001596:	4b73      	ldr	r3, [pc, #460]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4a72      	ldr	r2, [pc, #456]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 800159c:	f023 0304 	bic.w	r3, r3, #4
 80015a0:	6213      	str	r3, [r2, #32]
 80015a2:	e01c      	b.n	80015de <HAL_RCC_OscConfig+0x36e>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d10c      	bne.n	80015c6 <HAL_RCC_OscConfig+0x356>
 80015ac:	4b6d      	ldr	r3, [pc, #436]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4a6c      	ldr	r2, [pc, #432]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	6213      	str	r3, [r2, #32]
 80015b8:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	4a69      	ldr	r2, [pc, #420]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6213      	str	r3, [r2, #32]
 80015c4:	e00b      	b.n	80015de <HAL_RCC_OscConfig+0x36e>
 80015c6:	4b67      	ldr	r3, [pc, #412]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4a66      	ldr	r2, [pc, #408]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	6213      	str	r3, [r2, #32]
 80015d2:	4b64      	ldr	r3, [pc, #400]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	4a63      	ldr	r2, [pc, #396]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80015d8:	f023 0304 	bic.w	r3, r3, #4
 80015dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d015      	beq.n	8001612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fabd 	bl	8000b64 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff fab9 	bl	8000b64 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e0ab      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001604:	4b57      	ldr	r3, [pc, #348]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ee      	beq.n	80015ee <HAL_RCC_OscConfig+0x37e>
 8001610:	e014      	b.n	800163c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001612:	f7ff faa7 	bl	8000b64 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff faa3 	bl	8000b64 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e095      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001630:	4b4c      	ldr	r3, [pc, #304]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1ee      	bne.n	800161a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d105      	bne.n	800164e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001642:	4b48      	ldr	r3, [pc, #288]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a47      	ldr	r2, [pc, #284]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8081 	beq.w	800175a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001658:	4b42      	ldr	r3, [pc, #264]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	2b08      	cmp	r3, #8
 8001662:	d061      	beq.n	8001728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d146      	bne.n	80016fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166c:	4b3f      	ldr	r3, [pc, #252]	; (800176c <HAL_RCC_OscConfig+0x4fc>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fa77 	bl	8000b64 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167a:	f7ff fa73 	bl	8000b64 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e067      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168c:	4b35      	ldr	r3, [pc, #212]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a0:	d108      	bne.n	80016b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016a2:	4b30      	ldr	r3, [pc, #192]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	492d      	ldr	r1, [pc, #180]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a19      	ldr	r1, [r3, #32]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	430b      	orrs	r3, r1
 80016c6:	4927      	ldr	r1, [pc, #156]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_RCC_OscConfig+0x4fc>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fa47 	bl	8000b64 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff fa43 	bl	8000b64 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e037      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x46a>
 80016f8:	e02f      	b.n	800175a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <HAL_RCC_OscConfig+0x4fc>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fa30 	bl	8000b64 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff fa2c 	bl	8000b64 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e020      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x498>
 8001726:	e018      	b.n	800175a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e013      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_OscConfig+0x4f4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	429a      	cmp	r2, r3
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000
 8001768:	40007000 	.word	0x40007000
 800176c:	42420060 	.word	0x42420060

08001770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0d0      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001784:	4b6a      	ldr	r3, [pc, #424]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d910      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b67      	ldr	r3, [pc, #412]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 0207 	bic.w	r2, r3, #7
 800179a:	4965      	ldr	r1, [pc, #404]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0b8      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017cc:	4b59      	ldr	r3, [pc, #356]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4a52      	ldr	r2, [pc, #328]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	494d      	ldr	r1, [pc, #308]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d040      	beq.n	8001890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d115      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e07f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e073      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06b      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184e:	4b39      	ldr	r3, [pc, #228]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f023 0203 	bic.w	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4936      	ldr	r1, [pc, #216]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001860:	f7ff f980 	bl	8000b64 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	e00a      	b.n	800187e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001868:	f7ff f97c 	bl	8000b64 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e053      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 020c 	and.w	r2, r3, #12
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	429a      	cmp	r2, r3
 800188e:	d1eb      	bne.n	8001868 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d210      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 0207 	bic.w	r2, r3, #7
 80018a6:	4922      	ldr	r1, [pc, #136]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e032      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4916      	ldr	r1, [pc, #88]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	490e      	ldr	r1, [pc, #56]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 f821 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8001902:	4602      	mov	r2, r0
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	490a      	ldr	r1, [pc, #40]	; (8001938 <HAL_RCC_ClockConfig+0x1c8>)
 8001910:	5ccb      	ldrb	r3, [r1, r3]
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1cc>)
 8001918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1d0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f8de 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40022000 	.word	0x40022000
 8001934:	40021000 	.word	0x40021000
 8001938:	080039f8 	.word	0x080039f8
 800193c:	20000004 	.word	0x20000004
 8001940:	20000008 	.word	0x20000008

08001944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	b490      	push	{r4, r7}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800194a:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800194c:	1d3c      	adds	r4, r7, #4
 800194e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001954:	f240 2301 	movw	r3, #513	; 0x201
 8001958:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b04      	cmp	r3, #4
 800197c:	d002      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x40>
 800197e:	2b08      	cmp	r3, #8
 8001980:	d003      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x46>
 8001982:	e02d      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001986:	623b      	str	r3, [r7, #32]
      break;
 8001988:	e02d      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	0c9b      	lsrs	r3, r3, #18
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001996:	4413      	add	r3, r2
 8001998:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800199c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	0c5b      	lsrs	r3, r3, #17
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019b6:	4413      	add	r3, r2
 80019b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80019c2:	fb02 f203 	mul.w	r2, r2, r3
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	e004      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	623b      	str	r3, [r7, #32]
      break;
 80019de:	e002      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e2:	623b      	str	r3, [r7, #32]
      break;
 80019e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e6:	6a3b      	ldr	r3, [r7, #32]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc90      	pop	{r4, r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	080039e8 	.word	0x080039e8
 80019f8:	40021000 	.word	0x40021000
 80019fc:	007a1200 	.word	0x007a1200
 8001a00:	003d0900 	.word	0x003d0900

08001a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a1c:	f7ff fff2 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4903      	ldr	r1, [pc, #12]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	08003a08 	.word	0x08003a08

08001a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a44:	f7ff ffde 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0adb      	lsrs	r3, r3, #11
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4903      	ldr	r1, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	08003a08 	.word	0x08003a08

08001a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <RCC_Delay+0x34>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <RCC_Delay+0x38>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0a5b      	lsrs	r3, r3, #9
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a84:	bf00      	nop
  }
  while (Delay --);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	60fa      	str	r2, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f9      	bne.n	8001a84 <RCC_Delay+0x1c>
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	10624dd3 	.word	0x10624dd3

08001aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e03f      	b.n	8001b36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7fe fe86 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2224      	movs	r2, #36	; 0x24
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fbe5 	bl	80022b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d130      	bne.n	8001bba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_UART_Transmit_IT+0x26>
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e029      	b.n	8001bbc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_UART_Transmit_IT+0x38>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e022      	b.n	8001bbc <HAL_UART_Transmit_IT+0x7e>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	88fa      	ldrh	r2, [r7, #6]
 8001b8e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2221      	movs	r2, #33	; 0x21
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bb4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
  }
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d11d      	bne.n	8001c1c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_UART_Receive_IT+0x26>
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e016      	b.n	8001c1e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_UART_Receive_IT+0x38>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e00f      	b.n	8001c1e <HAL_UART_Receive_IT+0x58>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f9c6 	bl	8001fa4 <UART_Start_Receive_IT>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	e000      	b.n	8001c1e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001c1c:	2302      	movs	r3, #2
  }
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10d      	bne.n	8001c7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_UART_IRQHandler+0x52>
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fa76 	bl	8002164 <UART_Receive_IT>
      return;
 8001c78:	e17b      	b.n	8001f72 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80b1 	beq.w	8001de4 <HAL_UART_IRQHandler+0x1bc>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <HAL_UART_IRQHandler+0x70>
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80a6 	beq.w	8001de4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_UART_IRQHandler+0x90>
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00a      	beq.n	8001cd8 <HAL_UART_IRQHandler+0xb0>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f043 0202 	orr.w	r2, r3, #2
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_UART_IRQHandler+0xd0>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f043 0204 	orr.w	r2, r3, #4
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00f      	beq.n	8001d22 <HAL_UART_IRQHandler+0xfa>
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d104      	bne.n	8001d16 <HAL_UART_IRQHandler+0xee>
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f043 0208 	orr.w	r2, r3, #8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 811e 	beq.w	8001f68 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <HAL_UART_IRQHandler+0x11e>
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 fa0f 	bl	8002164 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <HAL_UART_IRQHandler+0x146>
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d031      	beq.n	8001dd2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f951 	bl	8002016 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d023      	beq.n	8001dca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d013      	beq.n	8001dc2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	4a76      	ldr	r2, [pc, #472]	; (8001f78 <HAL_UART_IRQHandler+0x350>)
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f82e 	bl	8000e08 <HAL_DMA_Abort_IT>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d016      	beq.n	8001de0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dc0:	e00e      	b.n	8001de0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8da 	bl	8001f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dc8:	e00a      	b.n	8001de0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8d6 	bl	8001f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dd0:	e006      	b.n	8001de0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8d2 	bl	8001f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001dde:	e0c3      	b.n	8001f68 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001de0:	bf00      	nop
    return;
 8001de2:	e0c1      	b.n	8001f68 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	f040 80a1 	bne.w	8001f30 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 809b 	beq.w	8001f30 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8095 	beq.w	8001f30 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d04e      	beq.n	8001ec8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001e34:	8a3b      	ldrh	r3, [r7, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8098 	beq.w	8001f6c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e40:	8a3a      	ldrh	r2, [r7, #16]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	f080 8092 	bcs.w	8001f6c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8a3a      	ldrh	r2, [r7, #16]
 8001e4c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d02b      	beq.n	8001eb0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e66:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e86:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0210 	bic.w	r2, r2, #16
 8001ea4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ff71 	bl	8000d92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f864 	bl	8001f8e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001ec6:	e051      	b.n	8001f6c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d047      	beq.n	8001f70 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001ee0:	8a7b      	ldrh	r3, [r7, #18]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d044      	beq.n	8001f70 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ef4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0210 	bic.w	r2, r2, #16
 8001f22:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f24:	8a7b      	ldrh	r3, [r7, #18]
 8001f26:	4619      	mov	r1, r3
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f830 	bl	8001f8e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001f2e:	e01f      	b.n	8001f70 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d008      	beq.n	8001f4c <HAL_UART_IRQHandler+0x324>
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8a6 	bl	8002096 <UART_Transmit_IT>
    return;
 8001f4a:	e012      	b.n	8001f72 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00d      	beq.n	8001f72 <HAL_UART_IRQHandler+0x34a>
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f8e7 	bl	8002134 <UART_EndTransmit_IT>
    return;
 8001f66:	e004      	b.n	8001f72 <HAL_UART_IRQHandler+0x34a>
    return;
 8001f68:	bf00      	nop
 8001f6a:	e002      	b.n	8001f72 <HAL_UART_IRQHandler+0x34a>
      return;
 8001f6c:	bf00      	nop
 8001f6e:	e000      	b.n	8001f72 <HAL_UART_IRQHandler+0x34a>
      return;
 8001f70:	bf00      	nop
  }
}
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	0800206f 	.word	0x0800206f

08001f7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2222      	movs	r2, #34	; 0x22
 8001fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0220 	orr.w	r2, r2, #32
 8002008:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800202c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0210 	bic.w	r2, r2, #16
 8002054:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f7ff ff77 	bl	8001f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b21      	cmp	r3, #33	; 0x21
 80020a8:	d13e      	bne.n	8002128 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b2:	d114      	bne.n	80020de <UART_Transmit_IT+0x48>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d110      	bne.n	80020de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	1c9a      	adds	r2, r3, #2
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	621a      	str	r2, [r3, #32]
 80020dc:	e008      	b.n	80020f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	1c59      	adds	r1, r3, #1
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6211      	str	r1, [r2, #32]
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4619      	mov	r1, r3
 80020fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10f      	bne.n	8002124 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002112:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002122:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	e000      	b.n	800212a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002128:	2302      	movs	r3, #2
  }
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800214a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7fe f98b 	bl	8000470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b22      	cmp	r3, #34	; 0x22
 8002176:	f040 8099 	bne.w	80022ac <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002182:	d117      	bne.n	80021b4 <UART_Receive_IT+0x50>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d113      	bne.n	80021b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	b29b      	uxth	r3, r3
 800219e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	1c9a      	adds	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
 80021b2:	e026      	b.n	8002202 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c6:	d007      	beq.n	80021d8 <UART_Receive_IT+0x74>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <UART_Receive_IT+0x82>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d106      	bne.n	80021e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e008      	b.n	80021f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29b      	uxth	r3, r3
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4619      	mov	r1, r3
 8002210:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002212:	2b00      	cmp	r3, #0
 8002214:	d148      	bne.n	80022a8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0220 	bic.w	r2, r2, #32
 8002224:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002234:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0201 	bic.w	r2, r2, #1
 8002244:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	2b01      	cmp	r3, #1
 8002254:	d123      	bne.n	800229e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0210 	bic.w	r2, r2, #16
 800226a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b10      	cmp	r3, #16
 8002278:	d10a      	bne.n	8002290 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002294:	4619      	mov	r1, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff fe79 	bl	8001f8e <HAL_UARTEx_RxEventCallback>
 800229c:	e002      	b.n	80022a4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe f922 	bl	80004e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e002      	b.n	80022ae <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	e000      	b.n	80022ae <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80022ac:	2302      	movs	r3, #2
  }
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022f2:	f023 030c 	bic.w	r3, r3, #12
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	430b      	orrs	r3, r1
 80022fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a2c      	ldr	r2, [pc, #176]	; (80023cc <UART_SetConfig+0x114>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d103      	bne.n	8002328 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002320:	f7ff fb8e 	bl	8001a40 <HAL_RCC_GetPCLK2Freq>
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	e002      	b.n	800232e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002328:	f7ff fb76 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 800232c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	009a      	lsls	r2, r3, #2
 8002338:	441a      	add	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <UART_SetConfig+0x118>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	0119      	lsls	r1, r3, #4
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	009a      	lsls	r2, r3, #2
 8002358:	441a      	add	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	fbb2 f2f3 	udiv	r2, r2, r3
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <UART_SetConfig+0x118>)
 8002366:	fba3 0302 	umull	r0, r3, r3, r2
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2064      	movs	r0, #100	; 0x64
 800236e:	fb00 f303 	mul.w	r3, r0, r3
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	3332      	adds	r3, #50	; 0x32
 8002378:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <UART_SetConfig+0x118>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002384:	4419      	add	r1, r3
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	009a      	lsls	r2, r3, #2
 8002390:	441a      	add	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fbb2 f2f3 	udiv	r2, r2, r3
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <UART_SetConfig+0x118>)
 800239e:	fba3 0302 	umull	r0, r3, r3, r2
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2064      	movs	r0, #100	; 0x64
 80023a6:	fb00 f303 	mul.w	r3, r0, r3
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	3332      	adds	r3, #50	; 0x32
 80023b0:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <UART_SetConfig+0x118>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	f003 020f 	and.w	r2, r3, #15
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	440a      	add	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023c4:	bf00      	nop
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40013800 	.word	0x40013800
 80023d0:	51eb851f 	.word	0x51eb851f

080023d4 <atoi>:
 80023d4:	220a      	movs	r2, #10
 80023d6:	2100      	movs	r1, #0
 80023d8:	f000 b914 	b.w	8002604 <strtol>

080023dc <__errno>:
 80023dc:	4b01      	ldr	r3, [pc, #4]	; (80023e4 <__errno+0x8>)
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000010 	.word	0x20000010

080023e8 <__libc_init_array>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	2600      	movs	r6, #0
 80023ec:	4d0c      	ldr	r5, [pc, #48]	; (8002420 <__libc_init_array+0x38>)
 80023ee:	4c0d      	ldr	r4, [pc, #52]	; (8002424 <__libc_init_array+0x3c>)
 80023f0:	1b64      	subs	r4, r4, r5
 80023f2:	10a4      	asrs	r4, r4, #2
 80023f4:	42a6      	cmp	r6, r4
 80023f6:	d109      	bne.n	800240c <__libc_init_array+0x24>
 80023f8:	f001 faac 	bl	8003954 <_init>
 80023fc:	2600      	movs	r6, #0
 80023fe:	4d0a      	ldr	r5, [pc, #40]	; (8002428 <__libc_init_array+0x40>)
 8002400:	4c0a      	ldr	r4, [pc, #40]	; (800242c <__libc_init_array+0x44>)
 8002402:	1b64      	subs	r4, r4, r5
 8002404:	10a4      	asrs	r4, r4, #2
 8002406:	42a6      	cmp	r6, r4
 8002408:	d105      	bne.n	8002416 <__libc_init_array+0x2e>
 800240a:	bd70      	pop	{r4, r5, r6, pc}
 800240c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002410:	4798      	blx	r3
 8002412:	3601      	adds	r6, #1
 8002414:	e7ee      	b.n	80023f4 <__libc_init_array+0xc>
 8002416:	f855 3b04 	ldr.w	r3, [r5], #4
 800241a:	4798      	blx	r3
 800241c:	3601      	adds	r6, #1
 800241e:	e7f2      	b.n	8002406 <__libc_init_array+0x1e>
 8002420:	08003c5c 	.word	0x08003c5c
 8002424:	08003c5c 	.word	0x08003c5c
 8002428:	08003c5c 	.word	0x08003c5c
 800242c:	08003c60 	.word	0x08003c60

08002430 <memset>:
 8002430:	4603      	mov	r3, r0
 8002432:	4402      	add	r2, r0
 8002434:	4293      	cmp	r3, r2
 8002436:	d100      	bne.n	800243a <memset+0xa>
 8002438:	4770      	bx	lr
 800243a:	f803 1b01 	strb.w	r1, [r3], #1
 800243e:	e7f9      	b.n	8002434 <memset+0x4>

08002440 <strtok>:
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <strtok+0x5c>)
 8002442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002446:	681f      	ldr	r7, [r3, #0]
 8002448:	4605      	mov	r5, r0
 800244a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800244c:	460e      	mov	r6, r1
 800244e:	b9ec      	cbnz	r4, 800248c <strtok+0x4c>
 8002450:	2050      	movs	r0, #80	; 0x50
 8002452:	f000 f931 	bl	80026b8 <malloc>
 8002456:	4602      	mov	r2, r0
 8002458:	65b8      	str	r0, [r7, #88]	; 0x58
 800245a:	b920      	cbnz	r0, 8002466 <strtok+0x26>
 800245c:	2157      	movs	r1, #87	; 0x57
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <strtok+0x60>)
 8002460:	4810      	ldr	r0, [pc, #64]	; (80024a4 <strtok+0x64>)
 8002462:	f000 f8f9 	bl	8002658 <__assert_func>
 8002466:	e9c0 4400 	strd	r4, r4, [r0]
 800246a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800246e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8002472:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8002476:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800247a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800247e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8002482:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8002486:	6184      	str	r4, [r0, #24]
 8002488:	7704      	strb	r4, [r0, #28]
 800248a:	6244      	str	r4, [r0, #36]	; 0x24
 800248c:	4631      	mov	r1, r6
 800248e:	4628      	mov	r0, r5
 8002490:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002492:	2301      	movs	r3, #1
 8002494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002498:	f000 b806 	b.w	80024a8 <__strtok_r>
 800249c:	20000010 	.word	0x20000010
 80024a0:	08003a14 	.word	0x08003a14
 80024a4:	08003a2b 	.word	0x08003a2b

080024a8 <__strtok_r>:
 80024a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024aa:	b908      	cbnz	r0, 80024b0 <__strtok_r+0x8>
 80024ac:	6810      	ldr	r0, [r2, #0]
 80024ae:	b188      	cbz	r0, 80024d4 <__strtok_r+0x2c>
 80024b0:	4604      	mov	r4, r0
 80024b2:	460f      	mov	r7, r1
 80024b4:	4620      	mov	r0, r4
 80024b6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80024ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80024be:	b91e      	cbnz	r6, 80024c8 <__strtok_r+0x20>
 80024c0:	b965      	cbnz	r5, 80024dc <__strtok_r+0x34>
 80024c2:	4628      	mov	r0, r5
 80024c4:	6015      	str	r5, [r2, #0]
 80024c6:	e005      	b.n	80024d4 <__strtok_r+0x2c>
 80024c8:	42b5      	cmp	r5, r6
 80024ca:	d1f6      	bne.n	80024ba <__strtok_r+0x12>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <__strtok_r+0xa>
 80024d0:	6014      	str	r4, [r2, #0]
 80024d2:	7003      	strb	r3, [r0, #0]
 80024d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d6:	461c      	mov	r4, r3
 80024d8:	e00c      	b.n	80024f4 <__strtok_r+0x4c>
 80024da:	b915      	cbnz	r5, 80024e2 <__strtok_r+0x3a>
 80024dc:	460e      	mov	r6, r1
 80024de:	f814 3b01 	ldrb.w	r3, [r4], #1
 80024e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80024e6:	42ab      	cmp	r3, r5
 80024e8:	d1f7      	bne.n	80024da <__strtok_r+0x32>
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f3      	beq.n	80024d6 <__strtok_r+0x2e>
 80024ee:	2300      	movs	r3, #0
 80024f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80024f4:	6014      	str	r4, [r2, #0]
 80024f6:	e7ed      	b.n	80024d4 <__strtok_r+0x2c>

080024f8 <_strtol_l.isra.0>:
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024fe:	4686      	mov	lr, r0
 8002500:	d001      	beq.n	8002506 <_strtol_l.isra.0+0xe>
 8002502:	2b24      	cmp	r3, #36	; 0x24
 8002504:	d906      	bls.n	8002514 <_strtol_l.isra.0+0x1c>
 8002506:	f7ff ff69 	bl	80023dc <__errno>
 800250a:	2316      	movs	r3, #22
 800250c:	6003      	str	r3, [r0, #0]
 800250e:	2000      	movs	r0, #0
 8002510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002514:	468c      	mov	ip, r1
 8002516:	4e3a      	ldr	r6, [pc, #232]	; (8002600 <_strtol_l.isra.0+0x108>)
 8002518:	4660      	mov	r0, ip
 800251a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800251e:	5da5      	ldrb	r5, [r4, r6]
 8002520:	f015 0508 	ands.w	r5, r5, #8
 8002524:	d1f8      	bne.n	8002518 <_strtol_l.isra.0+0x20>
 8002526:	2c2d      	cmp	r4, #45	; 0x2d
 8002528:	d133      	bne.n	8002592 <_strtol_l.isra.0+0x9a>
 800252a:	f04f 0801 	mov.w	r8, #1
 800252e:	f89c 4000 	ldrb.w	r4, [ip]
 8002532:	f100 0c02 	add.w	ip, r0, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d05d      	beq.n	80025f6 <_strtol_l.isra.0+0xfe>
 800253a:	2b10      	cmp	r3, #16
 800253c:	d10c      	bne.n	8002558 <_strtol_l.isra.0+0x60>
 800253e:	2c30      	cmp	r4, #48	; 0x30
 8002540:	d10a      	bne.n	8002558 <_strtol_l.isra.0+0x60>
 8002542:	f89c 0000 	ldrb.w	r0, [ip]
 8002546:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800254a:	2858      	cmp	r0, #88	; 0x58
 800254c:	d14e      	bne.n	80025ec <_strtol_l.isra.0+0xf4>
 800254e:	2310      	movs	r3, #16
 8002550:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8002554:	f10c 0c02 	add.w	ip, ip, #2
 8002558:	2500      	movs	r5, #0
 800255a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800255e:	3f01      	subs	r7, #1
 8002560:	fbb7 f9f3 	udiv	r9, r7, r3
 8002564:	4628      	mov	r0, r5
 8002566:	fb03 7a19 	mls	sl, r3, r9, r7
 800256a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800256e:	2e09      	cmp	r6, #9
 8002570:	d818      	bhi.n	80025a4 <_strtol_l.isra.0+0xac>
 8002572:	4634      	mov	r4, r6
 8002574:	42a3      	cmp	r3, r4
 8002576:	dd24      	ble.n	80025c2 <_strtol_l.isra.0+0xca>
 8002578:	2d00      	cmp	r5, #0
 800257a:	db1f      	blt.n	80025bc <_strtol_l.isra.0+0xc4>
 800257c:	4581      	cmp	r9, r0
 800257e:	d31d      	bcc.n	80025bc <_strtol_l.isra.0+0xc4>
 8002580:	d101      	bne.n	8002586 <_strtol_l.isra.0+0x8e>
 8002582:	45a2      	cmp	sl, r4
 8002584:	db1a      	blt.n	80025bc <_strtol_l.isra.0+0xc4>
 8002586:	2501      	movs	r5, #1
 8002588:	fb00 4003 	mla	r0, r0, r3, r4
 800258c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8002590:	e7eb      	b.n	800256a <_strtol_l.isra.0+0x72>
 8002592:	2c2b      	cmp	r4, #43	; 0x2b
 8002594:	bf08      	it	eq
 8002596:	f89c 4000 	ldrbeq.w	r4, [ip]
 800259a:	46a8      	mov	r8, r5
 800259c:	bf08      	it	eq
 800259e:	f100 0c02 	addeq.w	ip, r0, #2
 80025a2:	e7c8      	b.n	8002536 <_strtol_l.isra.0+0x3e>
 80025a4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80025a8:	2e19      	cmp	r6, #25
 80025aa:	d801      	bhi.n	80025b0 <_strtol_l.isra.0+0xb8>
 80025ac:	3c37      	subs	r4, #55	; 0x37
 80025ae:	e7e1      	b.n	8002574 <_strtol_l.isra.0+0x7c>
 80025b0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80025b4:	2e19      	cmp	r6, #25
 80025b6:	d804      	bhi.n	80025c2 <_strtol_l.isra.0+0xca>
 80025b8:	3c57      	subs	r4, #87	; 0x57
 80025ba:	e7db      	b.n	8002574 <_strtol_l.isra.0+0x7c>
 80025bc:	f04f 35ff 	mov.w	r5, #4294967295
 80025c0:	e7e4      	b.n	800258c <_strtol_l.isra.0+0x94>
 80025c2:	2d00      	cmp	r5, #0
 80025c4:	da08      	bge.n	80025d8 <_strtol_l.isra.0+0xe0>
 80025c6:	2322      	movs	r3, #34	; 0x22
 80025c8:	4638      	mov	r0, r7
 80025ca:	f8ce 3000 	str.w	r3, [lr]
 80025ce:	2a00      	cmp	r2, #0
 80025d0:	d09e      	beq.n	8002510 <_strtol_l.isra.0+0x18>
 80025d2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80025d6:	e007      	b.n	80025e8 <_strtol_l.isra.0+0xf0>
 80025d8:	f1b8 0f00 	cmp.w	r8, #0
 80025dc:	d000      	beq.n	80025e0 <_strtol_l.isra.0+0xe8>
 80025de:	4240      	negs	r0, r0
 80025e0:	2a00      	cmp	r2, #0
 80025e2:	d095      	beq.n	8002510 <_strtol_l.isra.0+0x18>
 80025e4:	2d00      	cmp	r5, #0
 80025e6:	d1f4      	bne.n	80025d2 <_strtol_l.isra.0+0xda>
 80025e8:	6011      	str	r1, [r2, #0]
 80025ea:	e791      	b.n	8002510 <_strtol_l.isra.0+0x18>
 80025ec:	2430      	movs	r4, #48	; 0x30
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1b2      	bne.n	8002558 <_strtol_l.isra.0+0x60>
 80025f2:	2308      	movs	r3, #8
 80025f4:	e7b0      	b.n	8002558 <_strtol_l.isra.0+0x60>
 80025f6:	2c30      	cmp	r4, #48	; 0x30
 80025f8:	d0a3      	beq.n	8002542 <_strtol_l.isra.0+0x4a>
 80025fa:	230a      	movs	r3, #10
 80025fc:	e7ac      	b.n	8002558 <_strtol_l.isra.0+0x60>
 80025fe:	bf00      	nop
 8002600:	08003ac9 	.word	0x08003ac9

08002604 <strtol>:
 8002604:	4613      	mov	r3, r2
 8002606:	460a      	mov	r2, r1
 8002608:	4601      	mov	r1, r0
 800260a:	4802      	ldr	r0, [pc, #8]	; (8002614 <strtol+0x10>)
 800260c:	6800      	ldr	r0, [r0, #0]
 800260e:	f7ff bf73 	b.w	80024f8 <_strtol_l.isra.0>
 8002612:	bf00      	nop
 8002614:	20000010 	.word	0x20000010

08002618 <_vsiprintf_r>:
 8002618:	b500      	push	{lr}
 800261a:	b09b      	sub	sp, #108	; 0x6c
 800261c:	9100      	str	r1, [sp, #0]
 800261e:	9104      	str	r1, [sp, #16]
 8002620:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002624:	9105      	str	r1, [sp, #20]
 8002626:	9102      	str	r1, [sp, #8]
 8002628:	4905      	ldr	r1, [pc, #20]	; (8002640 <_vsiprintf_r+0x28>)
 800262a:	9103      	str	r1, [sp, #12]
 800262c:	4669      	mov	r1, sp
 800262e:	f000 f94d 	bl	80028cc <_svfiprintf_r>
 8002632:	2200      	movs	r2, #0
 8002634:	9b00      	ldr	r3, [sp, #0]
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	b01b      	add	sp, #108	; 0x6c
 800263a:	f85d fb04 	ldr.w	pc, [sp], #4
 800263e:	bf00      	nop
 8002640:	ffff0208 	.word	0xffff0208

08002644 <vsiprintf>:
 8002644:	4613      	mov	r3, r2
 8002646:	460a      	mov	r2, r1
 8002648:	4601      	mov	r1, r0
 800264a:	4802      	ldr	r0, [pc, #8]	; (8002654 <vsiprintf+0x10>)
 800264c:	6800      	ldr	r0, [r0, #0]
 800264e:	f7ff bfe3 	b.w	8002618 <_vsiprintf_r>
 8002652:	bf00      	nop
 8002654:	20000010 	.word	0x20000010

08002658 <__assert_func>:
 8002658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800265a:	4614      	mov	r4, r2
 800265c:	461a      	mov	r2, r3
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <__assert_func+0x2c>)
 8002660:	4605      	mov	r5, r0
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68d8      	ldr	r0, [r3, #12]
 8002666:	b14c      	cbz	r4, 800267c <__assert_func+0x24>
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <__assert_func+0x30>)
 800266a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800266e:	9100      	str	r1, [sp, #0]
 8002670:	462b      	mov	r3, r5
 8002672:	4906      	ldr	r1, [pc, #24]	; (800268c <__assert_func+0x34>)
 8002674:	f000 f80e 	bl	8002694 <fiprintf>
 8002678:	f000 fde6 	bl	8003248 <abort>
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <__assert_func+0x38>)
 800267e:	461c      	mov	r4, r3
 8002680:	e7f3      	b.n	800266a <__assert_func+0x12>
 8002682:	bf00      	nop
 8002684:	20000010 	.word	0x20000010
 8002688:	08003a8c 	.word	0x08003a8c
 800268c:	08003a99 	.word	0x08003a99
 8002690:	08003ac7 	.word	0x08003ac7

08002694 <fiprintf>:
 8002694:	b40e      	push	{r1, r2, r3}
 8002696:	b503      	push	{r0, r1, lr}
 8002698:	4601      	mov	r1, r0
 800269a:	ab03      	add	r3, sp, #12
 800269c:	4805      	ldr	r0, [pc, #20]	; (80026b4 <fiprintf+0x20>)
 800269e:	f853 2b04 	ldr.w	r2, [r3], #4
 80026a2:	6800      	ldr	r0, [r0, #0]
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	f000 fa39 	bl	8002b1c <_vfiprintf_r>
 80026aa:	b002      	add	sp, #8
 80026ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80026b0:	b003      	add	sp, #12
 80026b2:	4770      	bx	lr
 80026b4:	20000010 	.word	0x20000010

080026b8 <malloc>:
 80026b8:	4b02      	ldr	r3, [pc, #8]	; (80026c4 <malloc+0xc>)
 80026ba:	4601      	mov	r1, r0
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	f000 b84f 	b.w	8002760 <_malloc_r>
 80026c2:	bf00      	nop
 80026c4:	20000010 	.word	0x20000010

080026c8 <_free_r>:
 80026c8:	b538      	push	{r3, r4, r5, lr}
 80026ca:	4605      	mov	r5, r0
 80026cc:	2900      	cmp	r1, #0
 80026ce:	d043      	beq.n	8002758 <_free_r+0x90>
 80026d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026d4:	1f0c      	subs	r4, r1, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bfb8      	it	lt
 80026da:	18e4      	addlt	r4, r4, r3
 80026dc:	f001 f810 	bl	8003700 <__malloc_lock>
 80026e0:	4a1e      	ldr	r2, [pc, #120]	; (800275c <_free_r+0x94>)
 80026e2:	6813      	ldr	r3, [r2, #0]
 80026e4:	4610      	mov	r0, r2
 80026e6:	b933      	cbnz	r3, 80026f6 <_free_r+0x2e>
 80026e8:	6063      	str	r3, [r4, #4]
 80026ea:	6014      	str	r4, [r2, #0]
 80026ec:	4628      	mov	r0, r5
 80026ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026f2:	f001 b80b 	b.w	800370c <__malloc_unlock>
 80026f6:	42a3      	cmp	r3, r4
 80026f8:	d90a      	bls.n	8002710 <_free_r+0x48>
 80026fa:	6821      	ldr	r1, [r4, #0]
 80026fc:	1862      	adds	r2, r4, r1
 80026fe:	4293      	cmp	r3, r2
 8002700:	bf01      	itttt	eq
 8002702:	681a      	ldreq	r2, [r3, #0]
 8002704:	685b      	ldreq	r3, [r3, #4]
 8002706:	1852      	addeq	r2, r2, r1
 8002708:	6022      	streq	r2, [r4, #0]
 800270a:	6063      	str	r3, [r4, #4]
 800270c:	6004      	str	r4, [r0, #0]
 800270e:	e7ed      	b.n	80026ec <_free_r+0x24>
 8002710:	461a      	mov	r2, r3
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	b10b      	cbz	r3, 800271a <_free_r+0x52>
 8002716:	42a3      	cmp	r3, r4
 8002718:	d9fa      	bls.n	8002710 <_free_r+0x48>
 800271a:	6811      	ldr	r1, [r2, #0]
 800271c:	1850      	adds	r0, r2, r1
 800271e:	42a0      	cmp	r0, r4
 8002720:	d10b      	bne.n	800273a <_free_r+0x72>
 8002722:	6820      	ldr	r0, [r4, #0]
 8002724:	4401      	add	r1, r0
 8002726:	1850      	adds	r0, r2, r1
 8002728:	4283      	cmp	r3, r0
 800272a:	6011      	str	r1, [r2, #0]
 800272c:	d1de      	bne.n	80026ec <_free_r+0x24>
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4401      	add	r1, r0
 8002734:	6011      	str	r1, [r2, #0]
 8002736:	6053      	str	r3, [r2, #4]
 8002738:	e7d8      	b.n	80026ec <_free_r+0x24>
 800273a:	d902      	bls.n	8002742 <_free_r+0x7a>
 800273c:	230c      	movs	r3, #12
 800273e:	602b      	str	r3, [r5, #0]
 8002740:	e7d4      	b.n	80026ec <_free_r+0x24>
 8002742:	6820      	ldr	r0, [r4, #0]
 8002744:	1821      	adds	r1, r4, r0
 8002746:	428b      	cmp	r3, r1
 8002748:	bf01      	itttt	eq
 800274a:	6819      	ldreq	r1, [r3, #0]
 800274c:	685b      	ldreq	r3, [r3, #4]
 800274e:	1809      	addeq	r1, r1, r0
 8002750:	6021      	streq	r1, [r4, #0]
 8002752:	6063      	str	r3, [r4, #4]
 8002754:	6054      	str	r4, [r2, #4]
 8002756:	e7c9      	b.n	80026ec <_free_r+0x24>
 8002758:	bd38      	pop	{r3, r4, r5, pc}
 800275a:	bf00      	nop
 800275c:	200000a0 	.word	0x200000a0

08002760 <_malloc_r>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	1ccd      	adds	r5, r1, #3
 8002764:	f025 0503 	bic.w	r5, r5, #3
 8002768:	3508      	adds	r5, #8
 800276a:	2d0c      	cmp	r5, #12
 800276c:	bf38      	it	cc
 800276e:	250c      	movcc	r5, #12
 8002770:	2d00      	cmp	r5, #0
 8002772:	4606      	mov	r6, r0
 8002774:	db01      	blt.n	800277a <_malloc_r+0x1a>
 8002776:	42a9      	cmp	r1, r5
 8002778:	d903      	bls.n	8002782 <_malloc_r+0x22>
 800277a:	230c      	movs	r3, #12
 800277c:	6033      	str	r3, [r6, #0]
 800277e:	2000      	movs	r0, #0
 8002780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002782:	f000 ffbd 	bl	8003700 <__malloc_lock>
 8002786:	4921      	ldr	r1, [pc, #132]	; (800280c <_malloc_r+0xac>)
 8002788:	680a      	ldr	r2, [r1, #0]
 800278a:	4614      	mov	r4, r2
 800278c:	b99c      	cbnz	r4, 80027b6 <_malloc_r+0x56>
 800278e:	4f20      	ldr	r7, [pc, #128]	; (8002810 <_malloc_r+0xb0>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	b923      	cbnz	r3, 800279e <_malloc_r+0x3e>
 8002794:	4621      	mov	r1, r4
 8002796:	4630      	mov	r0, r6
 8002798:	f000 fc86 	bl	80030a8 <_sbrk_r>
 800279c:	6038      	str	r0, [r7, #0]
 800279e:	4629      	mov	r1, r5
 80027a0:	4630      	mov	r0, r6
 80027a2:	f000 fc81 	bl	80030a8 <_sbrk_r>
 80027a6:	1c43      	adds	r3, r0, #1
 80027a8:	d123      	bne.n	80027f2 <_malloc_r+0x92>
 80027aa:	230c      	movs	r3, #12
 80027ac:	4630      	mov	r0, r6
 80027ae:	6033      	str	r3, [r6, #0]
 80027b0:	f000 ffac 	bl	800370c <__malloc_unlock>
 80027b4:	e7e3      	b.n	800277e <_malloc_r+0x1e>
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	1b5b      	subs	r3, r3, r5
 80027ba:	d417      	bmi.n	80027ec <_malloc_r+0x8c>
 80027bc:	2b0b      	cmp	r3, #11
 80027be:	d903      	bls.n	80027c8 <_malloc_r+0x68>
 80027c0:	6023      	str	r3, [r4, #0]
 80027c2:	441c      	add	r4, r3
 80027c4:	6025      	str	r5, [r4, #0]
 80027c6:	e004      	b.n	80027d2 <_malloc_r+0x72>
 80027c8:	6863      	ldr	r3, [r4, #4]
 80027ca:	42a2      	cmp	r2, r4
 80027cc:	bf0c      	ite	eq
 80027ce:	600b      	streq	r3, [r1, #0]
 80027d0:	6053      	strne	r3, [r2, #4]
 80027d2:	4630      	mov	r0, r6
 80027d4:	f000 ff9a 	bl	800370c <__malloc_unlock>
 80027d8:	f104 000b 	add.w	r0, r4, #11
 80027dc:	1d23      	adds	r3, r4, #4
 80027de:	f020 0007 	bic.w	r0, r0, #7
 80027e2:	1ac2      	subs	r2, r0, r3
 80027e4:	d0cc      	beq.n	8002780 <_malloc_r+0x20>
 80027e6:	1a1b      	subs	r3, r3, r0
 80027e8:	50a3      	str	r3, [r4, r2]
 80027ea:	e7c9      	b.n	8002780 <_malloc_r+0x20>
 80027ec:	4622      	mov	r2, r4
 80027ee:	6864      	ldr	r4, [r4, #4]
 80027f0:	e7cc      	b.n	800278c <_malloc_r+0x2c>
 80027f2:	1cc4      	adds	r4, r0, #3
 80027f4:	f024 0403 	bic.w	r4, r4, #3
 80027f8:	42a0      	cmp	r0, r4
 80027fa:	d0e3      	beq.n	80027c4 <_malloc_r+0x64>
 80027fc:	1a21      	subs	r1, r4, r0
 80027fe:	4630      	mov	r0, r6
 8002800:	f000 fc52 	bl	80030a8 <_sbrk_r>
 8002804:	3001      	adds	r0, #1
 8002806:	d1dd      	bne.n	80027c4 <_malloc_r+0x64>
 8002808:	e7cf      	b.n	80027aa <_malloc_r+0x4a>
 800280a:	bf00      	nop
 800280c:	200000a0 	.word	0x200000a0
 8002810:	200000a4 	.word	0x200000a4

08002814 <__ssputs_r>:
 8002814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002818:	688e      	ldr	r6, [r1, #8]
 800281a:	4682      	mov	sl, r0
 800281c:	429e      	cmp	r6, r3
 800281e:	460c      	mov	r4, r1
 8002820:	4690      	mov	r8, r2
 8002822:	461f      	mov	r7, r3
 8002824:	d838      	bhi.n	8002898 <__ssputs_r+0x84>
 8002826:	898a      	ldrh	r2, [r1, #12]
 8002828:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800282c:	d032      	beq.n	8002894 <__ssputs_r+0x80>
 800282e:	6825      	ldr	r5, [r4, #0]
 8002830:	6909      	ldr	r1, [r1, #16]
 8002832:	3301      	adds	r3, #1
 8002834:	eba5 0901 	sub.w	r9, r5, r1
 8002838:	6965      	ldr	r5, [r4, #20]
 800283a:	444b      	add	r3, r9
 800283c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002840:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002844:	106d      	asrs	r5, r5, #1
 8002846:	429d      	cmp	r5, r3
 8002848:	bf38      	it	cc
 800284a:	461d      	movcc	r5, r3
 800284c:	0553      	lsls	r3, r2, #21
 800284e:	d531      	bpl.n	80028b4 <__ssputs_r+0xa0>
 8002850:	4629      	mov	r1, r5
 8002852:	f7ff ff85 	bl	8002760 <_malloc_r>
 8002856:	4606      	mov	r6, r0
 8002858:	b950      	cbnz	r0, 8002870 <__ssputs_r+0x5c>
 800285a:	230c      	movs	r3, #12
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f8ca 3000 	str.w	r3, [sl]
 8002864:	89a3      	ldrh	r3, [r4, #12]
 8002866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800286a:	81a3      	strh	r3, [r4, #12]
 800286c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002870:	464a      	mov	r2, r9
 8002872:	6921      	ldr	r1, [r4, #16]
 8002874:	f000 ff1c 	bl	80036b0 <memcpy>
 8002878:	89a3      	ldrh	r3, [r4, #12]
 800287a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800287e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002882:	81a3      	strh	r3, [r4, #12]
 8002884:	6126      	str	r6, [r4, #16]
 8002886:	444e      	add	r6, r9
 8002888:	6026      	str	r6, [r4, #0]
 800288a:	463e      	mov	r6, r7
 800288c:	6165      	str	r5, [r4, #20]
 800288e:	eba5 0509 	sub.w	r5, r5, r9
 8002892:	60a5      	str	r5, [r4, #8]
 8002894:	42be      	cmp	r6, r7
 8002896:	d900      	bls.n	800289a <__ssputs_r+0x86>
 8002898:	463e      	mov	r6, r7
 800289a:	4632      	mov	r2, r6
 800289c:	4641      	mov	r1, r8
 800289e:	6820      	ldr	r0, [r4, #0]
 80028a0:	f000 ff14 	bl	80036cc <memmove>
 80028a4:	68a3      	ldr	r3, [r4, #8]
 80028a6:	6822      	ldr	r2, [r4, #0]
 80028a8:	1b9b      	subs	r3, r3, r6
 80028aa:	4432      	add	r2, r6
 80028ac:	2000      	movs	r0, #0
 80028ae:	60a3      	str	r3, [r4, #8]
 80028b0:	6022      	str	r2, [r4, #0]
 80028b2:	e7db      	b.n	800286c <__ssputs_r+0x58>
 80028b4:	462a      	mov	r2, r5
 80028b6:	f000 ff2f 	bl	8003718 <_realloc_r>
 80028ba:	4606      	mov	r6, r0
 80028bc:	2800      	cmp	r0, #0
 80028be:	d1e1      	bne.n	8002884 <__ssputs_r+0x70>
 80028c0:	4650      	mov	r0, sl
 80028c2:	6921      	ldr	r1, [r4, #16]
 80028c4:	f7ff ff00 	bl	80026c8 <_free_r>
 80028c8:	e7c7      	b.n	800285a <__ssputs_r+0x46>
	...

080028cc <_svfiprintf_r>:
 80028cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d0:	4698      	mov	r8, r3
 80028d2:	898b      	ldrh	r3, [r1, #12]
 80028d4:	4607      	mov	r7, r0
 80028d6:	061b      	lsls	r3, r3, #24
 80028d8:	460d      	mov	r5, r1
 80028da:	4614      	mov	r4, r2
 80028dc:	b09d      	sub	sp, #116	; 0x74
 80028de:	d50e      	bpl.n	80028fe <_svfiprintf_r+0x32>
 80028e0:	690b      	ldr	r3, [r1, #16]
 80028e2:	b963      	cbnz	r3, 80028fe <_svfiprintf_r+0x32>
 80028e4:	2140      	movs	r1, #64	; 0x40
 80028e6:	f7ff ff3b 	bl	8002760 <_malloc_r>
 80028ea:	6028      	str	r0, [r5, #0]
 80028ec:	6128      	str	r0, [r5, #16]
 80028ee:	b920      	cbnz	r0, 80028fa <_svfiprintf_r+0x2e>
 80028f0:	230c      	movs	r3, #12
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	e0d1      	b.n	8002a9e <_svfiprintf_r+0x1d2>
 80028fa:	2340      	movs	r3, #64	; 0x40
 80028fc:	616b      	str	r3, [r5, #20]
 80028fe:	2300      	movs	r3, #0
 8002900:	9309      	str	r3, [sp, #36]	; 0x24
 8002902:	2320      	movs	r3, #32
 8002904:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002908:	2330      	movs	r3, #48	; 0x30
 800290a:	f04f 0901 	mov.w	r9, #1
 800290e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002912:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002ab8 <_svfiprintf_r+0x1ec>
 8002916:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800291a:	4623      	mov	r3, r4
 800291c:	469a      	mov	sl, r3
 800291e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002922:	b10a      	cbz	r2, 8002928 <_svfiprintf_r+0x5c>
 8002924:	2a25      	cmp	r2, #37	; 0x25
 8002926:	d1f9      	bne.n	800291c <_svfiprintf_r+0x50>
 8002928:	ebba 0b04 	subs.w	fp, sl, r4
 800292c:	d00b      	beq.n	8002946 <_svfiprintf_r+0x7a>
 800292e:	465b      	mov	r3, fp
 8002930:	4622      	mov	r2, r4
 8002932:	4629      	mov	r1, r5
 8002934:	4638      	mov	r0, r7
 8002936:	f7ff ff6d 	bl	8002814 <__ssputs_r>
 800293a:	3001      	adds	r0, #1
 800293c:	f000 80aa 	beq.w	8002a94 <_svfiprintf_r+0x1c8>
 8002940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002942:	445a      	add	r2, fp
 8002944:	9209      	str	r2, [sp, #36]	; 0x24
 8002946:	f89a 3000 	ldrb.w	r3, [sl]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80a2 	beq.w	8002a94 <_svfiprintf_r+0x1c8>
 8002950:	2300      	movs	r3, #0
 8002952:	f04f 32ff 	mov.w	r2, #4294967295
 8002956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800295a:	f10a 0a01 	add.w	sl, sl, #1
 800295e:	9304      	str	r3, [sp, #16]
 8002960:	9307      	str	r3, [sp, #28]
 8002962:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002966:	931a      	str	r3, [sp, #104]	; 0x68
 8002968:	4654      	mov	r4, sl
 800296a:	2205      	movs	r2, #5
 800296c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002970:	4851      	ldr	r0, [pc, #324]	; (8002ab8 <_svfiprintf_r+0x1ec>)
 8002972:	f000 fe8f 	bl	8003694 <memchr>
 8002976:	9a04      	ldr	r2, [sp, #16]
 8002978:	b9d8      	cbnz	r0, 80029b2 <_svfiprintf_r+0xe6>
 800297a:	06d0      	lsls	r0, r2, #27
 800297c:	bf44      	itt	mi
 800297e:	2320      	movmi	r3, #32
 8002980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002984:	0711      	lsls	r1, r2, #28
 8002986:	bf44      	itt	mi
 8002988:	232b      	movmi	r3, #43	; 0x2b
 800298a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800298e:	f89a 3000 	ldrb.w	r3, [sl]
 8002992:	2b2a      	cmp	r3, #42	; 0x2a
 8002994:	d015      	beq.n	80029c2 <_svfiprintf_r+0xf6>
 8002996:	4654      	mov	r4, sl
 8002998:	2000      	movs	r0, #0
 800299a:	f04f 0c0a 	mov.w	ip, #10
 800299e:	9a07      	ldr	r2, [sp, #28]
 80029a0:	4621      	mov	r1, r4
 80029a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029a6:	3b30      	subs	r3, #48	; 0x30
 80029a8:	2b09      	cmp	r3, #9
 80029aa:	d94e      	bls.n	8002a4a <_svfiprintf_r+0x17e>
 80029ac:	b1b0      	cbz	r0, 80029dc <_svfiprintf_r+0x110>
 80029ae:	9207      	str	r2, [sp, #28]
 80029b0:	e014      	b.n	80029dc <_svfiprintf_r+0x110>
 80029b2:	eba0 0308 	sub.w	r3, r0, r8
 80029b6:	fa09 f303 	lsl.w	r3, r9, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	46a2      	mov	sl, r4
 80029be:	9304      	str	r3, [sp, #16]
 80029c0:	e7d2      	b.n	8002968 <_svfiprintf_r+0x9c>
 80029c2:	9b03      	ldr	r3, [sp, #12]
 80029c4:	1d19      	adds	r1, r3, #4
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	9103      	str	r1, [sp, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	bfbb      	ittet	lt
 80029ce:	425b      	neglt	r3, r3
 80029d0:	f042 0202 	orrlt.w	r2, r2, #2
 80029d4:	9307      	strge	r3, [sp, #28]
 80029d6:	9307      	strlt	r3, [sp, #28]
 80029d8:	bfb8      	it	lt
 80029da:	9204      	strlt	r2, [sp, #16]
 80029dc:	7823      	ldrb	r3, [r4, #0]
 80029de:	2b2e      	cmp	r3, #46	; 0x2e
 80029e0:	d10c      	bne.n	80029fc <_svfiprintf_r+0x130>
 80029e2:	7863      	ldrb	r3, [r4, #1]
 80029e4:	2b2a      	cmp	r3, #42	; 0x2a
 80029e6:	d135      	bne.n	8002a54 <_svfiprintf_r+0x188>
 80029e8:	9b03      	ldr	r3, [sp, #12]
 80029ea:	3402      	adds	r4, #2
 80029ec:	1d1a      	adds	r2, r3, #4
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	9203      	str	r2, [sp, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bfb8      	it	lt
 80029f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80029fa:	9305      	str	r3, [sp, #20]
 80029fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002ac8 <_svfiprintf_r+0x1fc>
 8002a00:	2203      	movs	r2, #3
 8002a02:	4650      	mov	r0, sl
 8002a04:	7821      	ldrb	r1, [r4, #0]
 8002a06:	f000 fe45 	bl	8003694 <memchr>
 8002a0a:	b140      	cbz	r0, 8002a1e <_svfiprintf_r+0x152>
 8002a0c:	2340      	movs	r3, #64	; 0x40
 8002a0e:	eba0 000a 	sub.w	r0, r0, sl
 8002a12:	fa03 f000 	lsl.w	r0, r3, r0
 8002a16:	9b04      	ldr	r3, [sp, #16]
 8002a18:	3401      	adds	r4, #1
 8002a1a:	4303      	orrs	r3, r0
 8002a1c:	9304      	str	r3, [sp, #16]
 8002a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a22:	2206      	movs	r2, #6
 8002a24:	4825      	ldr	r0, [pc, #148]	; (8002abc <_svfiprintf_r+0x1f0>)
 8002a26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a2a:	f000 fe33 	bl	8003694 <memchr>
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d038      	beq.n	8002aa4 <_svfiprintf_r+0x1d8>
 8002a32:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <_svfiprintf_r+0x1f4>)
 8002a34:	bb1b      	cbnz	r3, 8002a7e <_svfiprintf_r+0x1b2>
 8002a36:	9b03      	ldr	r3, [sp, #12]
 8002a38:	3307      	adds	r3, #7
 8002a3a:	f023 0307 	bic.w	r3, r3, #7
 8002a3e:	3308      	adds	r3, #8
 8002a40:	9303      	str	r3, [sp, #12]
 8002a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a44:	4433      	add	r3, r6
 8002a46:	9309      	str	r3, [sp, #36]	; 0x24
 8002a48:	e767      	b.n	800291a <_svfiprintf_r+0x4e>
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a52:	e7a5      	b.n	80029a0 <_svfiprintf_r+0xd4>
 8002a54:	2300      	movs	r3, #0
 8002a56:	f04f 0c0a 	mov.w	ip, #10
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	3401      	adds	r4, #1
 8002a5e:	9305      	str	r3, [sp, #20]
 8002a60:	4620      	mov	r0, r4
 8002a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a66:	3a30      	subs	r2, #48	; 0x30
 8002a68:	2a09      	cmp	r2, #9
 8002a6a:	d903      	bls.n	8002a74 <_svfiprintf_r+0x1a8>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0c5      	beq.n	80029fc <_svfiprintf_r+0x130>
 8002a70:	9105      	str	r1, [sp, #20]
 8002a72:	e7c3      	b.n	80029fc <_svfiprintf_r+0x130>
 8002a74:	4604      	mov	r4, r0
 8002a76:	2301      	movs	r3, #1
 8002a78:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a7c:	e7f0      	b.n	8002a60 <_svfiprintf_r+0x194>
 8002a7e:	ab03      	add	r3, sp, #12
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	462a      	mov	r2, r5
 8002a84:	4638      	mov	r0, r7
 8002a86:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <_svfiprintf_r+0x1f8>)
 8002a88:	a904      	add	r1, sp, #16
 8002a8a:	f3af 8000 	nop.w
 8002a8e:	1c42      	adds	r2, r0, #1
 8002a90:	4606      	mov	r6, r0
 8002a92:	d1d6      	bne.n	8002a42 <_svfiprintf_r+0x176>
 8002a94:	89ab      	ldrh	r3, [r5, #12]
 8002a96:	065b      	lsls	r3, r3, #25
 8002a98:	f53f af2c 	bmi.w	80028f4 <_svfiprintf_r+0x28>
 8002a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a9e:	b01d      	add	sp, #116	; 0x74
 8002aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa4:	ab03      	add	r3, sp, #12
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	462a      	mov	r2, r5
 8002aaa:	4638      	mov	r0, r7
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <_svfiprintf_r+0x1f8>)
 8002aae:	a904      	add	r1, sp, #16
 8002ab0:	f000 f9d4 	bl	8002e5c <_printf_i>
 8002ab4:	e7eb      	b.n	8002a8e <_svfiprintf_r+0x1c2>
 8002ab6:	bf00      	nop
 8002ab8:	08003bc9 	.word	0x08003bc9
 8002abc:	08003bd3 	.word	0x08003bd3
 8002ac0:	00000000 	.word	0x00000000
 8002ac4:	08002815 	.word	0x08002815
 8002ac8:	08003bcf 	.word	0x08003bcf

08002acc <__sfputc_r>:
 8002acc:	6893      	ldr	r3, [r2, #8]
 8002ace:	b410      	push	{r4}
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	6093      	str	r3, [r2, #8]
 8002ad6:	da07      	bge.n	8002ae8 <__sfputc_r+0x1c>
 8002ad8:	6994      	ldr	r4, [r2, #24]
 8002ada:	42a3      	cmp	r3, r4
 8002adc:	db01      	blt.n	8002ae2 <__sfputc_r+0x16>
 8002ade:	290a      	cmp	r1, #10
 8002ae0:	d102      	bne.n	8002ae8 <__sfputc_r+0x1c>
 8002ae2:	bc10      	pop	{r4}
 8002ae4:	f000 baf0 	b.w	80030c8 <__swbuf_r>
 8002ae8:	6813      	ldr	r3, [r2, #0]
 8002aea:	1c58      	adds	r0, r3, #1
 8002aec:	6010      	str	r0, [r2, #0]
 8002aee:	7019      	strb	r1, [r3, #0]
 8002af0:	4608      	mov	r0, r1
 8002af2:	bc10      	pop	{r4}
 8002af4:	4770      	bx	lr

08002af6 <__sfputs_r>:
 8002af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af8:	4606      	mov	r6, r0
 8002afa:	460f      	mov	r7, r1
 8002afc:	4614      	mov	r4, r2
 8002afe:	18d5      	adds	r5, r2, r3
 8002b00:	42ac      	cmp	r4, r5
 8002b02:	d101      	bne.n	8002b08 <__sfputs_r+0x12>
 8002b04:	2000      	movs	r0, #0
 8002b06:	e007      	b.n	8002b18 <__sfputs_r+0x22>
 8002b08:	463a      	mov	r2, r7
 8002b0a:	4630      	mov	r0, r6
 8002b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b10:	f7ff ffdc 	bl	8002acc <__sfputc_r>
 8002b14:	1c43      	adds	r3, r0, #1
 8002b16:	d1f3      	bne.n	8002b00 <__sfputs_r+0xa>
 8002b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b1c <_vfiprintf_r>:
 8002b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b20:	460d      	mov	r5, r1
 8002b22:	4614      	mov	r4, r2
 8002b24:	4698      	mov	r8, r3
 8002b26:	4606      	mov	r6, r0
 8002b28:	b09d      	sub	sp, #116	; 0x74
 8002b2a:	b118      	cbz	r0, 8002b34 <_vfiprintf_r+0x18>
 8002b2c:	6983      	ldr	r3, [r0, #24]
 8002b2e:	b90b      	cbnz	r3, 8002b34 <_vfiprintf_r+0x18>
 8002b30:	f000 fcac 	bl	800348c <__sinit>
 8002b34:	4b89      	ldr	r3, [pc, #548]	; (8002d5c <_vfiprintf_r+0x240>)
 8002b36:	429d      	cmp	r5, r3
 8002b38:	d11b      	bne.n	8002b72 <_vfiprintf_r+0x56>
 8002b3a:	6875      	ldr	r5, [r6, #4]
 8002b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b3e:	07d9      	lsls	r1, r3, #31
 8002b40:	d405      	bmi.n	8002b4e <_vfiprintf_r+0x32>
 8002b42:	89ab      	ldrh	r3, [r5, #12]
 8002b44:	059a      	lsls	r2, r3, #22
 8002b46:	d402      	bmi.n	8002b4e <_vfiprintf_r+0x32>
 8002b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b4a:	f000 fd3d 	bl	80035c8 <__retarget_lock_acquire_recursive>
 8002b4e:	89ab      	ldrh	r3, [r5, #12]
 8002b50:	071b      	lsls	r3, r3, #28
 8002b52:	d501      	bpl.n	8002b58 <_vfiprintf_r+0x3c>
 8002b54:	692b      	ldr	r3, [r5, #16]
 8002b56:	b9eb      	cbnz	r3, 8002b94 <_vfiprintf_r+0x78>
 8002b58:	4629      	mov	r1, r5
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	f000 fb06 	bl	800316c <__swsetup_r>
 8002b60:	b1c0      	cbz	r0, 8002b94 <_vfiprintf_r+0x78>
 8002b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b64:	07dc      	lsls	r4, r3, #31
 8002b66:	d50e      	bpl.n	8002b86 <_vfiprintf_r+0x6a>
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6c:	b01d      	add	sp, #116	; 0x74
 8002b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b72:	4b7b      	ldr	r3, [pc, #492]	; (8002d60 <_vfiprintf_r+0x244>)
 8002b74:	429d      	cmp	r5, r3
 8002b76:	d101      	bne.n	8002b7c <_vfiprintf_r+0x60>
 8002b78:	68b5      	ldr	r5, [r6, #8]
 8002b7a:	e7df      	b.n	8002b3c <_vfiprintf_r+0x20>
 8002b7c:	4b79      	ldr	r3, [pc, #484]	; (8002d64 <_vfiprintf_r+0x248>)
 8002b7e:	429d      	cmp	r5, r3
 8002b80:	bf08      	it	eq
 8002b82:	68f5      	ldreq	r5, [r6, #12]
 8002b84:	e7da      	b.n	8002b3c <_vfiprintf_r+0x20>
 8002b86:	89ab      	ldrh	r3, [r5, #12]
 8002b88:	0598      	lsls	r0, r3, #22
 8002b8a:	d4ed      	bmi.n	8002b68 <_vfiprintf_r+0x4c>
 8002b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b8e:	f000 fd1c 	bl	80035ca <__retarget_lock_release_recursive>
 8002b92:	e7e9      	b.n	8002b68 <_vfiprintf_r+0x4c>
 8002b94:	2300      	movs	r3, #0
 8002b96:	9309      	str	r3, [sp, #36]	; 0x24
 8002b98:	2320      	movs	r3, #32
 8002b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b9e:	2330      	movs	r3, #48	; 0x30
 8002ba0:	f04f 0901 	mov.w	r9, #1
 8002ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ba8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002d68 <_vfiprintf_r+0x24c>
 8002bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bb0:	4623      	mov	r3, r4
 8002bb2:	469a      	mov	sl, r3
 8002bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bb8:	b10a      	cbz	r2, 8002bbe <_vfiprintf_r+0xa2>
 8002bba:	2a25      	cmp	r2, #37	; 0x25
 8002bbc:	d1f9      	bne.n	8002bb2 <_vfiprintf_r+0x96>
 8002bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8002bc2:	d00b      	beq.n	8002bdc <_vfiprintf_r+0xc0>
 8002bc4:	465b      	mov	r3, fp
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	4629      	mov	r1, r5
 8002bca:	4630      	mov	r0, r6
 8002bcc:	f7ff ff93 	bl	8002af6 <__sfputs_r>
 8002bd0:	3001      	adds	r0, #1
 8002bd2:	f000 80aa 	beq.w	8002d2a <_vfiprintf_r+0x20e>
 8002bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bd8:	445a      	add	r2, fp
 8002bda:	9209      	str	r2, [sp, #36]	; 0x24
 8002bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a2 	beq.w	8002d2a <_vfiprintf_r+0x20e>
 8002be6:	2300      	movs	r3, #0
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bf0:	f10a 0a01 	add.w	sl, sl, #1
 8002bf4:	9304      	str	r3, [sp, #16]
 8002bf6:	9307      	str	r3, [sp, #28]
 8002bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8002bfe:	4654      	mov	r4, sl
 8002c00:	2205      	movs	r2, #5
 8002c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c06:	4858      	ldr	r0, [pc, #352]	; (8002d68 <_vfiprintf_r+0x24c>)
 8002c08:	f000 fd44 	bl	8003694 <memchr>
 8002c0c:	9a04      	ldr	r2, [sp, #16]
 8002c0e:	b9d8      	cbnz	r0, 8002c48 <_vfiprintf_r+0x12c>
 8002c10:	06d1      	lsls	r1, r2, #27
 8002c12:	bf44      	itt	mi
 8002c14:	2320      	movmi	r3, #32
 8002c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c1a:	0713      	lsls	r3, r2, #28
 8002c1c:	bf44      	itt	mi
 8002c1e:	232b      	movmi	r3, #43	; 0x2b
 8002c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c24:	f89a 3000 	ldrb.w	r3, [sl]
 8002c28:	2b2a      	cmp	r3, #42	; 0x2a
 8002c2a:	d015      	beq.n	8002c58 <_vfiprintf_r+0x13c>
 8002c2c:	4654      	mov	r4, sl
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f04f 0c0a 	mov.w	ip, #10
 8002c34:	9a07      	ldr	r2, [sp, #28]
 8002c36:	4621      	mov	r1, r4
 8002c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c3c:	3b30      	subs	r3, #48	; 0x30
 8002c3e:	2b09      	cmp	r3, #9
 8002c40:	d94e      	bls.n	8002ce0 <_vfiprintf_r+0x1c4>
 8002c42:	b1b0      	cbz	r0, 8002c72 <_vfiprintf_r+0x156>
 8002c44:	9207      	str	r2, [sp, #28]
 8002c46:	e014      	b.n	8002c72 <_vfiprintf_r+0x156>
 8002c48:	eba0 0308 	sub.w	r3, r0, r8
 8002c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8002c50:	4313      	orrs	r3, r2
 8002c52:	46a2      	mov	sl, r4
 8002c54:	9304      	str	r3, [sp, #16]
 8002c56:	e7d2      	b.n	8002bfe <_vfiprintf_r+0xe2>
 8002c58:	9b03      	ldr	r3, [sp, #12]
 8002c5a:	1d19      	adds	r1, r3, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	9103      	str	r1, [sp, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bfbb      	ittet	lt
 8002c64:	425b      	neglt	r3, r3
 8002c66:	f042 0202 	orrlt.w	r2, r2, #2
 8002c6a:	9307      	strge	r3, [sp, #28]
 8002c6c:	9307      	strlt	r3, [sp, #28]
 8002c6e:	bfb8      	it	lt
 8002c70:	9204      	strlt	r2, [sp, #16]
 8002c72:	7823      	ldrb	r3, [r4, #0]
 8002c74:	2b2e      	cmp	r3, #46	; 0x2e
 8002c76:	d10c      	bne.n	8002c92 <_vfiprintf_r+0x176>
 8002c78:	7863      	ldrb	r3, [r4, #1]
 8002c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c7c:	d135      	bne.n	8002cea <_vfiprintf_r+0x1ce>
 8002c7e:	9b03      	ldr	r3, [sp, #12]
 8002c80:	3402      	adds	r4, #2
 8002c82:	1d1a      	adds	r2, r3, #4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	9203      	str	r2, [sp, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bfb8      	it	lt
 8002c8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c90:	9305      	str	r3, [sp, #20]
 8002c92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002d78 <_vfiprintf_r+0x25c>
 8002c96:	2203      	movs	r2, #3
 8002c98:	4650      	mov	r0, sl
 8002c9a:	7821      	ldrb	r1, [r4, #0]
 8002c9c:	f000 fcfa 	bl	8003694 <memchr>
 8002ca0:	b140      	cbz	r0, 8002cb4 <_vfiprintf_r+0x198>
 8002ca2:	2340      	movs	r3, #64	; 0x40
 8002ca4:	eba0 000a 	sub.w	r0, r0, sl
 8002ca8:	fa03 f000 	lsl.w	r0, r3, r0
 8002cac:	9b04      	ldr	r3, [sp, #16]
 8002cae:	3401      	adds	r4, #1
 8002cb0:	4303      	orrs	r3, r0
 8002cb2:	9304      	str	r3, [sp, #16]
 8002cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cb8:	2206      	movs	r2, #6
 8002cba:	482c      	ldr	r0, [pc, #176]	; (8002d6c <_vfiprintf_r+0x250>)
 8002cbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cc0:	f000 fce8 	bl	8003694 <memchr>
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	d03f      	beq.n	8002d48 <_vfiprintf_r+0x22c>
 8002cc8:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <_vfiprintf_r+0x254>)
 8002cca:	bb1b      	cbnz	r3, 8002d14 <_vfiprintf_r+0x1f8>
 8002ccc:	9b03      	ldr	r3, [sp, #12]
 8002cce:	3307      	adds	r3, #7
 8002cd0:	f023 0307 	bic.w	r3, r3, #7
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	9303      	str	r3, [sp, #12]
 8002cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cda:	443b      	add	r3, r7
 8002cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8002cde:	e767      	b.n	8002bb0 <_vfiprintf_r+0x94>
 8002ce0:	460c      	mov	r4, r1
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ce8:	e7a5      	b.n	8002c36 <_vfiprintf_r+0x11a>
 8002cea:	2300      	movs	r3, #0
 8002cec:	f04f 0c0a 	mov.w	ip, #10
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	3401      	adds	r4, #1
 8002cf4:	9305      	str	r3, [sp, #20]
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cfc:	3a30      	subs	r2, #48	; 0x30
 8002cfe:	2a09      	cmp	r2, #9
 8002d00:	d903      	bls.n	8002d0a <_vfiprintf_r+0x1ee>
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0c5      	beq.n	8002c92 <_vfiprintf_r+0x176>
 8002d06:	9105      	str	r1, [sp, #20]
 8002d08:	e7c3      	b.n	8002c92 <_vfiprintf_r+0x176>
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d12:	e7f0      	b.n	8002cf6 <_vfiprintf_r+0x1da>
 8002d14:	ab03      	add	r3, sp, #12
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	462a      	mov	r2, r5
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <_vfiprintf_r+0x258>)
 8002d1e:	a904      	add	r1, sp, #16
 8002d20:	f3af 8000 	nop.w
 8002d24:	4607      	mov	r7, r0
 8002d26:	1c78      	adds	r0, r7, #1
 8002d28:	d1d6      	bne.n	8002cd8 <_vfiprintf_r+0x1bc>
 8002d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d2c:	07d9      	lsls	r1, r3, #31
 8002d2e:	d405      	bmi.n	8002d3c <_vfiprintf_r+0x220>
 8002d30:	89ab      	ldrh	r3, [r5, #12]
 8002d32:	059a      	lsls	r2, r3, #22
 8002d34:	d402      	bmi.n	8002d3c <_vfiprintf_r+0x220>
 8002d36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d38:	f000 fc47 	bl	80035ca <__retarget_lock_release_recursive>
 8002d3c:	89ab      	ldrh	r3, [r5, #12]
 8002d3e:	065b      	lsls	r3, r3, #25
 8002d40:	f53f af12 	bmi.w	8002b68 <_vfiprintf_r+0x4c>
 8002d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d46:	e711      	b.n	8002b6c <_vfiprintf_r+0x50>
 8002d48:	ab03      	add	r3, sp, #12
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	462a      	mov	r2, r5
 8002d4e:	4630      	mov	r0, r6
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <_vfiprintf_r+0x258>)
 8002d52:	a904      	add	r1, sp, #16
 8002d54:	f000 f882 	bl	8002e5c <_printf_i>
 8002d58:	e7e4      	b.n	8002d24 <_vfiprintf_r+0x208>
 8002d5a:	bf00      	nop
 8002d5c:	08003c1c 	.word	0x08003c1c
 8002d60:	08003c3c 	.word	0x08003c3c
 8002d64:	08003bfc 	.word	0x08003bfc
 8002d68:	08003bc9 	.word	0x08003bc9
 8002d6c:	08003bd3 	.word	0x08003bd3
 8002d70:	00000000 	.word	0x00000000
 8002d74:	08002af7 	.word	0x08002af7
 8002d78:	08003bcf 	.word	0x08003bcf

08002d7c <_printf_common>:
 8002d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d80:	4616      	mov	r6, r2
 8002d82:	4699      	mov	r9, r3
 8002d84:	688a      	ldr	r2, [r1, #8]
 8002d86:	690b      	ldr	r3, [r1, #16]
 8002d88:	4607      	mov	r7, r0
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	bfb8      	it	lt
 8002d8e:	4613      	movlt	r3, r2
 8002d90:	6033      	str	r3, [r6, #0]
 8002d92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d96:	460c      	mov	r4, r1
 8002d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d9c:	b10a      	cbz	r2, 8002da2 <_printf_common+0x26>
 8002d9e:	3301      	adds	r3, #1
 8002da0:	6033      	str	r3, [r6, #0]
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	0699      	lsls	r1, r3, #26
 8002da6:	bf42      	ittt	mi
 8002da8:	6833      	ldrmi	r3, [r6, #0]
 8002daa:	3302      	addmi	r3, #2
 8002dac:	6033      	strmi	r3, [r6, #0]
 8002dae:	6825      	ldr	r5, [r4, #0]
 8002db0:	f015 0506 	ands.w	r5, r5, #6
 8002db4:	d106      	bne.n	8002dc4 <_printf_common+0x48>
 8002db6:	f104 0a19 	add.w	sl, r4, #25
 8002dba:	68e3      	ldr	r3, [r4, #12]
 8002dbc:	6832      	ldr	r2, [r6, #0]
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	42ab      	cmp	r3, r5
 8002dc2:	dc28      	bgt.n	8002e16 <_printf_common+0x9a>
 8002dc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002dc8:	1e13      	subs	r3, r2, #0
 8002dca:	6822      	ldr	r2, [r4, #0]
 8002dcc:	bf18      	it	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	0692      	lsls	r2, r2, #26
 8002dd2:	d42d      	bmi.n	8002e30 <_printf_common+0xb4>
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	4638      	mov	r0, r7
 8002dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ddc:	47c0      	blx	r8
 8002dde:	3001      	adds	r0, #1
 8002de0:	d020      	beq.n	8002e24 <_printf_common+0xa8>
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	68e5      	ldr	r5, [r4, #12]
 8002de6:	f003 0306 	and.w	r3, r3, #6
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	bf18      	it	ne
 8002dee:	2500      	movne	r5, #0
 8002df0:	6832      	ldr	r2, [r6, #0]
 8002df2:	f04f 0600 	mov.w	r6, #0
 8002df6:	68a3      	ldr	r3, [r4, #8]
 8002df8:	bf08      	it	eq
 8002dfa:	1aad      	subeq	r5, r5, r2
 8002dfc:	6922      	ldr	r2, [r4, #16]
 8002dfe:	bf08      	it	eq
 8002e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e04:	4293      	cmp	r3, r2
 8002e06:	bfc4      	itt	gt
 8002e08:	1a9b      	subgt	r3, r3, r2
 8002e0a:	18ed      	addgt	r5, r5, r3
 8002e0c:	341a      	adds	r4, #26
 8002e0e:	42b5      	cmp	r5, r6
 8002e10:	d11a      	bne.n	8002e48 <_printf_common+0xcc>
 8002e12:	2000      	movs	r0, #0
 8002e14:	e008      	b.n	8002e28 <_printf_common+0xac>
 8002e16:	2301      	movs	r3, #1
 8002e18:	4652      	mov	r2, sl
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	4638      	mov	r0, r7
 8002e1e:	47c0      	blx	r8
 8002e20:	3001      	adds	r0, #1
 8002e22:	d103      	bne.n	8002e2c <_printf_common+0xb0>
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e2c:	3501      	adds	r5, #1
 8002e2e:	e7c4      	b.n	8002dba <_printf_common+0x3e>
 8002e30:	2030      	movs	r0, #48	; 0x30
 8002e32:	18e1      	adds	r1, r4, r3
 8002e34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e3e:	4422      	add	r2, r4
 8002e40:	3302      	adds	r3, #2
 8002e42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e46:	e7c5      	b.n	8002dd4 <_printf_common+0x58>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	4622      	mov	r2, r4
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	4638      	mov	r0, r7
 8002e50:	47c0      	blx	r8
 8002e52:	3001      	adds	r0, #1
 8002e54:	d0e6      	beq.n	8002e24 <_printf_common+0xa8>
 8002e56:	3601      	adds	r6, #1
 8002e58:	e7d9      	b.n	8002e0e <_printf_common+0x92>
	...

08002e5c <_printf_i>:
 8002e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e60:	460c      	mov	r4, r1
 8002e62:	7e27      	ldrb	r7, [r4, #24]
 8002e64:	4691      	mov	r9, r2
 8002e66:	2f78      	cmp	r7, #120	; 0x78
 8002e68:	4680      	mov	r8, r0
 8002e6a:	469a      	mov	sl, r3
 8002e6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e72:	d807      	bhi.n	8002e84 <_printf_i+0x28>
 8002e74:	2f62      	cmp	r7, #98	; 0x62
 8002e76:	d80a      	bhi.n	8002e8e <_printf_i+0x32>
 8002e78:	2f00      	cmp	r7, #0
 8002e7a:	f000 80d9 	beq.w	8003030 <_printf_i+0x1d4>
 8002e7e:	2f58      	cmp	r7, #88	; 0x58
 8002e80:	f000 80a4 	beq.w	8002fcc <_printf_i+0x170>
 8002e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e8c:	e03a      	b.n	8002f04 <_printf_i+0xa8>
 8002e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e92:	2b15      	cmp	r3, #21
 8002e94:	d8f6      	bhi.n	8002e84 <_printf_i+0x28>
 8002e96:	a001      	add	r0, pc, #4	; (adr r0, 8002e9c <_printf_i+0x40>)
 8002e98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002e9c:	08002ef5 	.word	0x08002ef5
 8002ea0:	08002f09 	.word	0x08002f09
 8002ea4:	08002e85 	.word	0x08002e85
 8002ea8:	08002e85 	.word	0x08002e85
 8002eac:	08002e85 	.word	0x08002e85
 8002eb0:	08002e85 	.word	0x08002e85
 8002eb4:	08002f09 	.word	0x08002f09
 8002eb8:	08002e85 	.word	0x08002e85
 8002ebc:	08002e85 	.word	0x08002e85
 8002ec0:	08002e85 	.word	0x08002e85
 8002ec4:	08002e85 	.word	0x08002e85
 8002ec8:	08003017 	.word	0x08003017
 8002ecc:	08002f39 	.word	0x08002f39
 8002ed0:	08002ff9 	.word	0x08002ff9
 8002ed4:	08002e85 	.word	0x08002e85
 8002ed8:	08002e85 	.word	0x08002e85
 8002edc:	08003039 	.word	0x08003039
 8002ee0:	08002e85 	.word	0x08002e85
 8002ee4:	08002f39 	.word	0x08002f39
 8002ee8:	08002e85 	.word	0x08002e85
 8002eec:	08002e85 	.word	0x08002e85
 8002ef0:	08003001 	.word	0x08003001
 8002ef4:	680b      	ldr	r3, [r1, #0]
 8002ef6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002efa:	1d1a      	adds	r2, r3, #4
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	600a      	str	r2, [r1, #0]
 8002f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0a4      	b.n	8003052 <_printf_i+0x1f6>
 8002f08:	6825      	ldr	r5, [r4, #0]
 8002f0a:	6808      	ldr	r0, [r1, #0]
 8002f0c:	062e      	lsls	r6, r5, #24
 8002f0e:	f100 0304 	add.w	r3, r0, #4
 8002f12:	d50a      	bpl.n	8002f2a <_printf_i+0xce>
 8002f14:	6805      	ldr	r5, [r0, #0]
 8002f16:	600b      	str	r3, [r1, #0]
 8002f18:	2d00      	cmp	r5, #0
 8002f1a:	da03      	bge.n	8002f24 <_printf_i+0xc8>
 8002f1c:	232d      	movs	r3, #45	; 0x2d
 8002f1e:	426d      	negs	r5, r5
 8002f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f24:	230a      	movs	r3, #10
 8002f26:	485e      	ldr	r0, [pc, #376]	; (80030a0 <_printf_i+0x244>)
 8002f28:	e019      	b.n	8002f5e <_printf_i+0x102>
 8002f2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f2e:	6805      	ldr	r5, [r0, #0]
 8002f30:	600b      	str	r3, [r1, #0]
 8002f32:	bf18      	it	ne
 8002f34:	b22d      	sxthne	r5, r5
 8002f36:	e7ef      	b.n	8002f18 <_printf_i+0xbc>
 8002f38:	680b      	ldr	r3, [r1, #0]
 8002f3a:	6825      	ldr	r5, [r4, #0]
 8002f3c:	1d18      	adds	r0, r3, #4
 8002f3e:	6008      	str	r0, [r1, #0]
 8002f40:	0628      	lsls	r0, r5, #24
 8002f42:	d501      	bpl.n	8002f48 <_printf_i+0xec>
 8002f44:	681d      	ldr	r5, [r3, #0]
 8002f46:	e002      	b.n	8002f4e <_printf_i+0xf2>
 8002f48:	0669      	lsls	r1, r5, #25
 8002f4a:	d5fb      	bpl.n	8002f44 <_printf_i+0xe8>
 8002f4c:	881d      	ldrh	r5, [r3, #0]
 8002f4e:	2f6f      	cmp	r7, #111	; 0x6f
 8002f50:	bf0c      	ite	eq
 8002f52:	2308      	moveq	r3, #8
 8002f54:	230a      	movne	r3, #10
 8002f56:	4852      	ldr	r0, [pc, #328]	; (80030a0 <_printf_i+0x244>)
 8002f58:	2100      	movs	r1, #0
 8002f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f5e:	6866      	ldr	r6, [r4, #4]
 8002f60:	2e00      	cmp	r6, #0
 8002f62:	bfa8      	it	ge
 8002f64:	6821      	ldrge	r1, [r4, #0]
 8002f66:	60a6      	str	r6, [r4, #8]
 8002f68:	bfa4      	itt	ge
 8002f6a:	f021 0104 	bicge.w	r1, r1, #4
 8002f6e:	6021      	strge	r1, [r4, #0]
 8002f70:	b90d      	cbnz	r5, 8002f76 <_printf_i+0x11a>
 8002f72:	2e00      	cmp	r6, #0
 8002f74:	d04d      	beq.n	8003012 <_printf_i+0x1b6>
 8002f76:	4616      	mov	r6, r2
 8002f78:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f7c:	fb03 5711 	mls	r7, r3, r1, r5
 8002f80:	5dc7      	ldrb	r7, [r0, r7]
 8002f82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f86:	462f      	mov	r7, r5
 8002f88:	42bb      	cmp	r3, r7
 8002f8a:	460d      	mov	r5, r1
 8002f8c:	d9f4      	bls.n	8002f78 <_printf_i+0x11c>
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d10b      	bne.n	8002faa <_printf_i+0x14e>
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	07df      	lsls	r7, r3, #31
 8002f96:	d508      	bpl.n	8002faa <_printf_i+0x14e>
 8002f98:	6923      	ldr	r3, [r4, #16]
 8002f9a:	6861      	ldr	r1, [r4, #4]
 8002f9c:	4299      	cmp	r1, r3
 8002f9e:	bfde      	ittt	le
 8002fa0:	2330      	movle	r3, #48	; 0x30
 8002fa2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fa6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002faa:	1b92      	subs	r2, r2, r6
 8002fac:	6122      	str	r2, [r4, #16]
 8002fae:	464b      	mov	r3, r9
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	4640      	mov	r0, r8
 8002fb4:	f8cd a000 	str.w	sl, [sp]
 8002fb8:	aa03      	add	r2, sp, #12
 8002fba:	f7ff fedf 	bl	8002d7c <_printf_common>
 8002fbe:	3001      	adds	r0, #1
 8002fc0:	d14c      	bne.n	800305c <_printf_i+0x200>
 8002fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc6:	b004      	add	sp, #16
 8002fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fcc:	4834      	ldr	r0, [pc, #208]	; (80030a0 <_printf_i+0x244>)
 8002fce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002fd2:	680e      	ldr	r6, [r1, #0]
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8002fda:	061f      	lsls	r7, r3, #24
 8002fdc:	600e      	str	r6, [r1, #0]
 8002fde:	d514      	bpl.n	800300a <_printf_i+0x1ae>
 8002fe0:	07d9      	lsls	r1, r3, #31
 8002fe2:	bf44      	itt	mi
 8002fe4:	f043 0320 	orrmi.w	r3, r3, #32
 8002fe8:	6023      	strmi	r3, [r4, #0]
 8002fea:	b91d      	cbnz	r5, 8002ff4 <_printf_i+0x198>
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	f023 0320 	bic.w	r3, r3, #32
 8002ff2:	6023      	str	r3, [r4, #0]
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	e7af      	b.n	8002f58 <_printf_i+0xfc>
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	f043 0320 	orr.w	r3, r3, #32
 8002ffe:	6023      	str	r3, [r4, #0]
 8003000:	2378      	movs	r3, #120	; 0x78
 8003002:	4828      	ldr	r0, [pc, #160]	; (80030a4 <_printf_i+0x248>)
 8003004:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003008:	e7e3      	b.n	8002fd2 <_printf_i+0x176>
 800300a:	065e      	lsls	r6, r3, #25
 800300c:	bf48      	it	mi
 800300e:	b2ad      	uxthmi	r5, r5
 8003010:	e7e6      	b.n	8002fe0 <_printf_i+0x184>
 8003012:	4616      	mov	r6, r2
 8003014:	e7bb      	b.n	8002f8e <_printf_i+0x132>
 8003016:	680b      	ldr	r3, [r1, #0]
 8003018:	6826      	ldr	r6, [r4, #0]
 800301a:	1d1d      	adds	r5, r3, #4
 800301c:	6960      	ldr	r0, [r4, #20]
 800301e:	600d      	str	r5, [r1, #0]
 8003020:	0635      	lsls	r5, r6, #24
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	d501      	bpl.n	800302a <_printf_i+0x1ce>
 8003026:	6018      	str	r0, [r3, #0]
 8003028:	e002      	b.n	8003030 <_printf_i+0x1d4>
 800302a:	0671      	lsls	r1, r6, #25
 800302c:	d5fb      	bpl.n	8003026 <_printf_i+0x1ca>
 800302e:	8018      	strh	r0, [r3, #0]
 8003030:	2300      	movs	r3, #0
 8003032:	4616      	mov	r6, r2
 8003034:	6123      	str	r3, [r4, #16]
 8003036:	e7ba      	b.n	8002fae <_printf_i+0x152>
 8003038:	680b      	ldr	r3, [r1, #0]
 800303a:	1d1a      	adds	r2, r3, #4
 800303c:	600a      	str	r2, [r1, #0]
 800303e:	681e      	ldr	r6, [r3, #0]
 8003040:	2100      	movs	r1, #0
 8003042:	4630      	mov	r0, r6
 8003044:	6862      	ldr	r2, [r4, #4]
 8003046:	f000 fb25 	bl	8003694 <memchr>
 800304a:	b108      	cbz	r0, 8003050 <_printf_i+0x1f4>
 800304c:	1b80      	subs	r0, r0, r6
 800304e:	6060      	str	r0, [r4, #4]
 8003050:	6863      	ldr	r3, [r4, #4]
 8003052:	6123      	str	r3, [r4, #16]
 8003054:	2300      	movs	r3, #0
 8003056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800305a:	e7a8      	b.n	8002fae <_printf_i+0x152>
 800305c:	4632      	mov	r2, r6
 800305e:	4649      	mov	r1, r9
 8003060:	4640      	mov	r0, r8
 8003062:	6923      	ldr	r3, [r4, #16]
 8003064:	47d0      	blx	sl
 8003066:	3001      	adds	r0, #1
 8003068:	d0ab      	beq.n	8002fc2 <_printf_i+0x166>
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	079b      	lsls	r3, r3, #30
 800306e:	d413      	bmi.n	8003098 <_printf_i+0x23c>
 8003070:	68e0      	ldr	r0, [r4, #12]
 8003072:	9b03      	ldr	r3, [sp, #12]
 8003074:	4298      	cmp	r0, r3
 8003076:	bfb8      	it	lt
 8003078:	4618      	movlt	r0, r3
 800307a:	e7a4      	b.n	8002fc6 <_printf_i+0x16a>
 800307c:	2301      	movs	r3, #1
 800307e:	4632      	mov	r2, r6
 8003080:	4649      	mov	r1, r9
 8003082:	4640      	mov	r0, r8
 8003084:	47d0      	blx	sl
 8003086:	3001      	adds	r0, #1
 8003088:	d09b      	beq.n	8002fc2 <_printf_i+0x166>
 800308a:	3501      	adds	r5, #1
 800308c:	68e3      	ldr	r3, [r4, #12]
 800308e:	9903      	ldr	r1, [sp, #12]
 8003090:	1a5b      	subs	r3, r3, r1
 8003092:	42ab      	cmp	r3, r5
 8003094:	dcf2      	bgt.n	800307c <_printf_i+0x220>
 8003096:	e7eb      	b.n	8003070 <_printf_i+0x214>
 8003098:	2500      	movs	r5, #0
 800309a:	f104 0619 	add.w	r6, r4, #25
 800309e:	e7f5      	b.n	800308c <_printf_i+0x230>
 80030a0:	08003bda 	.word	0x08003bda
 80030a4:	08003beb 	.word	0x08003beb

080030a8 <_sbrk_r>:
 80030a8:	b538      	push	{r3, r4, r5, lr}
 80030aa:	2300      	movs	r3, #0
 80030ac:	4d05      	ldr	r5, [pc, #20]	; (80030c4 <_sbrk_r+0x1c>)
 80030ae:	4604      	mov	r4, r0
 80030b0:	4608      	mov	r0, r1
 80030b2:	602b      	str	r3, [r5, #0]
 80030b4:	f7fd fc9c 	bl	80009f0 <_sbrk>
 80030b8:	1c43      	adds	r3, r0, #1
 80030ba:	d102      	bne.n	80030c2 <_sbrk_r+0x1a>
 80030bc:	682b      	ldr	r3, [r5, #0]
 80030be:	b103      	cbz	r3, 80030c2 <_sbrk_r+0x1a>
 80030c0:	6023      	str	r3, [r4, #0]
 80030c2:	bd38      	pop	{r3, r4, r5, pc}
 80030c4:	20000400 	.word	0x20000400

080030c8 <__swbuf_r>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	460e      	mov	r6, r1
 80030cc:	4614      	mov	r4, r2
 80030ce:	4605      	mov	r5, r0
 80030d0:	b118      	cbz	r0, 80030da <__swbuf_r+0x12>
 80030d2:	6983      	ldr	r3, [r0, #24]
 80030d4:	b90b      	cbnz	r3, 80030da <__swbuf_r+0x12>
 80030d6:	f000 f9d9 	bl	800348c <__sinit>
 80030da:	4b21      	ldr	r3, [pc, #132]	; (8003160 <__swbuf_r+0x98>)
 80030dc:	429c      	cmp	r4, r3
 80030de:	d12b      	bne.n	8003138 <__swbuf_r+0x70>
 80030e0:	686c      	ldr	r4, [r5, #4]
 80030e2:	69a3      	ldr	r3, [r4, #24]
 80030e4:	60a3      	str	r3, [r4, #8]
 80030e6:	89a3      	ldrh	r3, [r4, #12]
 80030e8:	071a      	lsls	r2, r3, #28
 80030ea:	d52f      	bpl.n	800314c <__swbuf_r+0x84>
 80030ec:	6923      	ldr	r3, [r4, #16]
 80030ee:	b36b      	cbz	r3, 800314c <__swbuf_r+0x84>
 80030f0:	6923      	ldr	r3, [r4, #16]
 80030f2:	6820      	ldr	r0, [r4, #0]
 80030f4:	b2f6      	uxtb	r6, r6
 80030f6:	1ac0      	subs	r0, r0, r3
 80030f8:	6963      	ldr	r3, [r4, #20]
 80030fa:	4637      	mov	r7, r6
 80030fc:	4283      	cmp	r3, r0
 80030fe:	dc04      	bgt.n	800310a <__swbuf_r+0x42>
 8003100:	4621      	mov	r1, r4
 8003102:	4628      	mov	r0, r5
 8003104:	f000 f92e 	bl	8003364 <_fflush_r>
 8003108:	bb30      	cbnz	r0, 8003158 <__swbuf_r+0x90>
 800310a:	68a3      	ldr	r3, [r4, #8]
 800310c:	3001      	adds	r0, #1
 800310e:	3b01      	subs	r3, #1
 8003110:	60a3      	str	r3, [r4, #8]
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	6022      	str	r2, [r4, #0]
 8003118:	701e      	strb	r6, [r3, #0]
 800311a:	6963      	ldr	r3, [r4, #20]
 800311c:	4283      	cmp	r3, r0
 800311e:	d004      	beq.n	800312a <__swbuf_r+0x62>
 8003120:	89a3      	ldrh	r3, [r4, #12]
 8003122:	07db      	lsls	r3, r3, #31
 8003124:	d506      	bpl.n	8003134 <__swbuf_r+0x6c>
 8003126:	2e0a      	cmp	r6, #10
 8003128:	d104      	bne.n	8003134 <__swbuf_r+0x6c>
 800312a:	4621      	mov	r1, r4
 800312c:	4628      	mov	r0, r5
 800312e:	f000 f919 	bl	8003364 <_fflush_r>
 8003132:	b988      	cbnz	r0, 8003158 <__swbuf_r+0x90>
 8003134:	4638      	mov	r0, r7
 8003136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <__swbuf_r+0x9c>)
 800313a:	429c      	cmp	r4, r3
 800313c:	d101      	bne.n	8003142 <__swbuf_r+0x7a>
 800313e:	68ac      	ldr	r4, [r5, #8]
 8003140:	e7cf      	b.n	80030e2 <__swbuf_r+0x1a>
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <__swbuf_r+0xa0>)
 8003144:	429c      	cmp	r4, r3
 8003146:	bf08      	it	eq
 8003148:	68ec      	ldreq	r4, [r5, #12]
 800314a:	e7ca      	b.n	80030e2 <__swbuf_r+0x1a>
 800314c:	4621      	mov	r1, r4
 800314e:	4628      	mov	r0, r5
 8003150:	f000 f80c 	bl	800316c <__swsetup_r>
 8003154:	2800      	cmp	r0, #0
 8003156:	d0cb      	beq.n	80030f0 <__swbuf_r+0x28>
 8003158:	f04f 37ff 	mov.w	r7, #4294967295
 800315c:	e7ea      	b.n	8003134 <__swbuf_r+0x6c>
 800315e:	bf00      	nop
 8003160:	08003c1c 	.word	0x08003c1c
 8003164:	08003c3c 	.word	0x08003c3c
 8003168:	08003bfc 	.word	0x08003bfc

0800316c <__swsetup_r>:
 800316c:	4b32      	ldr	r3, [pc, #200]	; (8003238 <__swsetup_r+0xcc>)
 800316e:	b570      	push	{r4, r5, r6, lr}
 8003170:	681d      	ldr	r5, [r3, #0]
 8003172:	4606      	mov	r6, r0
 8003174:	460c      	mov	r4, r1
 8003176:	b125      	cbz	r5, 8003182 <__swsetup_r+0x16>
 8003178:	69ab      	ldr	r3, [r5, #24]
 800317a:	b913      	cbnz	r3, 8003182 <__swsetup_r+0x16>
 800317c:	4628      	mov	r0, r5
 800317e:	f000 f985 	bl	800348c <__sinit>
 8003182:	4b2e      	ldr	r3, [pc, #184]	; (800323c <__swsetup_r+0xd0>)
 8003184:	429c      	cmp	r4, r3
 8003186:	d10f      	bne.n	80031a8 <__swsetup_r+0x3c>
 8003188:	686c      	ldr	r4, [r5, #4]
 800318a:	89a3      	ldrh	r3, [r4, #12]
 800318c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003190:	0719      	lsls	r1, r3, #28
 8003192:	d42c      	bmi.n	80031ee <__swsetup_r+0x82>
 8003194:	06dd      	lsls	r5, r3, #27
 8003196:	d411      	bmi.n	80031bc <__swsetup_r+0x50>
 8003198:	2309      	movs	r3, #9
 800319a:	6033      	str	r3, [r6, #0]
 800319c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	81a3      	strh	r3, [r4, #12]
 80031a6:	e03e      	b.n	8003226 <__swsetup_r+0xba>
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <__swsetup_r+0xd4>)
 80031aa:	429c      	cmp	r4, r3
 80031ac:	d101      	bne.n	80031b2 <__swsetup_r+0x46>
 80031ae:	68ac      	ldr	r4, [r5, #8]
 80031b0:	e7eb      	b.n	800318a <__swsetup_r+0x1e>
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <__swsetup_r+0xd8>)
 80031b4:	429c      	cmp	r4, r3
 80031b6:	bf08      	it	eq
 80031b8:	68ec      	ldreq	r4, [r5, #12]
 80031ba:	e7e6      	b.n	800318a <__swsetup_r+0x1e>
 80031bc:	0758      	lsls	r0, r3, #29
 80031be:	d512      	bpl.n	80031e6 <__swsetup_r+0x7a>
 80031c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031c2:	b141      	cbz	r1, 80031d6 <__swsetup_r+0x6a>
 80031c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031c8:	4299      	cmp	r1, r3
 80031ca:	d002      	beq.n	80031d2 <__swsetup_r+0x66>
 80031cc:	4630      	mov	r0, r6
 80031ce:	f7ff fa7b 	bl	80026c8 <_free_r>
 80031d2:	2300      	movs	r3, #0
 80031d4:	6363      	str	r3, [r4, #52]	; 0x34
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031dc:	81a3      	strh	r3, [r4, #12]
 80031de:	2300      	movs	r3, #0
 80031e0:	6063      	str	r3, [r4, #4]
 80031e2:	6923      	ldr	r3, [r4, #16]
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	f043 0308 	orr.w	r3, r3, #8
 80031ec:	81a3      	strh	r3, [r4, #12]
 80031ee:	6923      	ldr	r3, [r4, #16]
 80031f0:	b94b      	cbnz	r3, 8003206 <__swsetup_r+0x9a>
 80031f2:	89a3      	ldrh	r3, [r4, #12]
 80031f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fc:	d003      	beq.n	8003206 <__swsetup_r+0x9a>
 80031fe:	4621      	mov	r1, r4
 8003200:	4630      	mov	r0, r6
 8003202:	f000 fa07 	bl	8003614 <__smakebuf_r>
 8003206:	89a0      	ldrh	r0, [r4, #12]
 8003208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800320c:	f010 0301 	ands.w	r3, r0, #1
 8003210:	d00a      	beq.n	8003228 <__swsetup_r+0xbc>
 8003212:	2300      	movs	r3, #0
 8003214:	60a3      	str	r3, [r4, #8]
 8003216:	6963      	ldr	r3, [r4, #20]
 8003218:	425b      	negs	r3, r3
 800321a:	61a3      	str	r3, [r4, #24]
 800321c:	6923      	ldr	r3, [r4, #16]
 800321e:	b943      	cbnz	r3, 8003232 <__swsetup_r+0xc6>
 8003220:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003224:	d1ba      	bne.n	800319c <__swsetup_r+0x30>
 8003226:	bd70      	pop	{r4, r5, r6, pc}
 8003228:	0781      	lsls	r1, r0, #30
 800322a:	bf58      	it	pl
 800322c:	6963      	ldrpl	r3, [r4, #20]
 800322e:	60a3      	str	r3, [r4, #8]
 8003230:	e7f4      	b.n	800321c <__swsetup_r+0xb0>
 8003232:	2000      	movs	r0, #0
 8003234:	e7f7      	b.n	8003226 <__swsetup_r+0xba>
 8003236:	bf00      	nop
 8003238:	20000010 	.word	0x20000010
 800323c:	08003c1c 	.word	0x08003c1c
 8003240:	08003c3c 	.word	0x08003c3c
 8003244:	08003bfc 	.word	0x08003bfc

08003248 <abort>:
 8003248:	2006      	movs	r0, #6
 800324a:	b508      	push	{r3, lr}
 800324c:	f000 fab2 	bl	80037b4 <raise>
 8003250:	2001      	movs	r0, #1
 8003252:	f7fd fb5a 	bl	800090a <_exit>
	...

08003258 <__sflush_r>:
 8003258:	898a      	ldrh	r2, [r1, #12]
 800325a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800325e:	4605      	mov	r5, r0
 8003260:	0710      	lsls	r0, r2, #28
 8003262:	460c      	mov	r4, r1
 8003264:	d458      	bmi.n	8003318 <__sflush_r+0xc0>
 8003266:	684b      	ldr	r3, [r1, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	dc05      	bgt.n	8003278 <__sflush_r+0x20>
 800326c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	dc02      	bgt.n	8003278 <__sflush_r+0x20>
 8003272:	2000      	movs	r0, #0
 8003274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800327a:	2e00      	cmp	r6, #0
 800327c:	d0f9      	beq.n	8003272 <__sflush_r+0x1a>
 800327e:	2300      	movs	r3, #0
 8003280:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003284:	682f      	ldr	r7, [r5, #0]
 8003286:	602b      	str	r3, [r5, #0]
 8003288:	d032      	beq.n	80032f0 <__sflush_r+0x98>
 800328a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800328c:	89a3      	ldrh	r3, [r4, #12]
 800328e:	075a      	lsls	r2, r3, #29
 8003290:	d505      	bpl.n	800329e <__sflush_r+0x46>
 8003292:	6863      	ldr	r3, [r4, #4]
 8003294:	1ac0      	subs	r0, r0, r3
 8003296:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003298:	b10b      	cbz	r3, 800329e <__sflush_r+0x46>
 800329a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800329c:	1ac0      	subs	r0, r0, r3
 800329e:	2300      	movs	r3, #0
 80032a0:	4602      	mov	r2, r0
 80032a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032a4:	4628      	mov	r0, r5
 80032a6:	6a21      	ldr	r1, [r4, #32]
 80032a8:	47b0      	blx	r6
 80032aa:	1c43      	adds	r3, r0, #1
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	d106      	bne.n	80032be <__sflush_r+0x66>
 80032b0:	6829      	ldr	r1, [r5, #0]
 80032b2:	291d      	cmp	r1, #29
 80032b4:	d82c      	bhi.n	8003310 <__sflush_r+0xb8>
 80032b6:	4a2a      	ldr	r2, [pc, #168]	; (8003360 <__sflush_r+0x108>)
 80032b8:	40ca      	lsrs	r2, r1
 80032ba:	07d6      	lsls	r6, r2, #31
 80032bc:	d528      	bpl.n	8003310 <__sflush_r+0xb8>
 80032be:	2200      	movs	r2, #0
 80032c0:	6062      	str	r2, [r4, #4]
 80032c2:	6922      	ldr	r2, [r4, #16]
 80032c4:	04d9      	lsls	r1, r3, #19
 80032c6:	6022      	str	r2, [r4, #0]
 80032c8:	d504      	bpl.n	80032d4 <__sflush_r+0x7c>
 80032ca:	1c42      	adds	r2, r0, #1
 80032cc:	d101      	bne.n	80032d2 <__sflush_r+0x7a>
 80032ce:	682b      	ldr	r3, [r5, #0]
 80032d0:	b903      	cbnz	r3, 80032d4 <__sflush_r+0x7c>
 80032d2:	6560      	str	r0, [r4, #84]	; 0x54
 80032d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032d6:	602f      	str	r7, [r5, #0]
 80032d8:	2900      	cmp	r1, #0
 80032da:	d0ca      	beq.n	8003272 <__sflush_r+0x1a>
 80032dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032e0:	4299      	cmp	r1, r3
 80032e2:	d002      	beq.n	80032ea <__sflush_r+0x92>
 80032e4:	4628      	mov	r0, r5
 80032e6:	f7ff f9ef 	bl	80026c8 <_free_r>
 80032ea:	2000      	movs	r0, #0
 80032ec:	6360      	str	r0, [r4, #52]	; 0x34
 80032ee:	e7c1      	b.n	8003274 <__sflush_r+0x1c>
 80032f0:	6a21      	ldr	r1, [r4, #32]
 80032f2:	2301      	movs	r3, #1
 80032f4:	4628      	mov	r0, r5
 80032f6:	47b0      	blx	r6
 80032f8:	1c41      	adds	r1, r0, #1
 80032fa:	d1c7      	bne.n	800328c <__sflush_r+0x34>
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0c4      	beq.n	800328c <__sflush_r+0x34>
 8003302:	2b1d      	cmp	r3, #29
 8003304:	d001      	beq.n	800330a <__sflush_r+0xb2>
 8003306:	2b16      	cmp	r3, #22
 8003308:	d101      	bne.n	800330e <__sflush_r+0xb6>
 800330a:	602f      	str	r7, [r5, #0]
 800330c:	e7b1      	b.n	8003272 <__sflush_r+0x1a>
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003314:	81a3      	strh	r3, [r4, #12]
 8003316:	e7ad      	b.n	8003274 <__sflush_r+0x1c>
 8003318:	690f      	ldr	r7, [r1, #16]
 800331a:	2f00      	cmp	r7, #0
 800331c:	d0a9      	beq.n	8003272 <__sflush_r+0x1a>
 800331e:	0793      	lsls	r3, r2, #30
 8003320:	bf18      	it	ne
 8003322:	2300      	movne	r3, #0
 8003324:	680e      	ldr	r6, [r1, #0]
 8003326:	bf08      	it	eq
 8003328:	694b      	ldreq	r3, [r1, #20]
 800332a:	eba6 0807 	sub.w	r8, r6, r7
 800332e:	600f      	str	r7, [r1, #0]
 8003330:	608b      	str	r3, [r1, #8]
 8003332:	f1b8 0f00 	cmp.w	r8, #0
 8003336:	dd9c      	ble.n	8003272 <__sflush_r+0x1a>
 8003338:	4643      	mov	r3, r8
 800333a:	463a      	mov	r2, r7
 800333c:	4628      	mov	r0, r5
 800333e:	6a21      	ldr	r1, [r4, #32]
 8003340:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003342:	47b0      	blx	r6
 8003344:	2800      	cmp	r0, #0
 8003346:	dc06      	bgt.n	8003356 <__sflush_r+0xfe>
 8003348:	89a3      	ldrh	r3, [r4, #12]
 800334a:	f04f 30ff 	mov.w	r0, #4294967295
 800334e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003352:	81a3      	strh	r3, [r4, #12]
 8003354:	e78e      	b.n	8003274 <__sflush_r+0x1c>
 8003356:	4407      	add	r7, r0
 8003358:	eba8 0800 	sub.w	r8, r8, r0
 800335c:	e7e9      	b.n	8003332 <__sflush_r+0xda>
 800335e:	bf00      	nop
 8003360:	20400001 	.word	0x20400001

08003364 <_fflush_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	690b      	ldr	r3, [r1, #16]
 8003368:	4605      	mov	r5, r0
 800336a:	460c      	mov	r4, r1
 800336c:	b913      	cbnz	r3, 8003374 <_fflush_r+0x10>
 800336e:	2500      	movs	r5, #0
 8003370:	4628      	mov	r0, r5
 8003372:	bd38      	pop	{r3, r4, r5, pc}
 8003374:	b118      	cbz	r0, 800337e <_fflush_r+0x1a>
 8003376:	6983      	ldr	r3, [r0, #24]
 8003378:	b90b      	cbnz	r3, 800337e <_fflush_r+0x1a>
 800337a:	f000 f887 	bl	800348c <__sinit>
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <_fflush_r+0x6c>)
 8003380:	429c      	cmp	r4, r3
 8003382:	d11b      	bne.n	80033bc <_fflush_r+0x58>
 8003384:	686c      	ldr	r4, [r5, #4]
 8003386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0ef      	beq.n	800336e <_fflush_r+0xa>
 800338e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003390:	07d0      	lsls	r0, r2, #31
 8003392:	d404      	bmi.n	800339e <_fflush_r+0x3a>
 8003394:	0599      	lsls	r1, r3, #22
 8003396:	d402      	bmi.n	800339e <_fflush_r+0x3a>
 8003398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800339a:	f000 f915 	bl	80035c8 <__retarget_lock_acquire_recursive>
 800339e:	4628      	mov	r0, r5
 80033a0:	4621      	mov	r1, r4
 80033a2:	f7ff ff59 	bl	8003258 <__sflush_r>
 80033a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033a8:	4605      	mov	r5, r0
 80033aa:	07da      	lsls	r2, r3, #31
 80033ac:	d4e0      	bmi.n	8003370 <_fflush_r+0xc>
 80033ae:	89a3      	ldrh	r3, [r4, #12]
 80033b0:	059b      	lsls	r3, r3, #22
 80033b2:	d4dd      	bmi.n	8003370 <_fflush_r+0xc>
 80033b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033b6:	f000 f908 	bl	80035ca <__retarget_lock_release_recursive>
 80033ba:	e7d9      	b.n	8003370 <_fflush_r+0xc>
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <_fflush_r+0x70>)
 80033be:	429c      	cmp	r4, r3
 80033c0:	d101      	bne.n	80033c6 <_fflush_r+0x62>
 80033c2:	68ac      	ldr	r4, [r5, #8]
 80033c4:	e7df      	b.n	8003386 <_fflush_r+0x22>
 80033c6:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <_fflush_r+0x74>)
 80033c8:	429c      	cmp	r4, r3
 80033ca:	bf08      	it	eq
 80033cc:	68ec      	ldreq	r4, [r5, #12]
 80033ce:	e7da      	b.n	8003386 <_fflush_r+0x22>
 80033d0:	08003c1c 	.word	0x08003c1c
 80033d4:	08003c3c 	.word	0x08003c3c
 80033d8:	08003bfc 	.word	0x08003bfc

080033dc <std>:
 80033dc:	2300      	movs	r3, #0
 80033de:	b510      	push	{r4, lr}
 80033e0:	4604      	mov	r4, r0
 80033e2:	e9c0 3300 	strd	r3, r3, [r0]
 80033e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033ea:	6083      	str	r3, [r0, #8]
 80033ec:	8181      	strh	r1, [r0, #12]
 80033ee:	6643      	str	r3, [r0, #100]	; 0x64
 80033f0:	81c2      	strh	r2, [r0, #14]
 80033f2:	6183      	str	r3, [r0, #24]
 80033f4:	4619      	mov	r1, r3
 80033f6:	2208      	movs	r2, #8
 80033f8:	305c      	adds	r0, #92	; 0x5c
 80033fa:	f7ff f819 	bl	8002430 <memset>
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <std+0x38>)
 8003400:	6224      	str	r4, [r4, #32]
 8003402:	6263      	str	r3, [r4, #36]	; 0x24
 8003404:	4b04      	ldr	r3, [pc, #16]	; (8003418 <std+0x3c>)
 8003406:	62a3      	str	r3, [r4, #40]	; 0x28
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <std+0x40>)
 800340a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <std+0x44>)
 800340e:	6323      	str	r3, [r4, #48]	; 0x30
 8003410:	bd10      	pop	{r4, pc}
 8003412:	bf00      	nop
 8003414:	080037ed 	.word	0x080037ed
 8003418:	0800380f 	.word	0x0800380f
 800341c:	08003847 	.word	0x08003847
 8003420:	0800386b 	.word	0x0800386b

08003424 <_cleanup_r>:
 8003424:	4901      	ldr	r1, [pc, #4]	; (800342c <_cleanup_r+0x8>)
 8003426:	f000 b8af 	b.w	8003588 <_fwalk_reent>
 800342a:	bf00      	nop
 800342c:	08003365 	.word	0x08003365

08003430 <__sfmoreglue>:
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	2568      	movs	r5, #104	; 0x68
 8003434:	1e4a      	subs	r2, r1, #1
 8003436:	4355      	muls	r5, r2
 8003438:	460e      	mov	r6, r1
 800343a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800343e:	f7ff f98f 	bl	8002760 <_malloc_r>
 8003442:	4604      	mov	r4, r0
 8003444:	b140      	cbz	r0, 8003458 <__sfmoreglue+0x28>
 8003446:	2100      	movs	r1, #0
 8003448:	e9c0 1600 	strd	r1, r6, [r0]
 800344c:	300c      	adds	r0, #12
 800344e:	60a0      	str	r0, [r4, #8]
 8003450:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003454:	f7fe ffec 	bl	8002430 <memset>
 8003458:	4620      	mov	r0, r4
 800345a:	bd70      	pop	{r4, r5, r6, pc}

0800345c <__sfp_lock_acquire>:
 800345c:	4801      	ldr	r0, [pc, #4]	; (8003464 <__sfp_lock_acquire+0x8>)
 800345e:	f000 b8b3 	b.w	80035c8 <__retarget_lock_acquire_recursive>
 8003462:	bf00      	nop
 8003464:	200003fc 	.word	0x200003fc

08003468 <__sfp_lock_release>:
 8003468:	4801      	ldr	r0, [pc, #4]	; (8003470 <__sfp_lock_release+0x8>)
 800346a:	f000 b8ae 	b.w	80035ca <__retarget_lock_release_recursive>
 800346e:	bf00      	nop
 8003470:	200003fc 	.word	0x200003fc

08003474 <__sinit_lock_acquire>:
 8003474:	4801      	ldr	r0, [pc, #4]	; (800347c <__sinit_lock_acquire+0x8>)
 8003476:	f000 b8a7 	b.w	80035c8 <__retarget_lock_acquire_recursive>
 800347a:	bf00      	nop
 800347c:	200003f7 	.word	0x200003f7

08003480 <__sinit_lock_release>:
 8003480:	4801      	ldr	r0, [pc, #4]	; (8003488 <__sinit_lock_release+0x8>)
 8003482:	f000 b8a2 	b.w	80035ca <__retarget_lock_release_recursive>
 8003486:	bf00      	nop
 8003488:	200003f7 	.word	0x200003f7

0800348c <__sinit>:
 800348c:	b510      	push	{r4, lr}
 800348e:	4604      	mov	r4, r0
 8003490:	f7ff fff0 	bl	8003474 <__sinit_lock_acquire>
 8003494:	69a3      	ldr	r3, [r4, #24]
 8003496:	b11b      	cbz	r3, 80034a0 <__sinit+0x14>
 8003498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800349c:	f7ff bff0 	b.w	8003480 <__sinit_lock_release>
 80034a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80034a4:	6523      	str	r3, [r4, #80]	; 0x50
 80034a6:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <__sinit+0x68>)
 80034a8:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <__sinit+0x6c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80034ae:	42a3      	cmp	r3, r4
 80034b0:	bf08      	it	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	4620      	mov	r0, r4
 80034b6:	bf08      	it	eq
 80034b8:	61a3      	streq	r3, [r4, #24]
 80034ba:	f000 f81f 	bl	80034fc <__sfp>
 80034be:	6060      	str	r0, [r4, #4]
 80034c0:	4620      	mov	r0, r4
 80034c2:	f000 f81b 	bl	80034fc <__sfp>
 80034c6:	60a0      	str	r0, [r4, #8]
 80034c8:	4620      	mov	r0, r4
 80034ca:	f000 f817 	bl	80034fc <__sfp>
 80034ce:	2200      	movs	r2, #0
 80034d0:	2104      	movs	r1, #4
 80034d2:	60e0      	str	r0, [r4, #12]
 80034d4:	6860      	ldr	r0, [r4, #4]
 80034d6:	f7ff ff81 	bl	80033dc <std>
 80034da:	2201      	movs	r2, #1
 80034dc:	2109      	movs	r1, #9
 80034de:	68a0      	ldr	r0, [r4, #8]
 80034e0:	f7ff ff7c 	bl	80033dc <std>
 80034e4:	2202      	movs	r2, #2
 80034e6:	2112      	movs	r1, #18
 80034e8:	68e0      	ldr	r0, [r4, #12]
 80034ea:	f7ff ff77 	bl	80033dc <std>
 80034ee:	2301      	movs	r3, #1
 80034f0:	61a3      	str	r3, [r4, #24]
 80034f2:	e7d1      	b.n	8003498 <__sinit+0xc>
 80034f4:	08003a10 	.word	0x08003a10
 80034f8:	08003425 	.word	0x08003425

080034fc <__sfp>:
 80034fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fe:	4607      	mov	r7, r0
 8003500:	f7ff ffac 	bl	800345c <__sfp_lock_acquire>
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <__sfp+0x84>)
 8003506:	681e      	ldr	r6, [r3, #0]
 8003508:	69b3      	ldr	r3, [r6, #24]
 800350a:	b913      	cbnz	r3, 8003512 <__sfp+0x16>
 800350c:	4630      	mov	r0, r6
 800350e:	f7ff ffbd 	bl	800348c <__sinit>
 8003512:	3648      	adds	r6, #72	; 0x48
 8003514:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003518:	3b01      	subs	r3, #1
 800351a:	d503      	bpl.n	8003524 <__sfp+0x28>
 800351c:	6833      	ldr	r3, [r6, #0]
 800351e:	b30b      	cbz	r3, 8003564 <__sfp+0x68>
 8003520:	6836      	ldr	r6, [r6, #0]
 8003522:	e7f7      	b.n	8003514 <__sfp+0x18>
 8003524:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003528:	b9d5      	cbnz	r5, 8003560 <__sfp+0x64>
 800352a:	4b16      	ldr	r3, [pc, #88]	; (8003584 <__sfp+0x88>)
 800352c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003530:	60e3      	str	r3, [r4, #12]
 8003532:	6665      	str	r5, [r4, #100]	; 0x64
 8003534:	f000 f847 	bl	80035c6 <__retarget_lock_init_recursive>
 8003538:	f7ff ff96 	bl	8003468 <__sfp_lock_release>
 800353c:	2208      	movs	r2, #8
 800353e:	4629      	mov	r1, r5
 8003540:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003544:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003548:	6025      	str	r5, [r4, #0]
 800354a:	61a5      	str	r5, [r4, #24]
 800354c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003550:	f7fe ff6e 	bl	8002430 <memset>
 8003554:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003558:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800355c:	4620      	mov	r0, r4
 800355e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003560:	3468      	adds	r4, #104	; 0x68
 8003562:	e7d9      	b.n	8003518 <__sfp+0x1c>
 8003564:	2104      	movs	r1, #4
 8003566:	4638      	mov	r0, r7
 8003568:	f7ff ff62 	bl	8003430 <__sfmoreglue>
 800356c:	4604      	mov	r4, r0
 800356e:	6030      	str	r0, [r6, #0]
 8003570:	2800      	cmp	r0, #0
 8003572:	d1d5      	bne.n	8003520 <__sfp+0x24>
 8003574:	f7ff ff78 	bl	8003468 <__sfp_lock_release>
 8003578:	230c      	movs	r3, #12
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	e7ee      	b.n	800355c <__sfp+0x60>
 800357e:	bf00      	nop
 8003580:	08003a10 	.word	0x08003a10
 8003584:	ffff0001 	.word	0xffff0001

08003588 <_fwalk_reent>:
 8003588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800358c:	4606      	mov	r6, r0
 800358e:	4688      	mov	r8, r1
 8003590:	2700      	movs	r7, #0
 8003592:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003596:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800359a:	f1b9 0901 	subs.w	r9, r9, #1
 800359e:	d505      	bpl.n	80035ac <_fwalk_reent+0x24>
 80035a0:	6824      	ldr	r4, [r4, #0]
 80035a2:	2c00      	cmp	r4, #0
 80035a4:	d1f7      	bne.n	8003596 <_fwalk_reent+0xe>
 80035a6:	4638      	mov	r0, r7
 80035a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ac:	89ab      	ldrh	r3, [r5, #12]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d907      	bls.n	80035c2 <_fwalk_reent+0x3a>
 80035b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035b6:	3301      	adds	r3, #1
 80035b8:	d003      	beq.n	80035c2 <_fwalk_reent+0x3a>
 80035ba:	4629      	mov	r1, r5
 80035bc:	4630      	mov	r0, r6
 80035be:	47c0      	blx	r8
 80035c0:	4307      	orrs	r7, r0
 80035c2:	3568      	adds	r5, #104	; 0x68
 80035c4:	e7e9      	b.n	800359a <_fwalk_reent+0x12>

080035c6 <__retarget_lock_init_recursive>:
 80035c6:	4770      	bx	lr

080035c8 <__retarget_lock_acquire_recursive>:
 80035c8:	4770      	bx	lr

080035ca <__retarget_lock_release_recursive>:
 80035ca:	4770      	bx	lr

080035cc <__swhatbuf_r>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	460e      	mov	r6, r1
 80035d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d4:	4614      	mov	r4, r2
 80035d6:	2900      	cmp	r1, #0
 80035d8:	461d      	mov	r5, r3
 80035da:	b096      	sub	sp, #88	; 0x58
 80035dc:	da07      	bge.n	80035ee <__swhatbuf_r+0x22>
 80035de:	2300      	movs	r3, #0
 80035e0:	602b      	str	r3, [r5, #0]
 80035e2:	89b3      	ldrh	r3, [r6, #12]
 80035e4:	061a      	lsls	r2, r3, #24
 80035e6:	d410      	bmi.n	800360a <__swhatbuf_r+0x3e>
 80035e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ec:	e00e      	b.n	800360c <__swhatbuf_r+0x40>
 80035ee:	466a      	mov	r2, sp
 80035f0:	f000 f962 	bl	80038b8 <_fstat_r>
 80035f4:	2800      	cmp	r0, #0
 80035f6:	dbf2      	blt.n	80035de <__swhatbuf_r+0x12>
 80035f8:	9a01      	ldr	r2, [sp, #4]
 80035fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003602:	425a      	negs	r2, r3
 8003604:	415a      	adcs	r2, r3
 8003606:	602a      	str	r2, [r5, #0]
 8003608:	e7ee      	b.n	80035e8 <__swhatbuf_r+0x1c>
 800360a:	2340      	movs	r3, #64	; 0x40
 800360c:	2000      	movs	r0, #0
 800360e:	6023      	str	r3, [r4, #0]
 8003610:	b016      	add	sp, #88	; 0x58
 8003612:	bd70      	pop	{r4, r5, r6, pc}

08003614 <__smakebuf_r>:
 8003614:	898b      	ldrh	r3, [r1, #12]
 8003616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003618:	079d      	lsls	r5, r3, #30
 800361a:	4606      	mov	r6, r0
 800361c:	460c      	mov	r4, r1
 800361e:	d507      	bpl.n	8003630 <__smakebuf_r+0x1c>
 8003620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	6123      	str	r3, [r4, #16]
 8003628:	2301      	movs	r3, #1
 800362a:	6163      	str	r3, [r4, #20]
 800362c:	b002      	add	sp, #8
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	466a      	mov	r2, sp
 8003632:	ab01      	add	r3, sp, #4
 8003634:	f7ff ffca 	bl	80035cc <__swhatbuf_r>
 8003638:	9900      	ldr	r1, [sp, #0]
 800363a:	4605      	mov	r5, r0
 800363c:	4630      	mov	r0, r6
 800363e:	f7ff f88f 	bl	8002760 <_malloc_r>
 8003642:	b948      	cbnz	r0, 8003658 <__smakebuf_r+0x44>
 8003644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003648:	059a      	lsls	r2, r3, #22
 800364a:	d4ef      	bmi.n	800362c <__smakebuf_r+0x18>
 800364c:	f023 0303 	bic.w	r3, r3, #3
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	81a3      	strh	r3, [r4, #12]
 8003656:	e7e3      	b.n	8003620 <__smakebuf_r+0xc>
 8003658:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <__smakebuf_r+0x7c>)
 800365a:	62b3      	str	r3, [r6, #40]	; 0x28
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	6020      	str	r0, [r4, #0]
 8003660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003664:	81a3      	strh	r3, [r4, #12]
 8003666:	9b00      	ldr	r3, [sp, #0]
 8003668:	6120      	str	r0, [r4, #16]
 800366a:	6163      	str	r3, [r4, #20]
 800366c:	9b01      	ldr	r3, [sp, #4]
 800366e:	b15b      	cbz	r3, 8003688 <__smakebuf_r+0x74>
 8003670:	4630      	mov	r0, r6
 8003672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003676:	f000 f931 	bl	80038dc <_isatty_r>
 800367a:	b128      	cbz	r0, 8003688 <__smakebuf_r+0x74>
 800367c:	89a3      	ldrh	r3, [r4, #12]
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	81a3      	strh	r3, [r4, #12]
 8003688:	89a0      	ldrh	r0, [r4, #12]
 800368a:	4305      	orrs	r5, r0
 800368c:	81a5      	strh	r5, [r4, #12]
 800368e:	e7cd      	b.n	800362c <__smakebuf_r+0x18>
 8003690:	08003425 	.word	0x08003425

08003694 <memchr>:
 8003694:	4603      	mov	r3, r0
 8003696:	b510      	push	{r4, lr}
 8003698:	b2c9      	uxtb	r1, r1
 800369a:	4402      	add	r2, r0
 800369c:	4293      	cmp	r3, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	d101      	bne.n	80036a6 <memchr+0x12>
 80036a2:	2000      	movs	r0, #0
 80036a4:	e003      	b.n	80036ae <memchr+0x1a>
 80036a6:	7804      	ldrb	r4, [r0, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	428c      	cmp	r4, r1
 80036ac:	d1f6      	bne.n	800369c <memchr+0x8>
 80036ae:	bd10      	pop	{r4, pc}

080036b0 <memcpy>:
 80036b0:	440a      	add	r2, r1
 80036b2:	4291      	cmp	r1, r2
 80036b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80036b8:	d100      	bne.n	80036bc <memcpy+0xc>
 80036ba:	4770      	bx	lr
 80036bc:	b510      	push	{r4, lr}
 80036be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036c2:	4291      	cmp	r1, r2
 80036c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036c8:	d1f9      	bne.n	80036be <memcpy+0xe>
 80036ca:	bd10      	pop	{r4, pc}

080036cc <memmove>:
 80036cc:	4288      	cmp	r0, r1
 80036ce:	b510      	push	{r4, lr}
 80036d0:	eb01 0402 	add.w	r4, r1, r2
 80036d4:	d902      	bls.n	80036dc <memmove+0x10>
 80036d6:	4284      	cmp	r4, r0
 80036d8:	4623      	mov	r3, r4
 80036da:	d807      	bhi.n	80036ec <memmove+0x20>
 80036dc:	1e43      	subs	r3, r0, #1
 80036de:	42a1      	cmp	r1, r4
 80036e0:	d008      	beq.n	80036f4 <memmove+0x28>
 80036e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036ea:	e7f8      	b.n	80036de <memmove+0x12>
 80036ec:	4601      	mov	r1, r0
 80036ee:	4402      	add	r2, r0
 80036f0:	428a      	cmp	r2, r1
 80036f2:	d100      	bne.n	80036f6 <memmove+0x2a>
 80036f4:	bd10      	pop	{r4, pc}
 80036f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036fe:	e7f7      	b.n	80036f0 <memmove+0x24>

08003700 <__malloc_lock>:
 8003700:	4801      	ldr	r0, [pc, #4]	; (8003708 <__malloc_lock+0x8>)
 8003702:	f7ff bf61 	b.w	80035c8 <__retarget_lock_acquire_recursive>
 8003706:	bf00      	nop
 8003708:	200003f8 	.word	0x200003f8

0800370c <__malloc_unlock>:
 800370c:	4801      	ldr	r0, [pc, #4]	; (8003714 <__malloc_unlock+0x8>)
 800370e:	f7ff bf5c 	b.w	80035ca <__retarget_lock_release_recursive>
 8003712:	bf00      	nop
 8003714:	200003f8 	.word	0x200003f8

08003718 <_realloc_r>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	4607      	mov	r7, r0
 800371c:	4614      	mov	r4, r2
 800371e:	460e      	mov	r6, r1
 8003720:	b921      	cbnz	r1, 800372c <_realloc_r+0x14>
 8003722:	4611      	mov	r1, r2
 8003724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003728:	f7ff b81a 	b.w	8002760 <_malloc_r>
 800372c:	b922      	cbnz	r2, 8003738 <_realloc_r+0x20>
 800372e:	f7fe ffcb 	bl	80026c8 <_free_r>
 8003732:	4625      	mov	r5, r4
 8003734:	4628      	mov	r0, r5
 8003736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003738:	f000 f8f2 	bl	8003920 <_malloc_usable_size_r>
 800373c:	42a0      	cmp	r0, r4
 800373e:	d20f      	bcs.n	8003760 <_realloc_r+0x48>
 8003740:	4621      	mov	r1, r4
 8003742:	4638      	mov	r0, r7
 8003744:	f7ff f80c 	bl	8002760 <_malloc_r>
 8003748:	4605      	mov	r5, r0
 800374a:	2800      	cmp	r0, #0
 800374c:	d0f2      	beq.n	8003734 <_realloc_r+0x1c>
 800374e:	4631      	mov	r1, r6
 8003750:	4622      	mov	r2, r4
 8003752:	f7ff ffad 	bl	80036b0 <memcpy>
 8003756:	4631      	mov	r1, r6
 8003758:	4638      	mov	r0, r7
 800375a:	f7fe ffb5 	bl	80026c8 <_free_r>
 800375e:	e7e9      	b.n	8003734 <_realloc_r+0x1c>
 8003760:	4635      	mov	r5, r6
 8003762:	e7e7      	b.n	8003734 <_realloc_r+0x1c>

08003764 <_raise_r>:
 8003764:	291f      	cmp	r1, #31
 8003766:	b538      	push	{r3, r4, r5, lr}
 8003768:	4604      	mov	r4, r0
 800376a:	460d      	mov	r5, r1
 800376c:	d904      	bls.n	8003778 <_raise_r+0x14>
 800376e:	2316      	movs	r3, #22
 8003770:	6003      	str	r3, [r0, #0]
 8003772:	f04f 30ff 	mov.w	r0, #4294967295
 8003776:	bd38      	pop	{r3, r4, r5, pc}
 8003778:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800377a:	b112      	cbz	r2, 8003782 <_raise_r+0x1e>
 800377c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003780:	b94b      	cbnz	r3, 8003796 <_raise_r+0x32>
 8003782:	4620      	mov	r0, r4
 8003784:	f000 f830 	bl	80037e8 <_getpid_r>
 8003788:	462a      	mov	r2, r5
 800378a:	4601      	mov	r1, r0
 800378c:	4620      	mov	r0, r4
 800378e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003792:	f000 b817 	b.w	80037c4 <_kill_r>
 8003796:	2b01      	cmp	r3, #1
 8003798:	d00a      	beq.n	80037b0 <_raise_r+0x4c>
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	d103      	bne.n	80037a6 <_raise_r+0x42>
 800379e:	2316      	movs	r3, #22
 80037a0:	6003      	str	r3, [r0, #0]
 80037a2:	2001      	movs	r0, #1
 80037a4:	e7e7      	b.n	8003776 <_raise_r+0x12>
 80037a6:	2400      	movs	r4, #0
 80037a8:	4628      	mov	r0, r5
 80037aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80037ae:	4798      	blx	r3
 80037b0:	2000      	movs	r0, #0
 80037b2:	e7e0      	b.n	8003776 <_raise_r+0x12>

080037b4 <raise>:
 80037b4:	4b02      	ldr	r3, [pc, #8]	; (80037c0 <raise+0xc>)
 80037b6:	4601      	mov	r1, r0
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	f7ff bfd3 	b.w	8003764 <_raise_r>
 80037be:	bf00      	nop
 80037c0:	20000010 	.word	0x20000010

080037c4 <_kill_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	2300      	movs	r3, #0
 80037c8:	4d06      	ldr	r5, [pc, #24]	; (80037e4 <_kill_r+0x20>)
 80037ca:	4604      	mov	r4, r0
 80037cc:	4608      	mov	r0, r1
 80037ce:	4611      	mov	r1, r2
 80037d0:	602b      	str	r3, [r5, #0]
 80037d2:	f7fd f88a 	bl	80008ea <_kill>
 80037d6:	1c43      	adds	r3, r0, #1
 80037d8:	d102      	bne.n	80037e0 <_kill_r+0x1c>
 80037da:	682b      	ldr	r3, [r5, #0]
 80037dc:	b103      	cbz	r3, 80037e0 <_kill_r+0x1c>
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
 80037e2:	bf00      	nop
 80037e4:	20000400 	.word	0x20000400

080037e8 <_getpid_r>:
 80037e8:	f7fd b878 	b.w	80008dc <_getpid>

080037ec <__sread>:
 80037ec:	b510      	push	{r4, lr}
 80037ee:	460c      	mov	r4, r1
 80037f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f4:	f000 f89c 	bl	8003930 <_read_r>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	bfab      	itete	ge
 80037fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003800:	181b      	addge	r3, r3, r0
 8003802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003806:	bfac      	ite	ge
 8003808:	6563      	strge	r3, [r4, #84]	; 0x54
 800380a:	81a3      	strhlt	r3, [r4, #12]
 800380c:	bd10      	pop	{r4, pc}

0800380e <__swrite>:
 800380e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003812:	461f      	mov	r7, r3
 8003814:	898b      	ldrh	r3, [r1, #12]
 8003816:	4605      	mov	r5, r0
 8003818:	05db      	lsls	r3, r3, #23
 800381a:	460c      	mov	r4, r1
 800381c:	4616      	mov	r6, r2
 800381e:	d505      	bpl.n	800382c <__swrite+0x1e>
 8003820:	2302      	movs	r3, #2
 8003822:	2200      	movs	r2, #0
 8003824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003828:	f000 f868 	bl	80038fc <_lseek_r>
 800382c:	89a3      	ldrh	r3, [r4, #12]
 800382e:	4632      	mov	r2, r6
 8003830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003834:	81a3      	strh	r3, [r4, #12]
 8003836:	4628      	mov	r0, r5
 8003838:	463b      	mov	r3, r7
 800383a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800383e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003842:	f000 b817 	b.w	8003874 <_write_r>

08003846 <__sseek>:
 8003846:	b510      	push	{r4, lr}
 8003848:	460c      	mov	r4, r1
 800384a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800384e:	f000 f855 	bl	80038fc <_lseek_r>
 8003852:	1c43      	adds	r3, r0, #1
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	bf15      	itete	ne
 8003858:	6560      	strne	r0, [r4, #84]	; 0x54
 800385a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800385e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003862:	81a3      	strheq	r3, [r4, #12]
 8003864:	bf18      	it	ne
 8003866:	81a3      	strhne	r3, [r4, #12]
 8003868:	bd10      	pop	{r4, pc}

0800386a <__sclose>:
 800386a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800386e:	f000 b813 	b.w	8003898 <_close_r>
	...

08003874 <_write_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4604      	mov	r4, r0
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	2200      	movs	r2, #0
 800387e:	4d05      	ldr	r5, [pc, #20]	; (8003894 <_write_r+0x20>)
 8003880:	602a      	str	r2, [r5, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	f7fd f868 	bl	8000958 <_write>
 8003888:	1c43      	adds	r3, r0, #1
 800388a:	d102      	bne.n	8003892 <_write_r+0x1e>
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	b103      	cbz	r3, 8003892 <_write_r+0x1e>
 8003890:	6023      	str	r3, [r4, #0]
 8003892:	bd38      	pop	{r3, r4, r5, pc}
 8003894:	20000400 	.word	0x20000400

08003898 <_close_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	2300      	movs	r3, #0
 800389c:	4d05      	ldr	r5, [pc, #20]	; (80038b4 <_close_r+0x1c>)
 800389e:	4604      	mov	r4, r0
 80038a0:	4608      	mov	r0, r1
 80038a2:	602b      	str	r3, [r5, #0]
 80038a4:	f7fd f874 	bl	8000990 <_close>
 80038a8:	1c43      	adds	r3, r0, #1
 80038aa:	d102      	bne.n	80038b2 <_close_r+0x1a>
 80038ac:	682b      	ldr	r3, [r5, #0]
 80038ae:	b103      	cbz	r3, 80038b2 <_close_r+0x1a>
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	bd38      	pop	{r3, r4, r5, pc}
 80038b4:	20000400 	.word	0x20000400

080038b8 <_fstat_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	2300      	movs	r3, #0
 80038bc:	4d06      	ldr	r5, [pc, #24]	; (80038d8 <_fstat_r+0x20>)
 80038be:	4604      	mov	r4, r0
 80038c0:	4608      	mov	r0, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	602b      	str	r3, [r5, #0]
 80038c6:	f7fd f86e 	bl	80009a6 <_fstat>
 80038ca:	1c43      	adds	r3, r0, #1
 80038cc:	d102      	bne.n	80038d4 <_fstat_r+0x1c>
 80038ce:	682b      	ldr	r3, [r5, #0]
 80038d0:	b103      	cbz	r3, 80038d4 <_fstat_r+0x1c>
 80038d2:	6023      	str	r3, [r4, #0]
 80038d4:	bd38      	pop	{r3, r4, r5, pc}
 80038d6:	bf00      	nop
 80038d8:	20000400 	.word	0x20000400

080038dc <_isatty_r>:
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	2300      	movs	r3, #0
 80038e0:	4d05      	ldr	r5, [pc, #20]	; (80038f8 <_isatty_r+0x1c>)
 80038e2:	4604      	mov	r4, r0
 80038e4:	4608      	mov	r0, r1
 80038e6:	602b      	str	r3, [r5, #0]
 80038e8:	f7fd f86c 	bl	80009c4 <_isatty>
 80038ec:	1c43      	adds	r3, r0, #1
 80038ee:	d102      	bne.n	80038f6 <_isatty_r+0x1a>
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	b103      	cbz	r3, 80038f6 <_isatty_r+0x1a>
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	bd38      	pop	{r3, r4, r5, pc}
 80038f8:	20000400 	.word	0x20000400

080038fc <_lseek_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4604      	mov	r4, r0
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	2200      	movs	r2, #0
 8003906:	4d05      	ldr	r5, [pc, #20]	; (800391c <_lseek_r+0x20>)
 8003908:	602a      	str	r2, [r5, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	f7fd f864 	bl	80009d8 <_lseek>
 8003910:	1c43      	adds	r3, r0, #1
 8003912:	d102      	bne.n	800391a <_lseek_r+0x1e>
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	b103      	cbz	r3, 800391a <_lseek_r+0x1e>
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	bd38      	pop	{r3, r4, r5, pc}
 800391c:	20000400 	.word	0x20000400

08003920 <_malloc_usable_size_r>:
 8003920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003924:	1f18      	subs	r0, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	bfbc      	itt	lt
 800392a:	580b      	ldrlt	r3, [r1, r0]
 800392c:	18c0      	addlt	r0, r0, r3
 800392e:	4770      	bx	lr

08003930 <_read_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	4604      	mov	r4, r0
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	2200      	movs	r2, #0
 800393a:	4d05      	ldr	r5, [pc, #20]	; (8003950 <_read_r+0x20>)
 800393c:	602a      	str	r2, [r5, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	f7fc ffed 	bl	800091e <_read>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_read_r+0x1e>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_read_r+0x1e>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	20000400 	.word	0x20000400

08003954 <_init>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	bf00      	nop
 8003958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395a:	bc08      	pop	{r3}
 800395c:	469e      	mov	lr, r3
 800395e:	4770      	bx	lr

08003960 <_fini>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr
